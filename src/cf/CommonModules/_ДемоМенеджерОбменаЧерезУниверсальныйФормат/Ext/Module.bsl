///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроцедурыКонвертации

// Процедура, выполняемая перед началом конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ОшибкаГлобальногоОбработчика");
	
	Если Не СтрЗаканчиваетсяНа(КомпонентыОбмена.XMLСхема, КомпонентыОбмена.ВерсияФорматаОбмена) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Несоответствие версии формата обмена и URI схемы в компонентах обмена.
			|Версия формата обмена: %1, URI схемы: %2'"),
			КомпонентыОбмена.ВерсияФорматаОбмена, КомпонентыОбмена.XMLСхема);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		КомпонентыОбмена.ПараметрыКонвертации.НовыеВалюты = Новый Массив;
	КонецЕсли;
	
	// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
	ДопРеквизитыИСведения = Новый ТаблицаЗначений;
	ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
	ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
	ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
	ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
	КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
КонецПроцедуры

// Процедура, выполняемая после выполнения конвертации данных.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
		УстановкаНачальныхКурсовВалют(КомпонентыОбмена.ПараметрыКонвертации.НовыеВалюты);
		
		Если КомпонентыОбмена.РежимЗагрузкиДанныхВИнформационнуюБазу Тогда
			ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура, выполняемая перед началом отложенного заполнения объектов.
//
// Параметры:
//   КомпонентыОбмена - Структура - структура компонентов обмена.
//
Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена      - Строка - "Отправка" либо "Получение".
//  ПравилаОбработкиДанных - см. ОбменДаннымиXDTOСервер.ТаблицаПравилОбработкиДанных
//
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_КорректировкаОстатковТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПокупателю_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ОтветственныеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПокупателю_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ОтветственныеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена  - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила.
//
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_ОприходованиеТоваровИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеЗапасовИзСтруктуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПокупателю_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОтветственныеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Документ_ПоступлениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПокупателю_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ОтветственныеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Документ_ОприходованиеТоваров(ПравилаКонвертации);
	ДобавитьПКО_Документ_ПеремещениеТоваров(ПравилаКонвертации);
	ДобавитьПКО_Документ_СписаниеТоваров(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Договоры(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Номенклатура(ПравилаКонвертации);
	ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации);
КонецПроцедуры

#КонецОбласти

#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена  - Строка - "Отправка" либо "Получение".
//  ПравилаКонвертации - ТаблицаЗначений - таблица значений, в которую будут добавлены правила.
//
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации           = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД   = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO   = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailКонтактногоЛица"), "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailКонтрагента"), "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailОрганизации"), "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailПартнера"), "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailФизическогоЛица"), "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоSkypeКонтрагенты"), "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресКонтактногоЛица"), "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресКонтрагента"), "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресПартнера"), "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоДругаяИнформацияОрганизации"), "ПользовательскаяКИДругое");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоПартнерыИКонтактныеЛицаEmailПартнера"), "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоПартнерыИКонтактныеЛицаАдресПартнера"), "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоПартнерыИКонтактныеЛицаТелефонПартнера"), "Телефон");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоПочтовыйАдресОрганизации"), "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоТелефонОрганизации"), "Телефон");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоТелефонПартнера"), "Телефон");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоФаксОрганизации"), "Факс");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоФактическийАдресОрганизации"), "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоЮридическийАдресОрганизации"), "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("EmailПользователя"), "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("ТелефонПользователя"), "Телефон");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;

	// Перечисление_Пол.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "Перечисление_Пол";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления._ДемоПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO   = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления._ДемоПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления._ДемоПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления._ДемоПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления._ДемоПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации           = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД   = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления._ДемоЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO   = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления._ДемоЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления._ДемоЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти

#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - Структура - структура, в которую добавляются параметры конвертации:
//                                     Ключ - имя параметра, значение - значение параметра, по умолчанию - Неопределено.
//
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВалютаПоУмолчанию");
	ПараметрыКонвертации.Вставить("НовыеВалюты");
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - Строка - имя процедуры этого модуля.
//  Параметры - Структура:
//    * ОбъектОбработки - Произвольный
//    * ИспользованиеПКО - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * ДанныеИБ - СправочникОбъект
//               - ДокументОбъект
//               - и т.п.
//    * ПолученныеДанные - СправочникОбъект
//                       - ДокументОбъект
//                       - и т.п.
//    * КонвертацияСвойств - ТаблицаЗначений
//    * ДанныеXDTO - Структура
//    * КомпонентыОбмена - см. ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена
//    * СтекВыгрузки - Массив из Произвольный
//
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_КорректировкаОстатковТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_КорректировкаОстатковТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваровИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваровИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеЗапасовИзСтруктуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеЗапасовИзСтруктуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПокупателю_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетПокупателю_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Договоры_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Договоры" Тогда 
		ОтложеннаяОбработка_Договоры(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеТоваров" Тогда 
		ОтложеннаяОбработка_ПоступлениеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияТоваров" Тогда 
		ОтложеннаяОбработка_РеализацияТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	КонецЕсли;
КонецПроцедуры

// Возвращает версию формата менеджера обмена.
//
// Возвращаемое значение:
//  Строка - номер версии.
//
Функция ВерсияФорматаМенеджераОбмена() Экспорт
    Возврат "2";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПКО

#Область Отправка
#Область Документ_ОприходованиеТоваровИзСтруктуры_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваровИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ОприходованиеТоваровИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваровИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Ответственный", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваровИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата",        ДанныеИБ.Дата);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер",       ДанныеИБ.Номер);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДанныеИБ.Организация);
	
	ДанныеXDTO.Вставить("Комментарий",   ДанныеИБ.Комментарий);
	ДанныеXDTO.Вставить("Ответственный", ДанныеИБ.Ответственный);
	ДанныеXDTO.Вставить("Склад",         ДанныеИБ.Склад);
	ДанныеXDTO.Вставить("Сумма",         ДанныеИБ.Товары.Итог("Сумма"));
	
	ДобавитьЕдиницуИзмеренияВТаблицуТовары(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы._ДемоПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",       "Договор", , "Справочник_Договоры");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "МестоХранения", "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",              "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "Валюта",        "Валюта", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "",             "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", ,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "",             "НомерГТД", 1);
	ДобавитьПКС(СвойстваТЧ, "",             "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваТЧ, "",             "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "",             "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "Цена",         "Цена");

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ОшибкаОбработчикаПКО");
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВалюту(ДанныеXDTO, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);	
	ДанныеXDTO.Вставить("ВидОперации", "ПокупкаУПоставщика");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_ДемоПоступлениеТоваровТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВЫРАЗИТЬ(_ДемоПоступлениеТоваровТовары.Цена * _ДемоПоступлениеТоваровТовары.Количество КАК ЧИСЛО(15, 2)) КАК Сумма
	|ИЗ
	|	Документ._ДемоПоступлениеТоваров.Товары КАК _ДемоПоступлениеТоваровТовары
	|ГДЕ
	|	_ДемоПоступлениеТоваровТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Товары
	ИндексСтроки = 0;
	
	ДополнительныеПараметры = Новый Структура;
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ПроверкаЗначенияНаСоответствиеФасетуПеречисления", ДополнительныеПараметры);
	
	ТекСтавкаНДС = Неопределено;
	Если Не ДополнительныеПараметры.Свойство("СтавкаНДС", ТекСтавкаНДС) Тогда
		ТекСтавкаНДС = ПолучитьСтавкуНДСДокумента(ДанныеИБ.СтавкаНДС);
	КонецЕсли;
		
	Пока Выборка.Следующий() Цикл
		СтрокаТовары = ДанныеXDTO.Товары[ИндексСтроки];
		СтрокаТовары.СтавкаНДС = ТекСтавкаНДС;
		СтрокаТовары.НомерГТД = "";
		СтрокаТовары.ЕдиницаИзмерения = Новый Структура("Ссылка,Код","","796");
		СтрокаТовары.Сумма = Выборка.Сумма;
		СтрокаТовары.СтранаПроисхождения = Выборка.СтранаПроисхождения;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваров_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_РеализацияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы._ДемоРеализацияТоваров;
	ПравилоКонвертации.ОбъектФормата     = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Дата",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",             "Договор", , "Справочник_Договоры");
	ДобавитьПКС(СвойстваШапки, "Комментарий",         "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",          "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "МестоХранения",       "Склад", , "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "Номер",               "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "",                    "ВидОперации", 1);
	ДобавитьПКС(СвойстваШапки, "",                    "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ДокументПоступления", 1,"Документ_ПоступлениеТоваров_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Оптимизация за счет отключения логики, не востребованной при выгрузке только ключевых свойств.
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидОперации", "РеализацияКлиенту");
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ._ДемоРеализацияТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.Цена * Товары.Количество КАК ЧИСЛО(31, 2)) КАК Сумма,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Цена КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ТоварыССуммой
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТоварыССуммой.Сумма) КАК Сумма
	|ИЗ
	|	ТоварыССуммой КАК ТоварыССуммой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыССуммой.Сумма,
	|	ТоварыССуммой.Номенклатура,
	|	ТоварыССуммой.Цена,
	|	ТоварыССуммой.Количество,
	|	ТоварыССуммой.ДокументПоступления
	|ИЗ
	|	ТоварыССуммой КАК ТоварыССуммой");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаСуммаДокумента = РезультатыЗапроса[2].Выбрать();
	Товары                = РезультатыЗапроса[3].Выгрузить();
	
	ДанныеXDTO.Вставить("Сумма", 0);
	Если ВыборкаСуммаДокумента.Следующий() Тогда
		ДанныеXDTO.Сумма = ВыборкаСуммаДокумента.Сумма;
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		ДобавитьЕдиницуИзмеренияВТаблицуТовары(Товары);
		ДанныеXDTO.Вставить("Товары", Товары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеЗапасовИзСтруктуры_Отправка
Процедура ДобавитьПКО_Документ_СписаниеЗапасовИзСтруктуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СписаниеЗапасовИзСтруктуры_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеЗапасовИзСтруктуры_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Дата", 1);
	ДобавитьПКС(СвойстваШапки, "", "Комментарий", 1);
	ДобавитьПКС(СвойстваШапки, "", "Номер", 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1, "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Ответственный", 1, "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1, "Справочник_Склады_Отправка");
	ДобавитьПКС(СвойстваШапки, "", "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Номенклатура", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Цена", 1);

КонецПроцедуры

Процедура ПКО_Документ_СписаниеЗапасовИзСтруктуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("Дата",        ДанныеИБ.Дата);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Номер",       ДанныеИБ.Номер);
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДанныеИБ.Организация);
	
	ДанныеXDTO.Вставить("Комментарий",   ДанныеИБ.Комментарий);
	ДанныеXDTO.Вставить("Ответственный", ДанныеИБ.Ответственный);
	ДанныеXDTO.Вставить("Склад",         ДанныеИБ.Склад);
	ДанныеXDTO.Вставить("Сумма",         ДанныеИБ.Товары.Итог("Сумма"));
	
	ДобавитьЕдиницуИзмеренияВТаблицуТовары(ДанныеИБ.Товары);
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПокупателю_Отправка
Процедура ДобавитьПКО_Документ_СчетПокупателю_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Документ_СчетПокупателю_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Документы._ДемоСчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата     = "Документ.СчетПокупателю";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Отправка");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",          "Договор", , "Справочник_Договоры");
	ДобавитьПКС(СвойстваШапки, "Контрагент",       "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "",                 "Сумма", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "",             "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", ,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "Цена",         "Цена");

КонецПроцедуры

Процедура ПКО_Документ_СчетПокупателю_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Сумма", ДанныеXDTO.Товары.Итог("Сумма"));
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из ДанныеXDTO.Товары Цикл
		СтрокаТовары.ЕдиницаИзмерения = Новый Структура("Ссылка, Код", "", "796");
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники._ДемоБанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                   "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",        "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Валюта",                 "ВалютаДенежныхСредств", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",    "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначенияПлатежа", "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "",                       "Владелец", 1);
	ДобавитьПКС(СвойстваШапки, "НомерСчета",             "НомерСчета", 1);

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка._ДемоФизическиеЛица") Тогда
		Инструкция.ИмяПКО = "Справочник_ФизическиеЛица";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ЕдиницыИзмерения_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных      = Неопределено;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ЕдиницыИзмерения";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "Код", 1);
	ДобавитьПКС(СвойстваШапки, "", "Наименование", 1);

КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники._ДемоОрганизации;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Организации";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",     "ГоловнаяОрганизация", , "Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваШапки, "ИНН",                     "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                     "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное", "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "Префикс",                 "Префикс");
	ДобавитьПКС(СвойстваШапки, "",                        "ЮридическоеФизическоеЛицо", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "КонтактнаяИнформация");
	ДобавитьПКС(СвойстваТЧ, "", "ВидКонтактнойИнформации", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ЗначенияПолей", 1);
	ДобавитьПКС(СвойстваТЧ, "", "НаименованиеКонтактнойИнформации", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
	Иначе
		ДанныеXDTO.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
		Возврат;
	КонецЕсли;
	
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ОтветственныеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_ОтветственныеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.РегистрыСведений._ДемоОтветственныеЛица;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.ОтветственныеЛица";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "", "ВидОтветственногоЛицаОтбор", 1);
	ДобавитьПКС(СвойстваШапки, "", "ОрганизацияОтбор", 1, "Справочник_Организации_Отправка");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "", "Записи");
	ДобавитьПКС(СвойстваТЧ, "", "ВидДокументаПравоПодписи", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ВидОтветственногоЛица", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ДатаНачала", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Организация", 1,"Справочник_Организации_Отправка");
	ДобавитьПКС(СвойстваТЧ, "", "ФизическоеЛицо", 1,"Справочник_ФизическиеЛица");

КонецПроцедуры

Процедура ПКО_Справочник_ОтветственныеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ДанныеИБ в данном случае - набор записей регистра сведений _ДемоОтветственныеЛица.
	// Свойство, соответствующее отбору, заполняется из отбора в наборе записей.
	ДанныеXDTO.Вставить("ОрганизацияОтбор", ДанныеИБ.Отбор.Организация.Значение);
	
	// Свойство является обязательным для заполнения.
	// Надо его заполнить чем-нибудь.
	ДанныеXDTO.Вставить("ВидОтветственногоЛицаОтбор", "Прочее");
	
	// Подготовка таблицы значений, содержащую данные из набора записей.
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("Организация");
	Записи.Колонки.Добавить("ФизическоеЛицо");
	Записи.Колонки.Добавить("ВидОтветственногоЛица");
	Записи.Колонки.Добавить("ВидДокументаПравоПодписи");
	Записи.Колонки.Добавить("ДатаНачала");
	
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
		
		// Свойства является обязательными для заполнения.
		// Надо их заполнить чем-нибудь.
		СтрокаЗаписи.ВидОтветственногоЛица = "Прочее";
		СтрокаЗаписи.ВидДокументаПравоПодписи = "Приказ";
		СтрокаЗаписи.ДатаНачала = ТекущаяДатаСеанса();
	КонецЦикла;
	// Заполнение табличной части Записи подготовленной таблицей значений.
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО            = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных      = Метаданные.Справочники._ДемоМестаХранения;
	ПравилоКонвертации.ОбъектФормата     = "Справочник.Склады";
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "",             "ТипСклада", 1);

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ТипСклада", "Оптовый");
	Иначе
		ДанныеXDTO.Вставить("ТипСклада", "Оптовый");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область Получение
#Область Документ_ПоступлениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПоступлениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы._ДемоПоступлениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_ПоступлениеТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",        "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",       "Договор", , "Справочник_Договоры");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",    "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "МестоХранения", "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",   "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",      "", 1);
	ДобавитьПКС(СвойстваШапки, "НомерВходящегоДокумента", "НомерВходящегоДокумента");
	ДобавитьПКС(СвойстваШапки, "ДатаВходящегоДокумента",  "ДатаВходящегоДокумента");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", ,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "Цена",         "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ИндексСтроки = 0;
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтрокаТЧ = ПолученныеДанные.Товары[ИндексСтроки];
			СтрокаТЧ.Цена = Строка.Цена;
			ИндексСтроки = ИндексСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОбъект", ПолученныеДанные);
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ОшибкаПроверкиЗаполнения", ДополнительныеПараметры);
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ОшибкаОтложенногоЗаполненияПТиУ", ДополнительныеПараметры);
	ПолученныеДанные = ДополнительныеПараметры.ДокументОбъект;
	
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваров_Получение
Процедура ДобавитьПКО_Документ_РеализацияТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_РеализацияТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы._ДемоРеализацияТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_РеализацияТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_РеализацияТоваров";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Валюта",              "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация", "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Дата",                "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",             "Договор", , "Справочник_Договоры");
	ДобавитьПКС(СвойстваШапки, "Комментарий",         "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Контрагент",          "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "МестоХранения",       "Склад", , "Справочник_Склады_Получение");
	ДобавитьПКС(СвойстваШапки, "Номер",               "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный",       "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "Проведен",            "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "");
	ДобавитьПКС(СвойстваТЧ, "ДокументПоступления", "", 1,"Документ_ПоступлениеТоваров_Получение");
	ДобавитьПКС(СвойстваТЧ, "Количество",          "", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура",        "", 1,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "Цена",                "", 1);

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	// Товары 
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура",        "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество",          "Количество");
	ПравилаЗаполнения.Вставить("Цена",                "Цена");
	ПравилаЗаполнения.Вставить("ДокументПоступления", "ДокументПоступления");
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПокупателю_Получение
Процедура ДобавитьПКО_Документ_СчетПокупателю_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СчетПокупателю_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы._ДемоСчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СчетПокупателю";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СчетПокупателю_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "БанковскийСчет",   "БанковскийСчетОрганизации", , "Справочник_БанковскиеСчета_Получение");
	ДобавитьПКС(СвойстваШапки, "ВалютаДокумента",  "Валюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Дата",             "Дата");
	ДобавитьПКС(СвойстваШапки, "Договор",          "Договор", , "Справочник_Договоры");
	ДобавитьПКС(СвойстваШапки, "Контрагент",       "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "Номер",            "Номер");
	ДобавитьПКС(СвойстваШапки, "Организация",      "Организация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "Ответственный",    "Ответственный", , "Справочник_Пользователи");
	ДобавитьПКС(СвойстваШапки, "СуммаВключаетНДС", "СуммаВключаетНДС");
	ДобавитьПКС(СвойстваШапки, "СуммаОплаты",      "Сумма");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", ,"Справочник_Номенклатура");
	ДобавитьПКС(СвойстваТЧ, "Сумма",        "Сумма");
	ДобавитьПКС(СвойстваТЧ, "СуммаНДС",     "СуммаНДС");
	ДобавитьПКС(СвойстваТЧ, "Цена",         "Цена");

КонецПроцедуры

Процедура ПКО_Документ_СчетПокупателю_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоБанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Банк",                   "Банк", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "БанкДляРасчетов",        "БанкДляРасчетов", , "Справочник_Банки");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерСчета",             "НомерСчета");
	ДобавитьПКС(СвойстваШапки, "ТекстКорреспондента",    "ТекстКорреспондента");
	ДобавитьПКС(СвойстваШапки, "ТекстНазначенияПлатежа", "ТекстНазначения");
	ДобавитьПКС(СвойстваШапки, "Валюта",                 "ВалютаДенежныхСредств", 1, "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Владелец",               "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,НомерСчета");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец
	// Выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
	
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты";
		
		Если СтрНайти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		КонецЕсли;	
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение, ИмяПКО", Владелец, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоОрганизации;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Организации";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ГоловнаяОрганизация",     "ГоловнаяОрганизация", , "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ИНН",                     "ИНН");
	ДобавитьПКС(СвойстваШапки, "КПП",                     "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",            "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",      "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "НаименованиеСокращенное", "НаименованиеСокращенное");
	ДобавитьПКС(СвойстваШапки, "Префикс",                 "Префикс");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "КонтактнаяИнформация", "");
	ДобавитьПКС(СвойстваТЧ, "Вид",           "", 1);
	ДобавитьПКС(СвойстваТЧ, "ЗначенияПолей", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Представление", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Тип",           "", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("_ДемоИНН,_ДемоКПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("_ДемоНаименованиеПолное");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("Справочник_ДемоОрганизации"));
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Получение
Процедура ДобавитьПКО_Справочник_ОтветственныеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ОтветственныеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.РегистрыСведений._ДемоОтветственныеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ОтветственныеЛица";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Организация",    "", 1, "Справочник_Организации_Получение");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "", 1, "Справочник_ФизическиеЛица");

	ПравилоКонвертации.ПоляПоиска.Добавить("Организация");
КонецПроцедуры

Процедура ПКО_Справочник_ОтветственныеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// В случае с набором записей регистра сведений все заполнение происходит с помощью алгоритмов.
	// Содержимое ДанныеXDTO сохраняется в ДополнительныеСвойства для последующей обработки.
	// Далее эти значения используются в ПередЗаписьюПолученныхДанных. 
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ОрганизацияОтбор", ДанныеXDTO.ОрганизацияОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ОтветственныеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Определение правил конвертации, с помощью которых будет преобразование ОбъектXDTO - ДанныеИБ.
	ПКО_Организации = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_Организации_Получение");
	ПКО_ФизЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ФизическиеЛица");
	
	// Вычисление организации, указанной в отборе.
	ОрганизацияСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			ПолученныеДанные.ДополнительныеСвойства.ОрганизацияОтбор, 
			ПКО_Организации, 
			"ПолучитьСсылку").Ссылка;
	
	// Заполнение отбора набора записей регистра сведений.
	ПолученныеДанные.Отбор.Организация.Значение = ОрганизацияСсылка;
	ПолученныеДанные.Отбор.Организация.Использование = Истина;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Организация = ОрганизацияСсылка;
			СтрокаЗаписи.ФизическоеЛицо = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.ФизическоеЛицо, 
				ПКО_ФизЛица, 
				"ПолучитьСсылку").Ссылка;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоМестаХранения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Склады";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область ОтправкаИПолучение
#Область Документ_ОприходованиеТоваров
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ОприходованиеТоваров";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы._ДемоОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_ОприходованиеТоваров_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	
	ДобавитьПКС(СвойстваШапки, "МестоХранения", , 1);
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1);
	
	ДобавитьПКС(СвойстваШапки, "Организация", , 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество", 1);
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", 1,"Справочник_Номенклатура");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",       "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "СтранаПроисхождения", 1,"Справочник_СтраныМира");
	ДобавитьПКС(СвойстваТЧ, "", "Сумма", 1);
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеОрганизация = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Организация,"Справочник_Организации_Отправка");
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Организация", ДанныеОрганизация);
		Возврат;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДанныеОрганизация);
	ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", ДанныеИБ.МестоХранения,"Справочник_Склады_Отправка"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_ДемоТовары.Номенклатура КАК Номенклатура,
	|	_ДемоТовары.Количество КАК Количество,
	|	_ДемоТовары.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ._ДемоОприходованиеТоваров.Товары КАК _ДемоТовары
	|ГДЕ
	|	_ДемоТовары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ТабТовары = Запрос.Выполнить().Выгрузить();
	ТабТовары.Колонки.Добавить("ЕдиницаИзмерения");
	ТабТовары.Колонки.Добавить("Сумма");
	ТабТовары.Колонки.Добавить("ТипЗапасов");
	
	// Товары
	Для Каждого СтрокаТовары Из ТабТовары Цикл
		СтрокаТовары.ЕдиницаИзмерения = Новый Структура("Ссылка,Код","","796");
		СтрокаТовары.Сумма = 1;
		СтрокаТовары.ТипЗапасов = "СобственныеТовары";
	КонецЦикла;
	ДанныеXDTO.Вставить("Товары", ТабТовары);
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Организация") Тогда
		ДанныеОрганизация = ДанныеXDTO.Организация;
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Организация") Тогда
		ДанныеОрганизация = ДанныеXDTO.КлючевыеСвойства.Организация;
	Иначе
		ДанныеОрганизация = Неопределено;
	КонецЕсли;
	Если ДанныеОрганизация <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеОрганизация,"Справочник_Организации_Получение"));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Склад") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("МестоХранения", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Склад,"Справочник_Склады_Получение"));
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		МассивСтрокТМЦ = Новый Массив;
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			
			СтруктураСтроки = Новый Структура;
			
			ИмяПКО = "Справочник_Номенклатура";
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			Номенклатура = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(
				КомпонентыОбмена, СтрокаXDTO.Номенклатура, ПКО, "ПолучитьСсылку").Ссылка;
				
			СтруктураСтроки.Вставить("Номенклатура", Номенклатура);
			СтруктураСтроки.Вставить("Количество", СтрокаXDTO.Количество);
			
			МассивСтрокТМЦ.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТМЦ);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОбъект", ПолученныеДанные);
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ОшибкаПроверкиЗаполнения", ДополнительныеПараметры);
	ПолученныеДанные = ДополнительныеПараметры.ДокументОбъект;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_ПеремещениеТоваров";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы._ДемоПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_ПеремещениеТоваров_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_ПеремещениеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",                  "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",           "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",                 "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный",         "Ответственный", , "Справочник_Пользователи");
	
	ДобавитьПКС(СвойстваШапки, "МестоХраненияИсточник", , 1);
	ДобавитьПКС(СвойстваШапки, "", "СкладОтправитель", 1);
	
	ДобавитьПКС(СвойстваШапки, "МестоХраненияПриемник", , 1);
	ДобавитьПКС(СвойстваШапки, "", "СкладПолучатель", 1);
	
	ДобавитьПКС(СвойстваШапки, "Организация", , 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", ,"Справочник_Номенклатура");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",       "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеОрганизация = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Организация,"Справочник_Организации_Отправка");
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Организация", ДанныеОрганизация);
		Возврат;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДанныеОрганизация);
	
	ДанныеXDTO.Вставить("СкладОтправитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.МестоХраненияИсточник,"Справочник_Склады_Отправка"));
	ДанныеXDTO.Вставить("СкладПолучатель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.МестоХраненияПриемник,"Справочник_Склады_Отправка"));
	
	ДобавитьЕдиницуИзмеренияВТаблицуТовары(ДанныеXDTO.Товары);
	ДобавитьТипЗапасовВТаблицуТовары(ДанныеXDTO.Товары);
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Организация") Тогда
		ДанныеОрганизация = ДанныеXDTO.Организация;
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Организация") Тогда
		ДанныеОрганизация = ДанныеXDTO.КлючевыеСвойства.Организация;
	Иначе
		ДанныеОрганизация = Неопределено;
	КонецЕсли;
	Если ДанныеОрганизация <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеОрганизация,"Справочник_Организации_Получение"));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СкладОтправитель") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("МестоХраненияИсточник", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.СкладОтправитель,"Справочник_Склады_Получение"));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СкладПолучатель") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("МестоХраненияПриемник", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.СкладПолучатель,"Справочник_Склады_Получение"));
	КонецЕсли;
	
	ПолученныеДанные.Проведен = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОбъект", ПолученныеДанные);
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ОшибкаПроверкиЗаполнения", ДополнительныеПараметры);
	ПолученныеДанные = ДополнительныеПараметры.ДокументОбъект;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров
Процедура ДобавитьПКО_Документ_СписаниеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Документ_СписаниеТоваров";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Документы._ДемоСписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата                = "Документ.СписаниеЗапасов";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Документ_СписаниеТоваров_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Дата",          "Дата");
	ДобавитьПКС(СвойстваШапки, "Комментарий",   "Комментарий");
	ДобавитьПКС(СвойстваШапки, "Номер",         "Номер");
	ДобавитьПКС(СвойстваШапки, "Ответственный", "Ответственный", , "Справочник_Пользователи");
	
	ДобавитьПКС(СвойстваШапки, "МестоХранения", , 1);
	ДобавитьПКС(СвойстваШапки, "", "Склад", 1);
	
	ДобавитьПКС(СвойстваШапки, "Организация", , 1);
	ДобавитьПКС(СвойстваШапки, "", "Организация", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "Товары", "Товары");
	ДобавитьПКС(СвойстваТЧ, "Количество",   "Количество");
	ДобавитьПКС(СвойстваТЧ, "Номенклатура", "Номенклатура", ,"Справочник_Номенклатура");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",       "Товары");
	ДобавитьПКС(СвойстваТЧ, "", "ЕдиницаИзмерения", 1,"Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваТЧ, "", "ТипЗапасов", 1);

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеОрганизация = Новый Структура("Значение, ИмяПКО", ДанныеИБ.Организация,"Справочник_Организации_Отправка");
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("Организация", ДанныеОрганизация);
		Возврат;
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Организация", ДанныеОрганизация);
	ДанныеXDTO.Вставить("Склад", Новый Структура("Значение, ИмяПКО", ДанныеИБ.МестоХранения,"Справочник_Склады_Отправка"));
	ДобавитьЕдиницуИзмеренияВТаблицуТовары(ДанныеXDTO.Товары);
	ДобавитьТипЗапасовВТаблицуТовары(ДанныеXDTO.Товары);
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("Организация") Тогда
		ДанныеОрганизация = ДанныеXDTO.Организация;
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Организация") Тогда
		ДанныеОрганизация = ДанныеXDTO.КлючевыеСвойства.Организация;
	Иначе
		ДанныеОрганизация = Неопределено;
	КонецЕсли;
	Если ДанныеОрганизация <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеОрганизация,"Справочник_Организации_Получение"));
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Склад") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("МестоХранения", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Склад,"Справочник_Склады_Получение"))
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Проведен = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДокументОбъект", ПолученныеДанные);
	_ДемоОбменДаннымиСобытия.ПроверкаНегативногоСценария(КомпонентыОбмена.УзелКорреспондента, "ОшибкаПроверкиЗаполнения", ДополнительныеПараметры);
	ПолученныеДанные = ДополнительныеПараметры.ДокументОбъект;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Адрес",        "Адрес");
	ДобавитьПКС(СвойстваШапки, "Город",        "Город");
	ДобавитьПКС(СвойстваШапки, "Код",          "БИК");
	ДобавитьПКС(СвойстваШапки, "КоррСчет",     "КоррСчет");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Телефоны",     "Телефоны");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанкиГруппа
Процедура ДобавитьПКО_Справочник_БанкиГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_БанкиГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.КлассификаторБанков;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Валюты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "ПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ЗагружаетсяИзИнтернета", "ЗагружаетсяИзИнтернета");
	ДобавитьПКС(СвойстваШапки, "Код",                    "Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",           "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное",     "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "ОсновнаяВалюта",         "ОсновнаяВалюта", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "ПараметрыПрописи",       "ПараметрыПрописиНаРусском");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	НовыеВалюты = КомпонентыОбмена.ПараметрыКонвертации.НовыеВалюты; // Массив из СправочникСсылка.Валюты
	Если ДанныеИБ = Неопределено Тогда
		НовыеВалюты.Добавить(ПолученныеДанные.ПолучитьСсылкуНового());
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Если ДанныеДляЗаписиВИБ.ЗагружаетсяИзИнтернета Тогда
		ДанныеДляЗаписиВИБ.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СпособУстановкиКурса) Тогда
		ДанныеДляЗаписиВИБ.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры
Процедура ДобавитьПКО_Справочник_Договоры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Договоры";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Договоры";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Договоры_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных      = "ОтложеннаяОбработка_Договоры";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВалютаРасчетов",        "ВалютаВзаиморасчетов", , "Справочник_Валюты");
	ДобавитьПКС(СвойстваШапки, "Владелец",              "Контрагент", , "Справочник_Контрагенты");
	ДобавитьПКС(СвойстваШапки, "ДатаДоговора",          "Дата");
	ДобавитьПКС(СвойстваШапки, "ДатаОкончанияДействия", "СрокДействия");
	ДобавитьПКС(СвойстваШапки, "Наименование",          "Наименование");
	ДобавитьПКС(СвойстваШапки, "НомерДоговора",         "Номер");
	ДобавитьПКС(СвойстваШапки, "",                      "ВидДоговора", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "Организация", 1);
	ДобавитьПКС(СвойстваШапки, "",                      "РасчетыВУсловныхЕдиницах", 1);
	ДобавитьПКС(СвойстваШапки, "Организация",           "", 1, "Справочник_Организации_Получение");

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,Владелец,Организация,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаРасчетов,Владелец,Организация");
КонецПроцедуры

Процедура ПКО_Справочник_Договоры_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		СтруктураДляСвойств = ДанныеXDTO;
	Иначе
		СтруктураДляСвойств = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	
	ОрганизацияДоговора = ДанныеИБ.Организация;
	Если Не ЗначениеЗаполнено(ОрганизацияДоговора) Тогда
		
		ОрганизацияДоговора = Константы._ДемоОсновнаяОрганизация.Получить();
		
		Если Не ЗначениеЗаполнено(ОрганизацияДоговора) Тогда
			Запрос = Новый Запрос();
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник._ДемоОрганизации";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ОрганизацияДоговора = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДляСвойств.Вставить("Организация", Новый Структура("Значение, ИмяПКО",
		ОрганизацияДоговора, "Справочник_Организации_Отправка"));
	
	СтруктураДляСвойств.Вставить("ВидДоговора", "Прочее");
	СтруктураДляСвойств.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
КонецПроцедуры

Процедура ПКО_Справочник_Договоры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Организация", Новый Структура("Значение, ИмяПКО",
		ДанныеXDTO.КлючевыеСвойства.Организация, "Справочник_Организации_Получение"));
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВладелецДополнительныхЗначений",     "ВладелецДополнительныхЗначений", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияИспользуются", "ДополнительныеЗначенияИспользуются");
	ДобавитьПКС(СвойстваШапки, "ДополнительныеЗначенияСВесом",       "ДополнительныеЗначенияСВесом");
	ДобавитьПКС(СвойстваШапки, "Заголовок",                          "Заголовок");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыВыбораЗначения",       "ЗаголовокФормыВыбораЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаголовокФормыЗначения",             "ЗаголовокФормыЗначения");
	ДобавитьПКС(СвойстваШапки, "ЗаполнятьОбязательно",               "ЗаполнятьОбязательно");
	ДобавитьПКС(СвойстваШапки, "Комментарий",                        "Комментарий");
	ДобавитьПКС(СвойстваШапки, "МногострочноеПолеВвода",             "МногострочноеПолеВвода");
	ДобавитьПКС(СвойстваШапки, "Наименование",                       "Наименование");
	ДобавитьПКС(СвойстваШапки, "Подсказка",                          "Подсказка");
	ДобавитьПКС(СвойстваШапки, "ФорматСвойства",                     "ФорматСвойства");
	ДобавитьПКС(СвойстваШапки, "ЭтоДополнительноеСведение",          "ЭтоДополнительноеСведение");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДополнительныхРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Вес",          "Вес");
	ДобавитьПКС(СвойстваШапки, "Владелец",     "Владелец", , "Справочник_ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты
Процедура ДобавитьПКО_Справочник_Контрагенты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Контрагенты";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоКонтрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Контрагенты";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "ВидКонтрагента",     "ЮридическоеФизическоеЛицо", , "ЮридическоеФизическоеЛицо");
	ДобавитьПКС(СвойстваШапки, "ИНН",                "ИНН");
	ДобавитьПКС(СвойстваШапки, "КодПоОКПО",          "ОКПО");
	ДобавитьПКС(СвойстваШапки, "КПП",                "КПП");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",           "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,НаименованиеПолное,ЭтоГруппа,ВидКонтрагента");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа,ВидКонтрагента");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоКонтрагенты;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_КонтрагентыГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура
Процедура ДобавитьПКО_Справочник_Номенклатура(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Номенклатура";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоНоменклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Номенклатура";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Номенклатура_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Артикул",         "Артикул");
	ДобавитьПКС(СвойстваШапки, "Код",             "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "КодОКВЭД",        "КодОКВЭД.Код");
	ДобавитьПКС(СвойстваШапки, "КодТНВЭД",        "КодТНВЭД.Код");
	ДобавитьПКС(СвойстваШапки, "Наименование",    "Наименование", 1);
	ДобавитьПКС(СвойстваШапки, "Наименование",    "НаименованиеПолное");
	ДобавитьПКС(СвойстваШапки, "Родитель",        "Группа", 1);
	ДобавитьПКС(СвойстваШапки, "",                "АлкогольнаяПродукция", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ВидАлкогольнойПродукции", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ЕдиницаИзмерения", 1, "Справочник_ЕдиницыИзмерения_ИзСтруктуры");
	ДобавитьПКС(СвойстваШапки, "",                "ИмпортнаяАлкогольнаяПродукция", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ОбъемДАЛ", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ПроизводительИмпортер", 1);
	ДобавитьПКС(СвойстваШапки, "",                "СтавкаНДС", 1);
	ДобавитьПКС(СвойстваШапки, "",                "ТипНоменклатуры", 1);
	ДобавитьПКС(СвойстваШапки, "ВидНоменклатуры", "", 1);
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "",                        "ДополнительныеРеквизиты");
	ДобавитьПКС(СвойстваТЧ, "", "ЗначениеСвойства", 1);
	ДобавитьПКС(СвойстваТЧ, "", "Свойство", 1,"Справочник_ДополнительныеРеквизиты");
	
	СвойстваТЧ = ДобавитьПКТЧ(ПравилоКонвертации, "ДополнительныеРеквизиты", "");
	ДобавитьПКС(СвойстваТЧ, "Значение", "", 1);
	ДобавитьПКС(СвойстваТЧ, "Свойство", "", 1,"Справочник_ДополнительныеРеквизиты");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
	ДанныеXDTO.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ИмпортнаяАлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", Неопределено);
	ДанныеXDTO.Вставить("ОбъемДАЛ", 0.00);
	ДанныеXDTO.Вставить("ПроизводительИмпортер", Неопределено);
	ДанныеXDTO.Вставить("СтавкаНДС", "НДС18");
	
	КлючевыеСвойства = ДанныеXDTO;
	Если СтекВыгрузки.Количество() = 1 Тогда
		КлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
	КонецЕсли;
	КлючевыеСвойства.Вставить("Наименование", ДанныеИБ.Наименование);
	КлючевыеСвойства.Вставить("Группа", Новый Структура("ИмяПКО, Значение", "Справочник_НоменклатураГруппа", ДанныеИБ.Родитель));
	
	СтруктураДанныеЕдИзмерения = Новый Структура("Код, Наименование");
	СтруктураДанныеЕдИзмерения.Код = "796";
	СтруктураДанныеЕдИзмерения.Наименование = "шт.";
	ДанныеXDTO.Вставить("ЕдиницаИзмерения", Новый Структура("Значение, ИмяПКО", СтруктураДанныеЕдИзмерения, "Справочник_ЕдиницыИзмерения_ИзСтруктуры"));
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ТипНоменклатуры") И ЗначениеЗаполнено(ДанныеXDTO.ТипНоменклатуры) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ТипНоменклатуры", ДанныеXDTO.ТипНоменклатуры.Значение);
	КонецЕсли;
	
	КлючевыеСвойства = Неопределено;
	Если Не ДанныеXDTO.Свойство("КлючевыеСвойства", КлючевыеСвойства) Тогда
		КлючевыеСвойства = ДанныеXDTO;
	КонецЕсли;
	Если КлючевыеСвойства.Свойство("Группа") Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Родитель",
			Новый Структура("ИмяПКО, Значение", "Справочник_НоменклатураГруппа", КлючевыеСвойства.Группа));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Для существующих элементов вид номенклатуры не затираем,
	// для новых - находим по наименованию типа номенклатуры или создаем.
	Если ДанныеИБ = Неопределено Тогда
		
		ТипНоменклатуры = "";
		ПолученныеДанные.ДополнительныеСвойства.Свойство("ТипНоменклатуры", ТипНоменклатуры);
		ВидНоменклатуры = Неопределено;
		
		Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
			НаименованиеЭлементаДляОбменаПоУмолчанию = ТипНоменклатуры; 
		Иначе
			НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru = 'Тип номенклатуры не указан'", ОбщегоНазначения.КодОсновногоЯзыка()); 
		КонецЕсли;
		ВидыНоменклатурыСсылка = Справочники._ДемоВидыНоменклатуры.НайтиПоНаименованию(НаименованиеЭлементаДляОбменаПоУмолчанию);
		Если ЗначениеЗаполнено(ВидыНоменклатурыСсылка) Тогда
			ВидНоменклатуры = ВидыНоменклатурыСсылка;
		Иначе
			ВидыНоменклатурыОбъект = Справочники._ДемоВидыНоменклатуры.СоздатьЭлемент();
			ВидыНоменклатурыОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
			ВидыНоменклатурыОбъект.Записать();
			ВидНоменклатуры = ВидыНоменклатурыОбъект.Ссылка;
		КонецЕсли;
		
		ПолученныеДанные.ВидНоменклатуры = ВидНоменклатуры;
		
	Иначе
		ПолученныеДанные.ВидНоменклатуры = ДанныеИБ.ВидНоменклатуры;
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоНоменклатура;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",          "КодВПрограмме");
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_НоменклатураГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Родитель,Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.Пользователи";
	ПравилоКонвертации.ПриОтправкеДанных            = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO     = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование",   "Наименование");
	ДобавитьПКС(СвойстваШапки, "",               "ФизическоеЛицо", 1, "Справочник_ФизическиеЛица");
	ДобавитьПКС(СвойстваШапки, "ФизическоеЛицо", "", 1, "Справочник_ФизическиеЛица");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ФизическоеЛицо");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Инструкция = Новый Структура("Значение, ИмяПКО", ДанныеИБ.ФизическоеЛицо, "Справочник_ФизическиеЛица");
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		ДанныеXDTO.Вставить("ФизическоеЛицо", Инструкция);
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФизическоеЛицо", Инструкция);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ФизЛицо = Неопределено;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.КлючевыеСвойства.ФизическоеЛицо;
	ИначеЕсли ДанныеXDTO.Свойство("ФизическоеЛицо") Тогда
		ФизЛицо = ДанныеXDTO.ФизическоеЛицо;
	КонецЕсли;
	
	Если ФизЛицо <> Неопределено Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицо",
			Новый Структура("Значение, ИмяПКО", ФизЛицо,"Справочник_ФизическиеЛица"));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.СтраныМира";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Код",                "Код");
	ДобавитьПКС(СвойстваШапки, "КодАльфа2",          "КодАльфа2");
	ДобавитьПКС(СвойстваШапки, "КодАльфа3",          "КодАльфа3");
	ДобавитьПКС(СвойстваШапки, "Наименование",       "Наименование");
	ДобавитьПКС(СвойстваШапки, "НаименованиеПолное", "НаименованиеПолное");

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица
Процедура ДобавитьПКО_Справочник_ФизическиеЛица(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛица";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "МестоРождения", "МестоРождения");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "УточнениеНаименования");
	ДобавитьПКС(СвойстваШапки, "Наименование",  "ФИО");
	ДобавитьПКС(СвойстваШапки, "Пол",           "Пол", , "Перечисление_Пол");
	ДобавитьПКС(СвойстваШапки, "Родитель",      "Группа", , "Справочник_ФизическиеЛицаГруппа");
	ДобавитьПКС(СвойстваШапки, "СНИЛС",         "СтраховойНомерПФР");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО                       = "Справочник_ФизическиеЛицаГруппа";
	ПравилоКонвертации.ОбъектДанных                 = Метаданные.Справочники._ДемоФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата                = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника  = Истина;
	ПравилоКонвертации.ВариантИдентификации         = "ПоУникальномуИдентификатору";
	
	СвойстваШапки = ПравилоКонвертации.Свойства;
	ДобавитьПКС(СвойстваШапки, "Наименование", "Наименование");
	ДобавитьПКС(СвойстваШапки, "Родитель",     "Группа", , "Справочник_ФизическиеЛицаГруппа");

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти

#Область ПОД

#Область Отправка
#Область Документ_КорректировкаОстатковТоваров_Отправка
Процедура ДобавитьПОД_Документ_КорректировкаОстатковТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_КорректировкаОстатковТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоКорректировкаОстатковТоваровВМестахХранения;
	ПравилоОбработки.ПриОбработке            = "ПОД_Документ_КорректировкаОстатковТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваровИзСтруктуры_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеЗапасовИзСтруктуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_КорректировкаОстатковТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ТипЗнч(ДанныеИБ) = Тип("Структура") Тогда
			
		ИспользованиеПКО.Документ_ОприходованиеТоваровИзСтруктуры_Отправка = (ДанныеИБ.ВидДвижения = ВидДвиженияНакопления.Приход);
		ИспользованиеПКО.Документ_СписаниеЗапасовИзСтруктуры_Отправка      = (ДанныеИБ.ВидДвижения = ВидДвиженияНакопления.Расход);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	_ДемоОстаткиТоваровВМестахХранения.Организация КАК Организация,
	|	_ДемоОстаткиТоваровВМестахХранения.МестоХранения КАК Склад,
	|	_ДемоОстаткиТоваровВМестахХранения.ВидДвижения КАК ВидДвижения,
	|	_ДемоОстаткиТоваровВМестахХранения.Номенклатура КАК Номенклатура,
	|	_ДемоОстаткиТоваровВМестахХранения.Количество КАК Количество,
	|	100 КАК Цена,
	|	_ДемоОстаткиТоваровВМестахХранения.Количество * 100 КАК Сумма,
	|	""СобственныеТовары"" КАК ТипЗапасов
	|ИЗ
	|	РегистрНакопления._ДемоОстаткиТоваровВМестахХранения КАК _ДемоОстаткиТоваровВМестахХранения
	|ГДЕ
	|	_ДемоОстаткиТоваровВМестахХранения.Регистратор = &Регистратор
	|	И _ДемоОстаткиТоваровВМестахХранения.Активность");
	
	Запрос.УстановитьПараметр("Регистратор", ДанныеИБ.Ссылка);
	
	ДвиженияДокумента = Запрос.Выполнить().Выгрузить();
	
	ОбъектыДляВыгрузки = Новый ТаблицаЗначений;
	ОбъектыДляВыгрузки.Колонки.Добавить("Организация");
	ОбъектыДляВыгрузки.Колонки.Добавить("Склад");
	ОбъектыДляВыгрузки.Колонки.Добавить("ВидДвижения");
	ОбъектыДляВыгрузки.Колонки.Добавить("Товары");
	
	Для Каждого СтрокаДвиженияДокумента Из ДвиженияДокумента Цикл
		
		Отбор = Новый Структура("Организация, Склад, ВидДвижения");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДвиженияДокумента);
		
		СтрокиОбъекты = ОбъектыДляВыгрузки.НайтиСтроки(Отбор);
		
		СтрокаОбъекты = Неопределено;
		
		ТаблицаТовары = Новый ТаблицаЗначений;
		
		Если СтрокиОбъекты.Количество() = 0 Тогда
			СтрокаОбъекты = ОбъектыДляВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОбъекты, Отбор);
			
			ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка._ДемоНоменклатура"));
			ТаблицаТовары.Колонки.Добавить("Количество",   Новый ОписаниеТипов("Число"));
			ТаблицаТовары.Колонки.Добавить("Цена",         Новый ОписаниеТипов("Число"));
			ТаблицаТовары.Колонки.Добавить("Сумма",        Новый ОписаниеТипов("Число"));
			ТаблицаТовары.Колонки.Добавить("ТипЗапасов",   Новый ОписаниеТипов("Строка"));
			
			СтрокаОбъекты.Товары = ТаблицаТовары;
		Иначе
			ТаблицаТовары = СтрокаОбъекты.Товары;
		КонецЕсли;
		
		СтрокаТовары = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаДвиженияДокумента);
		
	КонецЦикла;
	
	ТекущееПОД = КомпонентыОбмена.ПравилаОбработкиДанных.Найти("Документ_КорректировкаОстатковТоваров_Отправка", "Имя");
	
	Для Каждого СтрокаОбъекты Из ОбъектыДляВыгрузки Цикл
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Номер",         ДанныеИБ.Номер);
		СтруктураДокумента.Вставить("Дата",          ДанныеИБ.Дата);
		СтруктураДокумента.Вставить("Организация",   СтрокаОбъекты.Организация);
		СтруктураДокумента.Вставить("Склад",         СтрокаОбъекты.Склад);
		СтруктураДокумента.Вставить("ВидДвижения",   СтрокаОбъекты.ВидДвижения);
		СтруктураДокумента.Вставить("Комментарий",   ДанныеИБ.Комментарий);
		СтруктураДокумента.Вставить("Ответственный", ДанныеИБ.Ответственный);
		СтруктураДокумента.Вставить("Товары",        СтрокаОбъекты.Товары);
		
		ОбменДаннымиXDTOСервер.ВыгрузкаОбъектаВыборки(КомпонентыОбмена, СтруктураДокумента, ТекущееПОД);
	КонецЦикла;
	
	ИспользованиеПКО.Очистить();
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоОприходованиеТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоПеремещениеТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоПоступлениеТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваров_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоРеализацияТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваров_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоСписаниеТоваров;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПокупателю_Отправка
Процедура ДобавитьПОД_Документ_СчетПокупателю_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетПокупателю_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы._ДемоСчетНаОплатуПокупателю;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПокупателю_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторБанков;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ДанныеИБ = Неопределено
		И ДанныеИБ.ЭтоГруппа Тогда	
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоБанковскиеСчета;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_БанковскиеСчета_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ДанныеИБ.Владелец)
		Или Не ЗначениеЗаполнено(ДанныеИБ.НомерСчета) Тогда
		ИспользованиеПКО.Справочник_БанковскиеСчета_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Отправка
Процедура ДобавитьПОД_Справочник_Договоры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Договоры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоДоговорыКонтрагентов;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоКонтрагенты;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа    = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоНоменклатура;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура       = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_НоменклатураГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоОрганизации;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ОтветственныеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ОтветственныеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений._ДемоОтветственныеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ОтветственныеЛица_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ОтветственныеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ОтветственныеЛица" добавлен в версии 1.3.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Справочник_ОтветственныеЛица_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоМестаХранения;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники._ДемоФизическиеЛица;
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных           = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
			
		Если Не ДанныеИБ.ЭтоГруппа Тогда
			
			МодульЗащитаПерсональныхДанных = ОбщегоНазначения.ОбщийМодуль("ЗащитаПерсональныхДанных");
			Если МодульЗащитаПерсональныхДанных.ЭтоОбъектСоСкрытымиПерсональнымиДанными(ДанныеИБ) Тогда
				
				ИспользованиеПКО.Удалить("Справочник_ФизическиеЛица");
				ИспользованиеПКО.Удалить("Справочник_ФизическиеЛицаГруппа");
				
				ШаблонПредупреждения = НСтр("ru = 'Субъект %1 не может быть выгружен,
					|т.к. его персональные данные скрыты.'");
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, ДанныеИБ.Ссылка);
				
				КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
				ОбменДаннымиXDTOСервер.ЗаписатьВПротоколВыполнения(КомпонентыОбмена, ТекстПредупреждения,, Ложь,,,);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользованиеПКО.Справочник_ФизическиеЛица = НЕ ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#Область Получение
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ОприходованиеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПеремещениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваров_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_ПоступлениеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваров_Получение
Процедура ДобавитьПОД_Документ_РеализацияТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_РеализацияТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Получение
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СписаниеТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СписаниеЗапасов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПокупателю_Получение
Процедура ДобавитьПОД_Документ_СчетПокупателю_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Документ_СчетПокупателю_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Документ.СчетПокупателю";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПокупателю_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Банки";
	ПравилоОбработки.ПриОбработке            = "ПОД_Справочник_Банки_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанкиГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_БанкиГруппа = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Получение
Процедура ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Договоры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Договоры");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа_Получение
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_КонтрагентыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ОтветственныеЛица_Получение
Процедура ДобавитьПОД_Справочник_ОтветственныеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ОтветственныеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ОтветственныеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ОтветственныеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки                         = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя                     = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат     = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти

#Область Алгоритмы

Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ)
	ТекВидКИ = Неопределено;
		
	ПрефиксПользовательскойКИ = "ПользовательскаяКИ";
			
	Если СтрНачинаетсяС(ВидКИСтрокой, ПрефиксПользовательскойКИ) Тогда
	
		ИмяТипаКИ = СтрЗаменить(ВидКИСтрокой, ПрефиксПользовательскойКИ, "");
	
		ТекВидКИ  = ВидПользовательскойКонтактнойИнформации(НаименованиеКИ,
			ГруппаВидовКИ,
			Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ]);
		
	Иначе
	
		СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации;
		ИмяТипаКИ = Неопределено;
		Если ГруппаВидовКИ = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("Справочник_ДемоКонтрагенты") Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailКонтрагента");
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес"
				Или ВидКИСтрокой = "ФактическийАдрес"
				Или ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоАдресКонтрагента");
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ИмяТипаКИ = "Телефон";
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ИмяТипаКИ = "Факс";
			КонецЕсли;
		ИначеЕсли ГруппаВидовКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("Справочник_ДемоОрганизации") Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailОрганизации");
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоПочтовыйАдресОрганизации");
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоФактическийАдресОрганизации");
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоЮридическийАдресОрганизации");
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоТелефонОрганизации");
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоФаксОрганизации");
			КонецЕсли;
		ИначеЕсли ГруппаВидовКИ = УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("Справочник_ДемоФизическиеЛица") Тогда
			Если ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ =  УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("_ДемоEmailФизическогоЛица");
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес"
				Или ВидКИСтрокой = "ФактическийАдрес"
				Или ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ИмяТипаКИ = "Адрес";
			ИначеЕсли ВидКИСтрокой = "Телефон"
				Или ВидКИСтрокой = "ТелефонДомашний" 
				Или ВидКИСтрокой = "ТелефонРабочий" Тогда
				ИмяТипаКИ = "Телефон";
			КонецЕсли;
		КонецЕсли;
		// Не нашлось среди предопределенных, загружаем как пользовательскую.
		Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
			ТекВидКИ  = ВидПользовательскойКонтактнойИнформации(НаименованиеКИ,
				ГруппаВидовКИ,
				Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ]);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Функция ВидПользовательскойКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ)
	ТекВидКИ = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В ИЕРАРХИИ(&ГруппаВидовКИ)
	|	И ВидыКонтактнойИнформации.Наименование = &Наименование
	|	И ВидыКонтактнойИнформации.Тип = &ТипКИ
	|	И ВидыКонтактнойИнформации.Используется = ИСТИНА
	|	И ВидыКонтактнойИнформации.ЭтоГруппа = ЛОЖЬ");
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Наименование",  НаименованиеКИ);
	Запрос.УстановитьПараметр("ТипКИ",         ТипКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекВидКИ = Выборка.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
		ТекВидКИ = НовыйВидКонтактнойИнформации(НаименованиеКИ, ГруппаВидовКИ, ТипКИ);
	КонецЕсли;
	
	Возврат ТекВидКИ;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат;
	КонецЕсли;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоНоменклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ИмяПКО = "Справочник_Банки";
		ИмяПКОГруппа = "Справочник_БанкиГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_Договоры";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоОрганизации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоМестаХранения") Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
		ИмяПКОГруппа = "Справочник_СкладыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа";
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ Из ДанныеИБДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ДобавитьЕдиницуИзмеренияВТаблицуТовары(Товары)
	Если Товары.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		Товары.Колонки.Добавить("ЕдиницаИзмерения");
	КонецЕсли;
	// Единица - штука
	Товары.ЗаполнитьЗначения(Новый Структура("Ссылка, Код", "", "796"), "ЕдиницаИзмерения");
КонецПроцедуры
Процедура ДобавитьТипЗапасовВТаблицуТовары(Товары)
	Если Товары.Колонки.Найти("ТипЗапасов") = Неопределено Тогда
		Товары.Колонки.Добавить("ТипЗапасов");
	КонецЕсли;
	Товары.ЗаполнитьЗначения("СобственныеТовары", "ТипЗапасов");
КонецПроцедуры
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если Не (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	МетаОбъект      = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаОбъект);
	
	ТипДанныхСтрокой = ИмяБазовогоТипа + "." + МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения  = Новый Массив;
	
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения; // ТаблицаЗначений
	
	Для Каждого СтрокаТЧ Из ДанныеXDTO.ДополнительныеРеквизиты Цикл
	
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		
		ДопРеквизитыСтрока = ДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство       = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта     = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		// Проверка на простой тип.
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			Или ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
			
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО, ДопРеквизитыСтрока.ТипЗначения);
			
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если Не (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно.
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			
		КонецЕсли;
		
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
		Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, "Справочник_ДополнительныеРеквизиты");
	
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, СтрокаДопСведения.Значение.ИмяПКО);
			
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				СтрокаДопСведения.Значение.Значение, 
				ПКО_ЗначениеСвойства, 
				"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект   = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;
		
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьКонтактнуюИнформацию(ДанныеXDTO, ПолученныеДанные, ГруппаВидовКИ)
	Если Не (ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация)) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
		ВидКИСтрокой   = СокрЛП(СтрокаXDTO.ВидКонтактнойИнформации.Значение);
		НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
		
		ТекВидКИ = ВидКонтактнойИнформацииИзСтроки(ВидКИСтрокой, НаименованиеКИ, ГруппаВидовКИ);
		
		Если Не ЗначениеЗаполнено(ТекВидКИ) Тогда
			Продолжить;
		КонецЕсли;
	
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
	КонецЦикла;
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ТипЗначенияСвойства)
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если СтрНайти(ТипЗначенияСвойства, "НоменклатураГруппа")>0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоНоменклатура");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоНоменклатура");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "КонтрагентГруппа")>0 Тогда
		ИмяПКО = "Справочник_КонтрагентыГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоКонтрагенты");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Контрагент")>0 Тогда
		ИмяПКО = "Справочник_Контрагенты";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоКонтрагенты");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
		ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "БанкГруппа")>0 Тогда
		ИмяПКО = "Справочник_БанкиГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Банк")>0 Тогда
		ИмяПКО = "Справочник_Банки";
		ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторБанков");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Валюта")>0 Тогда
		ИмяПКО = "Справочник_Валюты";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Договор")>0 Тогда
		ИмяПКО = "Справочник_Договоры";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоДоговорыКонтрагентов");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Организация")>0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоОрганизации");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи";
		ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "СкладГруппа")>0 Тогда
		Возврат;
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "Склад")>0 Тогда
		ИмяПКО = "Справочник_Склады_Получение";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоМестаХранения");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "СтранаМира")>0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
		ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоФизическиеЛица");
	ИначеЕсли СтрНайти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица";
		ТипЗначенияСвойства = Тип("СправочникСсылка._ДемоФизическиеЛица");
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьВалюту(ДанныеXDTO, ДанныеИБ, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ДанныеИБ.Валюта) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыКонвертации.ВалютаПоУмолчанию) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
		|ИЗ Справочник.Валюты ГДЕ Наименование = ""RUB"" И ПометкаУдаления = Ложь";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПараметрыКонвертации.ВалютаПоУмолчанию = Выборка.Ссылка;
		Иначе
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
			|ИЗ Справочник.Валюты ГДЕ ПометкаУдаления = ЛОЖЬ";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПараметрыКонвертации.ВалютаПоУмолчанию = Выборка.Ссылка;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("Валюта", ПараметрыКонвертации.ВалютаПоУмолчанию);
КонецПроцедуры
Процедура ЗаполнитьПартнераПоКонтрагенту(Объект)
	Контрагент = ?(ТипЗнч(Объект) = Тип("СправочникОбъект._ДемоДоговорыКонтрагентов"),
		Объект.Владелец,
		Объект.Контрагент);
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Контрагент) Тогда
		Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		НаименованиеПоУмолчанию = НСтр("ru = 'Основной'", ОбщегоНазначения.КодОсновногоЯзыка());
		ПартнерСсылка = Справочники._ДемоПартнеры.НайтиПоНаименованию(НаименованиеПоУмолчанию);
		Если Не ЗначениеЗаполнено(ПартнерСсылка) Тогда
			ПартнерОбъект = Справочники._ДемоПартнеры.СоздатьЭлемент();
			ПартнерОбъект.Наименование = НаименованиеПоУмолчанию;
			ПартнерОбъект.Записать();
			ПартнерСсылка = ПартнерОбъект.Ссылка;
		КонецЕсли;
		
		Объект.Партнер = ПартнерСсылка;
		
	КонецЕсли;
КонецПроцедуры
Функция НовыйВидКонтактнойИнформации(Наименование, Родитель, ТипКИ)
	ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
	ВидКИОбъект.Родитель     = Родитель;
	ВидКИОбъект.Наименование = Наименование;
	ВидКИОбъект.Тип          = ТипКИ;
	ВидКИОбъект.Используется = Истина;
	ВидКИОбъект.Записать();
	
	Возврат ВидКИОбъект.Ссылка;
КонецФункции
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты Из ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта); // СправочникСсылка.НаборыДополнительныхРеквизитовИСведений
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - СтрНайти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = ЛОЖЬ И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопРеквизиты.Свойство, 
			ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
			"ПолучитьСсылку").Ссылка;
		Если Не ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
	
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено 
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
				И НЕ ДопЗначенияИспользуются 
				И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					
					НачатьТранзакцию();
					Попытка
						Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(СвойствоСсылка));
						ЭлементБлокировки.УстановитьЗначение("Ссылка", СвойствоСсылка);
						Блокировка.Заблокировать();
					
						СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
						
						СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
						СвойствоОбъект.ОбменДанными.Загрузка = Истина;

						СвойствоОбъект.Записать();

						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ВызватьИсключение;
					КонецПопытки;
					
					Продолжить;
				Иначе
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗначенияСвойства = Неопределено) 
				ИЛИ НЕ ТипЗначенияСвойства.СодержитТип(СтрокаДопРеквизиты.ТипЗначения) Тогда
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(СтрокаДопРеквизиты.ТипЗначения);
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				Если ТипЗначенияСвойства <> Неопределено 
					И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СвойствоОбъект.ОбменДанными.Загрузка = Истина;
				СвойствоОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		
		ТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти]; // ТабличнаяЧасть
		СтрокаТЧ = ТЧ.Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора Из СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Договоры(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьПартнераПоКонтрагенту(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	
	Если Объект.ДополнительныеСвойства.Свойство("ОшибкаОтложенногоЗаполненияПТиУ") Тогда
		ВызватьИсключение НСтр("ru = 'Проверка ошибки обработчика отложенного заполнения.'");
	КонецЕсли;
	
	ЗаполнитьПартнераПоКонтрагенту(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьПартнераПоКонтрагенту(Объект);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ Из ДанныеИБ.КонтактнаяИнформация Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование, Предопределенный, ХранитьИсториюИзменений");
		Если СвойстваВидаКИ.ХранитьИсториюИзменений = Истина Тогда
			НайденныеСтроки = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", СтрокаКИ.Вид));
			Если НайденныеСтроки.Количество() > 1 Тогда
				АктуальнаяВерсия = Истина;
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если НайденнаяСтрока <> СтрокаКИ И НайденнаяСтрока.ДействуетС > СтрокаКИ.ДействуетС Тогда
						АктуальнаяВерсия = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не АктуальнаяВерсия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
		СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
		Если СвойстваВидаКИ.Предопределенный Тогда
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
	
		Иначе
	
			// Получение наименования значения перечисления.
			ИмяТипаКИ = ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаКИ.Тип);
	
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПолучитьСтавкуНДСДокумента(СтавкаНДССсылка)
	Если ЗначениеЗаполнено(СтавкаНДССсылка) Тогда
		СтавкаЧислом = СтавкаНДССсылка.Ставка;
		Если СтавкаЧислом = 18 Тогда
			Возврат "НДС18";
		ИначеЕсли СтавкаЧислом = 4 Тогда
			Возврат "НДС4";
		ИначеЕсли СтавкаЧислом = 2 Тогда
			Возврат "НДС2";
		ИначеЕсли СтавкаЧислом = 10 Тогда
			Возврат "НДС10";
		ИначеЕсли СтавкаЧислом = 0 Тогда
			Возврат "БезНДС";
		ИначеЕсли СтавкаЧислом = 3.85 Тогда
			Возврат "НДС4_104";
		ИначеЕсли СтавкаЧислом = 15.25 Тогда
			Возврат "НДС18_118";
		ИначеЕсли СтавкаЧислом = 1.96 Тогда
			Возврат "НДС2_102";
		ИначеЕсли СтавкаЧислом = 9.09 Тогда
			Возврат "НДС10_110";
		КонецЕсли;
	КонецЕсли;
	Возврат "НДС18";
КонецФункции

// Параметры:
//   Валюты - Массив из СправочникСсылка.Валюты - коллекция валют.
//
Процедура УстановкаНачальныхКурсовВалют(Валюты)
	Для Каждого ВалютаСсылка Из Валюты Цикл
		НачатьТранзакцию();
		Попытка
		    Блокировка = Новый БлокировкаДанных;
		    ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(ВалютаСсылка));
		    ЭлементБлокировки.УстановитьЗначение("Ссылка", ВалютаСсылка);
		    Блокировка.Заблокировать();
		    
			ВалютаОбъект = ВалютаСсылка.ПолучитьОбъект();
			ВалютаОбъект.Записать();

		    ЗафиксироватьТранзакцию();
		Исключение
		    ОтменитьТранзакцию();
		    ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ДобавитьПКТЧ(ПравилоКонвертации, ИмяТЧКонфигурации, ИмяТЧФормата)
    Если ПравилоКонвертации.СвойстваТабличныхЧастей.Колонки.Количество() = 0 Тогда
        ОбменДаннымиXDTOСервер.ИнициализироватьСвойстваТабличныхЧастей(ПравилоКонвертации);
    КонецЕсли;
    КонвертацияТабличнойЧасти                = ПравилоКонвертации.СвойстваТабличныхЧастей.Добавить();
    КонвертацияТабличнойЧасти.ТЧКонфигурации = ИмяТЧКонфигурации;
    КонвертацияТабличнойЧасти.ТЧФормата      = ИмяТЧФормата;
    КонвертацияТабличнойЧасти.Свойства       = ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации();
    Возврат КонвертацияТабличнойЧасти.Свойства;
КонецФункции

Процедура ДобавитьПКС(РодительПКС, СвойствоКонфигурации, СвойствоФормата = "", ИспользуетсяАлгоритмКонвертации = 0, 
                    ПравилоКонвертацииСвойства = "")
	НоваяСтрока                                 = РодительПКС.Добавить();
	НоваяСтрока.СвойствоКонфигурации            = СвойствоКонфигурации;
	НоваяСтрока.СвойствоФормата                 = СвойствоФормата;
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = ?(ИспользуетсяАлгоритмКонвертации = 0, Ложь, Истина);
	НоваяСтрока.ПравилоКонвертацииСвойства      = ПравилоКонвертацииСвойства;
КонецПроцедуры

#КонецОбласти

#КонецОбласти