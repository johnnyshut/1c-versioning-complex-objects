///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");
	СтруктураПоддерживаемыхВерсий.Вставить("DataTransfer", МассивВерсий);
	
КонецПроцедуры

Функция Получить(ПараметрыДоступа, ИзФизическогоХранилища = Ложь, ИдентификаторХранилища, Идентификатор) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	СвойстваФайла = Новый Файл(ИмяВременногоФайла);
	
	ОписаниеФайла = Неопределено;
	ЗапрашиваемыйДиапазон = Неопределено;
	
	СтруктураURIДоступа = СтруктураURI(ПараметрыДоступа.URL);
	Соединение = СоединениеDT(СтруктураURIДоступа, ПараметрыДоступа.UserName, ПараметрыДоступа.Password);
	
	Если ИзФизическогоХранилища Тогда
		
		АдресРесурсаШаблон = "/hs/dt/volume/%1/%2";
		
	Иначе
		
		АдресРесурсаШаблон = "/hs/dt/storage/%1/%2";
		
	КонецЕсли;
	
	АдресРесурса = СтруктураURIДоступа.ПутьНаСервере + СтрШаблон(АдресРесурсаШаблон, ИдентификаторХранилища, Строка(Идентификатор));
	
	РазмерБлокаПолученияДанных = РазмерБлокаПолученияДанных();
	
	ЗапросРесурса = Новый HTTPЗапрос(АдресРесурса);
	ЗапросРесурса.Заголовки.Вставить("IBSession", "start");
	
	ОтветНаЗапросРесурса = Соединение.Получить(ЗапросРесурса);
	
	Если ОтветНаЗапросРесурса.КодСостояния = 400 Тогда
		
		ЗапросРесурса.Заголовки.Удалить("IBSession");
		ОтветНаЗапросРесурса = Соединение.Получить(ЗапросРесурса);
		
	КонецЕсли;
	
	Если ОтветНаЗапросРесурса.КодСостояния <> 302 Тогда
		
		УдалитьВременныйФайл(ИмяВременногоФайла);
		ОшибкаПриПолученииДанных(ОтветНаЗапросРесурса);
		Возврат Неопределено;
		
	КонецЕсли;
		
	АдресS3 = ОтветНаЗапросРесурса.Заголовки.Получить("x-url-s3");
	
	Если ЗначениеЗаполнено(АдресS3) Тогда
		СтруктураURI = СтруктураURI(АдресS3);
		Соединение = СоединениеS3(СтруктураURI);
		Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
		ОтветНаЗапросДанных = Соединение.Получить(Запрос, ИмяВременногоФайла);
	
		Если ОтветНаЗапросДанных.КодСостояния = 200 Тогда
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Имя", СвойстваФайла.Имя);
			ОписаниеФайла.Вставить("ПолноеИмя", СвойстваФайла.ПолноеИмя);
			Возврат ОписаниеФайла;
		Иначе
			УдалитьВременныйФайл(ИмяВременногоФайла);
			ОшибкаПриПолученииДанных(ОтветНаЗапросДанных);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;		
			
	Location = ОтветНаЗапросРесурса.Заголовки.Получить("Location");
	SetCookie = ОтветНаЗапросРесурса.Заголовки.Получить("Set-Cookie");
			
	СтруктураURI = СтруктураURI(Location);
	Соединение = СоединениеDT(СтруктураURI, ПараметрыДоступа.UserName, ПараметрыДоступа.Password);
	ЗапросДанных = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
		
	Если РазмерБлокаПолученияДанных > 0 Тогда
		
		ЗапрашиваемыйДиапазон = Новый Структура("Начало, Конец", 0, РазмерБлокаПолученияДанных - 1);
		ЗапросДанных.Заголовки.Вставить("Range", СтрШаблон("bytes=%1-%2", Формат(ЗапрашиваемыйДиапазон.Начало, "ЧН=0; ЧГ=0"), Формат(ЗапрашиваемыйДиапазон.Конец, "ЧН=0; ЧГ=0")));
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(SetCookie) Тогда
		
		ЗапросДанных.Заголовки.Вставить("Cookie", SetCookie);
		
	КонецЕсли;
	
	ОтветНаЗапросДанных = Соединение.Получить(ЗапросДанных);
	
	Если ОтветНаЗапросДанных.КодСостояния <> 200 И ОтветНаЗапросДанных.КодСостояния <> 206 Тогда
		УдалитьВременныйФайл(ИмяВременногоФайла);
		ОшибкаПриПолученииДанных(ОтветНаЗапросДанных);
		Возврат Неопределено;
	КонецЕсли;
		
	ПотокДанных = ФайловыеПотоки.Открыть(ИмяВременногоФайла, РежимОткрытияФайла.СоздатьНовый, ДоступКФайлу.Запись);
	Поток = ОтветНаЗапросДанных.ПолучитьТелоКакПоток();
	
	Если ОтветНаЗапросДанных.КодСостояния = 200 Тогда
		
		Поток.КопироватьВ(ПотокДанных);
		
	Иначе // ОтветНаЗапросДанных.КодСостояния = 206
		
		ПолученныйДиапазон = ПолученныйДиапазон(ОтветНаЗапросДанных.Заголовки.Получить("Content-Range"));
		Поток.КопироватьВ(ПотокДанных);
		
		Пока ПолученныйДиапазон.Конец < ПолученныйДиапазон.Размер - 1 Цикл
			
			ЗапрашиваемыйДиапазон = Новый Структура("Начало, Конец", ПолученныйДиапазон.Конец + 1, Мин(ПолученныйДиапазон.Конец + РазмерБлокаПолученияДанных, ПолученныйДиапазон.Размер - 1));
			
			Если ЗапрашиваемыйДиапазон.Конец = ПолученныйДиапазон.Размер - 1 И ЗначениеЗаполнено(SetCookie) Тогда
				
				ЗапросДанных.Заголовки.Вставить("IBSession", "finish");
				
			КонецЕсли;
			
			ЗапросДанных.Заголовки.Вставить("Range", СтрШаблон("bytes=%1-%2", Формат(ЗапрашиваемыйДиапазон.Начало, "ЧН=0; ЧГ=0"), Формат(ЗапрашиваемыйДиапазон.Конец, "ЧН=0; ЧГ=0")));
			ОтветНаЗапросДанных = Соединение.Получить(ЗапросДанных);
			
			Если ОтветНаЗапросДанных.КодСостояния = 206 Тогда
				
				Поток = ОтветНаЗапросДанных.ПолучитьТелоКакПоток();
				
				ПолученныйДиапазон = ПолученныйДиапазон(ОтветНаЗапросДанных.Заголовки.Получить("Content-Range"));
				
				ПотокДанных.Перейти(ПолученныйДиапазон.Начало, ПозицияВПотоке.Начало);
				Поток.КопироватьВ(ПотокДанных);
				
			Иначе
				
				УдалитьВременныйФайл(ИмяВременногоФайла);
				ОшибкаПриПолученииДанных(ОтветНаЗапросДанных);
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Поток.Закрыть();
	ПотокДанных.Закрыть();
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя", СвойстваФайла.Имя);
	ОписаниеФайла.Вставить("ПолноеИмя", СвойстваФайла.ПолноеИмя);
		
	Возврат ОписаниеФайла;
	
КонецФункции

Функция Отправить(ПараметрыДоступа, ВФизическоеХранилище = Ложь, ИдентификаторХранилища, Данные, Знач ИмяФайла, ДополнительныеПараметры = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	СтруктураURIДоступа = СтруктураURI(ПараметрыДоступа.URL);
	Соединение = СоединениеDT(СтруктураURIДоступа, ПараметрыДоступа.UserName, ПараметрыДоступа.Password);
	
	Если ВФизическоеХранилище Тогда
		
		АдресРесурсаШаблон = "/hs/dt/volume/%1/%2";
		
	Иначе
		
		АдресРесурсаШаблон = "/hs/dt/storage/%1/%2";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) И ТипЗнч(Данные) = Тип("Файл") Тогда
		
		ИмяФайла = Данные.Имя;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		
		ФайлОбъект = Новый Файл(ПолучитьИмяВременногоФайла());
		ИмяФайла = ФайлОбъект.Имя;
		
	КонецЕсли;
	
	АдресРесурса = СтруктураURIДоступа.ПутьНаСервере + СтрШаблон(АдресРесурсаШаблон, ИдентификаторХранилища, ИмяФайла);
	
	РазмерБлокаОтправкиДанных = РазмерБлокаОтправкиДанных();
	
	ЗапросРесурса = Новый HTTPЗапрос(АдресРесурса);
	ЗапросРесурса.Заголовки.Вставить("IBSession", "start");
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДополнительныеПараметры);
		Тело = ЗаписьJSON.Закрыть();
		ЗапросРесурса.УстановитьТелоИзСтроки(Тело);
	КонецЕсли;
	
	ОтветНаЗапросРесурса = Соединение.ОтправитьДляОбработки(ЗапросРесурса);
	
	Если ОтветНаЗапросРесурса.КодСостояния = 400 Тогда
		
		ЗапросРесурса.Заголовки.Удалить("IBSession");
		ОтветНаЗапросРесурса = Соединение.ОтправитьДляОбработки(ЗапросРесурса);
		
	КонецЕсли;
	
	Если ОтветНаЗапросРесурса.КодСостояния <> 200 Тогда
		ОшибкаПриОтправкеДанных(ОтветНаЗапросРесурса);
		Возврат Неопределено;
	КонецЕсли;
	
	Location = ОтветНаЗапросРесурса.Заголовки.Получить("Location");
	SetCookie = ОтветНаЗапросРесурса.Заголовки.Получить("Set-Cookie");
	АдресS3 = ОтветНаЗапросРесурса.Заголовки.Получить("x-url-s3");
	
	Адрес = ?(ЗначениеЗаполнено(АдресS3), АдресS3, Location);
	
	СтруктураURI = СтруктураURI(Адрес);
	
	Если НРег(СтруктураURI.Хост) = НРег(СтруктураURIДоступа.Хост)
		И СтруктураURI.Порт = СтруктураURIДоступа.Порт
		И СтрНачинаетсяС(НРег(СтруктураURI.ПутьНаСервере), НРег(СтруктураURIДоступа.ПутьНаСервере)) Тогда
		Соединение = СоединениеDT(СтруктураURI, ПараметрыДоступа.UserName, ПараметрыДоступа.Password);
	Иначе
		Соединение = СоединениеS3(СтруктураURI);
	КонецЕсли;
	
	ЗапросДанных = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	Если ЗначениеЗаполнено(SetCookie) Тогда
		ЗапросДанных.Заголовки.Вставить("Cookie", SetCookie);
	КонецЕсли;
	
	Если РазмерБлокаОтправкиДанных > 0 
		И Не ЗначениеЗаполнено(АдресS3) 
		И ОтветНаЗапросРесурса.Заголовки.Получить("Accept-Ranges") = "bytes" Тогда
		
		Если ЭтоАдресВременногоХранилища(Данные) Тогда
			
			ПотокДанных = ПолучитьИзВременногоХранилища(Данные).ОткрытьПотокДляЧтения();
			
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			
			ПотокДанных = ФайловыеПотоки.Открыть(Данные, РежимОткрытияФайла.Открыть, ДоступКФайлу.Чтение);
			
		ИначеЕсли ТипЗнч(Данные) = Тип("Файл") Тогда
			
			ПотокДанных = ФайловыеПотоки.Открыть(Данные.ПолноеИмя, РежимОткрытияФайла.Открыть, ДоступКФайлу.Чтение);
			
		ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			
			ПотокДанных = Данные.ОткрытьПотокДляЧтения();
			
		КонецЕсли;
		
		ОтправляемыйДиапазон = Новый Структура("Начало, Конец", 0, Мин(РазмерБлокаОтправкиДанных - 1, ПотокДанных.Размер() - 1));
		
		Пока Истина Цикл
			
			Буфер = Новый БуферДвоичныхДанных(ОтправляемыйДиапазон.Конец - ОтправляемыйДиапазон.Начало + 1);
			ПотокДанных.Перейти(ОтправляемыйДиапазон.Начало, ПозицияВПотоке.Начало);
			Прочитано = ПотокДанных.Прочитать(Буфер, 0, Буфер.Размер);
			ЗапросДанных.УстановитьТелоИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер));
			
			ЗапросДанных.Заголовки.Вставить("Content-Range", СтрШаблон("bytes %1-%2/%3", Формат(ОтправляемыйДиапазон.Начало, "ЧН=0; ЧГ=0"), Формат(ОтправляемыйДиапазон.Начало + Прочитано - 1, "ЧН=0; ЧГ=0"), Формат(ПотокДанных.Размер(), "ЧН=0; ЧГ=0")));
			
			Если ОтправляемыйДиапазон.Конец = ПотокДанных.Размер() - 1 И ЗначениеЗаполнено(SetCookie) Тогда
				
				ЗапросДанных.Заголовки.Вставить("IBSession", "finish");
				
			КонецЕсли;
			
			ОтветНаЗапросДанных = Соединение.Записать(ЗапросДанных);
			
			Если ОтветНаЗапросДанных.КодСостояния = 201 Тогда
				
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ОтветНаЗапросДанных.ПолучитьТелоКакСтроку());
				ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
				
				Если ДанныеОтвета.Количество() = 1 И ДанныеОтвета.Свойство("id") Тогда
					
					Результат = ДанныеОтвета.id;
					
				Иначе
					
					Результат = ДанныеОтвета;
					
				КонецЕсли;
				
				ПотокДанных.Закрыть();
				Прервать;
				
			ИначеЕсли ОтветНаЗапросДанных.КодСостояния <> 202 Тогда
				
				ОшибкаПриОтправкеДанных(ОтветНаЗапросДанных);
				
				ПотокДанных.Закрыть();
				Прервать;
				
			КонецЕсли;
			
			ОтправляемыйДиапазон = Новый Структура("Начало, Конец", ОтправляемыйДиапазон.Конец + 1, Мин(ОтправляемыйДиапазон.Конец + РазмерБлокаОтправкиДанных, ПотокДанных.Размер() - 1));
			
		КонецЦикла;
		
	Иначе
		
		Если ЭтоАдресВременногоХранилища(Данные) Тогда
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные);
			РазмерФайла = ДвоичныеДанные.Размер();
			ЗапросДанных.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
			
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			
			Файл = Новый Файл(Данные);
			РазмерФайла = Файл.Размер();
			ЗапросДанных.УстановитьИмяФайлаТела(Данные);
			
		ИначеЕсли ТипЗнч(Данные) = Тип("Файл") Тогда
			
			РазмерФайла = Данные.Размер();
			ЗапросДанных.УстановитьИмяФайлаТела(Данные.ПолноеИмя);
			
		ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			
			РазмерФайла = Данные.Размер();
			ЗапросДанных.УстановитьТелоИзДвоичныхДанных(Данные);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(SetCookie) Тогда
			ЗапросДанных.Заголовки.Вставить("IBSession", "finish");
		КонецЕсли;
		
		ЗапросДанных.Заголовки.Вставить("Content-Length", Формат(РазмерФайла, "ЧГ=0"));
		ЗапросДанных.Заголовки.Вставить("Transfer-Encoding", Неопределено);
		
		ОтветНаЗапросДанных = Соединение.Записать(ЗапросДанных);
		
		Если ОтветНаЗапросДанных.КодСостояния = 201 Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ОтветНаЗапросДанных.ПолучитьТелоКакСтроку());
			ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON);
			
			Если ДанныеОтвета.Количество() = 1 И ДанныеОтвета.Свойство("id") Тогда
				
				Результат = ДанныеОтвета.id;
				
			Иначе
				
				Результат = ДанныеОтвета;
				
			КонецЕсли;
			
		ИначеЕсли ОтветНаЗапросДанных.КодСостояния = 200 Тогда
			
			Результат = ОтветНаЗапросРесурса.Заголовки.Получить("x-file-id");
			
		Иначе
			
			ОшибкаПриОтправкеДанных(ОтветНаЗапросДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолученныйДиапазон(ContentRange) Экспорт
	
	Диапазон = Неопределено;
	ContentRange = СокрЛП(ContentRange);
	
	Если НЕ ПустаяСтрока(ContentRange) И СтрНачинаетсяС(ContentRange, "bytes ") Тогда
		
		ContentRange = Прав(ContentRange, СтрДлина(ContentRange) - СтрДлина("bytes "));
		МассивПодстрок = СтрРазделить(ContentRange, "/");
		Range = МассивПодстрок[0];
		Size = МассивПодстрок[1];
		МассивПодстрок = СтрРазделить(Range, "-");
		
		Попытка
			
			Начало = Число(МассивПодстрок[0]);
			Конец = Число(МассивПодстрок[1]);
			Размер = Число(Size);
			
			Диапазон = Новый Структура("Начало, Конец, Размер", Начало, Конец, Размер);
			
		Исключение
			
			Диапазон = Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
		
	Возврат Диапазон;
	
КонецФункции

Функция ПериодДействияВременногоИдентификатора() Экспорт
	
	ПериодДействияВременногоИдентификатора = 600; // 10 минут
	
	ПередачаДанныхВстраивание.ПериодДействияВременногоИдентификатора(ПериодДействияВременногоИдентификатора);
	ПередачаДанныхПереопределяемый.ПериодДействияВременногоИдентификатора(ПериодДействияВременногоИдентификатора);
	
	Возврат ПериодДействияВременногоИдентификатора;
	
КонецФункции

Функция РазмерБлокаПолученияДанных() Экспорт
	
	РазмерБлокаПолученияДанных = 1024 * 1024;
	
	ПередачаДанныхВстраивание.РазмерБлокаПолученияДанных(РазмерБлокаПолученияДанных);
	ПередачаДанныхПереопределяемый.РазмерБлокаПолученияДанных(РазмерБлокаПолученияДанных);
	
	Возврат РазмерБлокаПолученияДанных;

КонецФункции

Функция РазмерБлокаОтправкиДанных() Экспорт
	
	РазмерБлокаОтправкиДанных = 1024 * 1024;
	
	ПередачаДанныхВстраивание.РазмерБлокаОтправкиДанных(РазмерБлокаОтправкиДанных);
	ПередачаДанныхПереопределяемый.РазмерБлокаОтправкиДанных(РазмерБлокаОтправкиДанных);
	
	Возврат РазмерБлокаОтправкиДанных;

КонецФункции

Процедура ОшибкаПриПолученииДанных(Ответ) Экспорт
	
	ПередачаДанныхВстраивание.ОшибкаПриПолученииДанных(Ответ);
	ПередачаДанныхПереопределяемый.ОшибкаПриПолученииДанных(Ответ);
	
КонецПроцедуры

Процедура ОшибкаПриОтправкеДанных(Ответ) Экспорт
	
	ПередачаДанныхВстраивание.ОшибкаПриОтправкеДанных(Ответ);
	ПередачаДанныхПереопределяемый.ОшибкаПриОтправкеДанных(Ответ);
	
КонецПроцедуры

Функция ИмяВременногоФайла(Расширение = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	ПередачаДанныхВстраивание.ПриПолученииИмениВременногоФайла(ИмяВременногоФайла, Расширение);
	ПередачаДанныхПереопределяемый.ПриПолученииИмениВременногоФайла(ИмяВременногоФайла, Расширение, ДополнительныеПараметры);
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Процедура ПриПродленииДействияВременногоИдентификатора(Идентификатор, МенеджерЗаписи) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(МенеджерЗаписи.Запрос.Получить());
	Запрос = ПрочитатьJSON(ЧтениеJSON, Истина);
	
	ПередачаДанныхВстраивание.ПриПродленииДействияВременногоИдентификатора(Идентификатор, МенеджерЗаписи.Дата, Запрос);
	ПередачаДанныхПереопределяемый.ПриПродленииДействияВременногоИдентификатора(Идентификатор, МенеджерЗаписи.Дата, Запрос);
	
КонецПроцедуры

Функция ПолучитьДвоичныеДанныеИзS3(Адрес, Начало = Неопределено, Конец = Неопределено) Экспорт
	
	СтруктураURI = СтруктураURI(Адрес);
	Соединение = СоединениеS3(СтруктураURI);
	
	Запрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	Если Начало <> Неопределено Тогда
		Запрос.Заголовки.Вставить("Range", СтрШаблон("bytes=%1-%2", Формат(Начало, "ЧН=0; ЧГ=0"), Формат(Конец, "ЧН=0; ЧГ=0")));
	КонецЕсли;
	
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния <> 200 И Ответ.КодСостояния <> 206 Тогда
		ВызватьИсключение СтрШаблон("%1: %2 %3", Ответ.КодСостояния, Символы.ПС, Лев(Ответ.ПолучитьТелоКакСтроку(), 128));
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакДвоичныеДанные(); 
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// Схема.
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	
	Если Позиция > 0 Тогда
		
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
		
	КонецЕсли;

	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	
	Если Позиция > 0 Тогда
		
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
		
	КонецЕсли;
		
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	
	Если Позиция > 0 Тогда
		
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
		
	КонецЕсли;
	
	// Логин и пароль.
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	
	Если Позиция > 0 Тогда
		
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
		
	КонецЕсли;
	
	// Хост и порт.
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	
	Если Позиция > 0 Тогда
		
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		ИначеЕсли Порт = "80" И Схема = "http" Тогда
			Порт = "";
		ИначеЕсли Порт = "443" И Схема = "https" Тогда
			Порт = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
		
	Если ПустаяСтрока(СтрокаПроверки) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Цифры = "0123456789";
	
	Возврат СтрРазделить(СтрокаПроверки, Цифры, Ложь).Количество() = 0;
	
КонецФункции

Функция Соединение(СтруктураURI, Пользователь, Пароль, Таймаут)
	
	ЗащищенноеСоединение = ?(СтруктураURI.Схема = "https", ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС), Неопределено);
	Порт = ?(ЗначениеЗаполнено(СтруктураURI.Порт), Число(СтруктураURI.Порт), ?(ЗащищенноеСоединение = Неопределено, 80, 443));
	
	Возврат Новый HTTPСоединение(СтруктураURI.Хост, Порт, Пользователь, Пароль,, Таймаут, ЗащищенноеСоединение);
	
КонецФункции

Функция СоединениеS3(СтруктураURI)
	
	Возврат Соединение(СтруктураURI, Неопределено, Неопределено, 7200);
	
КонецФункции

Функция СоединениеDT(СтруктураURI, Пользователь, Пароль)
	
	Возврат Соединение(СтруктураURI, Пользователь, Пароль, 180);
	
КонецФункции

Процедура УдалитьВременныйФайл(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ПередачаДанных'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти