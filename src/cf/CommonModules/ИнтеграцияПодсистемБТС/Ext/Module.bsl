///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет события, на которые могут подписаться другие библиотеки.
//
// Возвращаемое значение:
//   Структура - ключами свойств структуры являются имена событий, на которые могут быть подписаны библиотеки. Описание:
//   * ПередВыгрузкойДанных - Булево
//   * ПередЗагрузкойДанных - Булево
//   * ПослеВыгрузкиДанных - Булево
//   * ПослеЗагрузкиДанных - Булево
//   * ПослеЗагрузкиПользователейИнформационнойБазы - Булево
//   * ПослеЗагрузкиПользователяИнформационнойБазы - Булево
//   * ПриДобавленииОбработчиковОбновленияБТС - Булево
//   * ПриЗагрузкеПользователяИнформационнойБазы - Булево
//   * ПриЗаполненииТаблицыПараметровИБ - Булево
//   * ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки - Булево
//   * ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке - Булево
//   * ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке - Булево
//   * ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке - Булево
//   * ПриОпределенииВерсииИнтерфейсаКорреспондента - Булево
//   * ПриОпределенииИсключенийНеразделенныхДанных - Булево
//   * ПриОпределенииИспользованияРегламентныхЗаданий - Булево
//   * ПриОпределенииОбработчиковКаналовСообщений - Булево
//   * ПриОпределенииОбработчиковОшибок - Булево
//   * ПриОпределенииОбработчиковПоставляемыхДанных - Булево
//   * ПриОпределенииПсевдонимаПользователя - Булево
//   * ПриОпределенииПсевдонимовОбработчиков - Булево
//   * ПриПолученииСпискаШаблонов - Булево
//   * ПриРегистрацииОбработчиковВыгрузкиДанных - Булево
//   * ПриРегистрацииОбработчиковЗагрузкиДанных - Булево
//   * ПриУстановкеЗначенийПараметровИБ - Булево
//   * ПриФормированииСпискаУслуг - Булево
//   * РегистрацияИнтерфейсовОтправляемыхСообщений - Булево
//   * РегистрацияИнтерфейсовПринимаемыхСообщений - Булево
//
Функция СобытияБТС() Экспорт

	События = Новый Структура;

	// БазоваяФункциональность
	События.Вставить("ПриДобавленииОбработчиковОбновленияБТС", Ложь);

	// ВыгрузкаЗагрузкаДанных
	События.Вставить("ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке", Ложь);
	События.Вставить("ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке", Ложь);
	События.Вставить("ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке", Ложь);
	События.Вставить("ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки", Ложь);
	События.Вставить("ПриРегистрацииОбработчиковВыгрузкиДанных", Ложь);
	События.Вставить("ПриРегистрацииОбработчиковЗагрузкиДанных", Ложь);
	События.Вставить("ПередВыгрузкойДанных", Ложь);
	События.Вставить("ПослеВыгрузкиДанных", Ложь);
	События.Вставить("ПередЗагрузкойДанных", Ложь);
	События.Вставить("ПослеЗагрузкиДанных", Ложь);
	События.Вставить("ПриЗагрузкеПользователяИнформационнойБазы", Ложь);
	События.Вставить("ПослеЗагрузкиПользователяИнформационнойБазы", Ложь);
	События.Вставить("ПослеЗагрузкиПользователейИнформационнойБазы", Ложь);

	// ТехнологияСервиса_БазоваяФункциональность
	События.Вставить("ПриЗаполненииТаблицыПараметровИБ", Ложь);
	События.Вставить("ПриОпределенииПсевдонимаПользователя", Ложь);
	События.Вставить("ПриОпределенииИсключенийНеразделенныхДанных", Ложь);
	События.Вставить("ПриУстановкеЗначенийПараметровИБ", Ложь);

	// ТехнологияСервиса_ОбменСообщениями
	События.Вставить("ПриОпределенииОбработчиковКаналовСообщений", Ложь);
	События.Вставить("РегистрацияИнтерфейсовПринимаемыхСообщений", Ложь);
	События.Вставить("РегистрацияИнтерфейсовОтправляемыхСообщений", Ложь);
	События.Вставить("ПриОпределенииВерсииИнтерфейсаКорреспондента", Ложь);

	// ТехнологияСервиса_ОчередьЗаданий
	События.Вставить("ПриПолученииСпискаШаблонов", Ложь);
	События.Вставить("ПриОпределенииПсевдонимовОбработчиков", Ложь);
	События.Вставить("ПриОпределенииОбработчиковОшибок", Ложь);
	События.Вставить("ПриОпределенииИспользованияРегламентныхЗаданий", Ложь);

	// ТехнологияСервиса_ПоставляемыеДанные
	События.Вставить("ПриОпределенииОбработчиковПоставляемыхДанных", Ложь);

	// ТехнологияСервиса_УправлениеТарифами
	События.Вставить("ПриФормированииСпискаУслуг", Ложь);

	Возврат События;

КонецФункции

#Область ОбработчикиСобытийБСП
// Обработка программных событий, возникающих в подсистемах БСП.
// Только для вызовов из библиотеки БСП в БТС.

// Определяет события, на которые подписана эта библиотека.
//
// Параметры:
//  Подписки - Структура - ключами свойств структуры являются имена событий, на которые
//           подписана эта библиотека.
//
Процедура ПриОпределенииПодписокНаСобытияБСП(Подписки) Экспорт

// БазоваяФункциональность
	Подписки.ПриУстановкеПараметровСеанса = Истина;
	Подписки.ПриДобавленииИсключенийПоискаСсылок = Истина;
	Подписки.ПриОтправкеДанныхГлавному = Истина;
	Подписки.ПриОтправкеДанныхПодчиненному = Истина;
	Подписки.ПриПолученииДанныхОтГлавного = Истина;
	Подписки.ПриПолученииДанныхОтПодчиненного = Истина;
	Подписки.ПриВключенииРазделенияПоОбластямДанных = Истина;
	Подписки.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов = Истина;
	Подписки.ПриДобавленииПараметровРаботыКлиентаПриЗапуске = Истина;
	Подписки.ПриДобавленииПараметровРаботыКлиента = Истина;
	Подписки.ПриДобавленииПодсистем = Истина;

	// ГрупповоеИзменениеОбъектов
	Подписки.ПриОпределенииОбъектовСРедактируемымиРеквизитами = Истина;

	// ДополнительныеОтчетыИОбработки
	Подписки.ПриУстановкеРежимаПодключенияДополнительногоОтчетаИлиОбработкиВОбластиДанных = Истина;

	// ЗагрузкаДанныхИзФайла
	Подписки.ПриОпределенииСправочниковДляЗагрузкиДанных = Истина;

	// ИнтерфейсOData
	Подписки.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузкиOData = Истина;

	// Пользователи
	Подписки.ПриЗавершенииОбработкиПользователяИБ = Истина;

	// ПрофилиБезопасности
	Подписки.ПриПроверкеВозможностиНастройкиПрофилейБезопасности = Истина;
	Подписки.ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов = Истина;
	Подписки.ПриЗапросеСозданияПрофиляБезопасности = Истина;
	Подписки.ПриЗапросеУдаленияПрофиляБезопасности = Истина;
	Подписки.ПриПодключенииВнешнегоМодуля = Истина;

	// РегламентныеЗадания
	Подписки.ПриОпределенииНастроекРегламентныхЗаданий = Истина;

КонецПроцедуры

#Область БазоваяФункциональность

// См. ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем
Процедура ПриДобавленииПодсистем(МодулиПодсистем) Экспорт

	МодулиПодсистем.Добавить("ОбновлениеИнформационнойБазыБТС");

КонецПроцедуры

// Параметры:
//   Параметры - см. СтандартныеПодсистемыСервер.УстановкаПараметровСеанса.ИменаПараметровСеанса.
//
Процедура ПриУстановкеПараметровСеанса(Параметры) Экспорт

	ТехнологияСервиса.ВыполнитьДействияПриУстановкеПараметровСеанса(Параметры);

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииИсключенийПоискаСсылок
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт

	ДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);
	РасширенияВМоделиСервиса.ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок);

КонецПроцедуры

// См. ПриОтправкеДанныхГлавному в синтаксис-помощнике
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента,
		Получатель) Экспорт

	ДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель);

КонецПроцедуры

// См. ПриОтправкеДанныхПодчиненному в синтаксис-помощнике
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента,
		СозданиеНачальногоОбраза, Получатель) Экспорт

	ДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);

КонецПроцедуры

// См. ПриПолученииДанныхОтГлавного в синтаксис-помощнике
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента,
		ОтправкаНазад, Отправитель) Экспорт

	ДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);

КонецПроцедуры

// См. ПриПолученииДанныхОтПодчиненного в синтаксис-помощнике
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента,
		ОтправкаНазад, Отправитель) Экспорт

	ДополнительныеОтчетыИОбработкиВАвтономномРежиме.ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель);

КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.ПриВключенииРазделенияПоОбластямДанных
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт

	ОчередьЗаданийСлужебный.ПриВключенииРазделенияПоОбластямДанных();
	ОчередьЗаданийСлужебныйРазделениеДанных.ПриВключенииРазделенияПоОбластямДанных();
	РаботаВМоделиСервиса.ПриВключенииРазделенияПоОбластямДанных();
	ТехнологияСервиса.ПриВключенииРазделенияПоОбластямДанных();
	РаботаВМоделиСервисаБТС.ПриВключенииРазделенияПоОбластямДанных();

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;

	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	УдаленноеАдминистрированиеБТССлужебный.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	ЭлектроннаяПодписьВМоделиСервиса.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ПередачаДанных") Тогда
		МодульПередачаДанныхСлужебный = ОбщегоНазначения.ОбщийМодуль("ПередачаДанныхСлужебный");
		МодульПередачаДанныхСлужебный.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	КонецЕсли;

	ИнтерфейсыСообщенийВМоделиСервиса.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	ОбменСообщениямиВнутренний.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);
	РезервноеКопированиеОбластейДанных.ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(СтруктураПоддерживаемыхВерсий);

	МассивВерсий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("1.0.0.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ЗагрузкаДанныхВСуществующуюОбласть", МассивВерсий);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт

	РаботаВМоделиСервиса.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);

КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт

	ЭлектроннаяПодписьВМоделиСервиса.ПриДобавленииПараметровРаботыКлиента(Параметры);
	РаботаВМоделиСервиса.ПриДобавленииПараметровРаботыКлиента(Параметры);
	РезервноеКопированиеОбластейДанных.ПриДобавленииПараметровРаботыКлиента(Параметры);

КонецПроцедуры

#КонецОбласти

#Область ГрупповоеИзменениеОбъектов

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт

	ОбменСообщениямиВнутренний.ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты);

КонецПроцедуры

#КонецОбласти

#Область ДополнительныеОтчетыИОбработки

// Устарела.
Процедура ПриУстановкеРежимаПодключенияДополнительногоОтчетаИлиОбработкиВОбластиДанных(ПоставляемаяОбработка,
		РежимРаботы) Экспорт

	Возврат;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

// См. ЗагрузкаДанныхИзФайлаПереопределяемый.ПриОпределенииСправочниковДляЗагрузкиДанных
Процедура ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники) Экспорт

	ОчередьЗаданийСлужебный.ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники);
	РаботаВМоделиСервиса.ПриОпределенииСправочниковДляЗагрузкиДанных(ЗагружаемыеСправочники);

КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсOData

// См. ИнтеграцияПодсистемБСП.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузкиOData
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузкиOData(Типы) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда

		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебныйВМоделиСервиса");
		МодульРаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);

		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);

	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ЦентрКонтроляКачества") Тогда
		МодульИнцидентыЦККСервер = ОбщегоНазначения.ОбщийМодуль("ИнцидентыЦККСервер");
		МодульИнцидентыЦККСервер.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.УправлениеТарифами") Тогда
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		МодульТарификация.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ПроверкаИКорректировкаДанных") Тогда
		МодульПроверкаИКорректировкаДанных = ОбщегоНазначения.ОбщийМодуль("ПроверкаИКорректировкаДанных");
		МодульПроверкаИКорректировкаДанных.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.МиграцияПриложений") Тогда
		МодульМиграцияПриложений = ОбщегоНазначения.ОбщийМодуль("МиграцияПриложений");
		МодульМиграцияПриложений.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданийВнешнийИнтерфейс") Тогда
		МодульОчередьЗаданийВнешнийИнтерфейс = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийВнешнийИнтерфейс");
		МодульОчередьЗаданийВнешнийИнтерфейс.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнтеграцияОбъектовОбластейДанных") Тогда
		МодульИнтеграцияОбъектовОбластейДанных = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОбъектовОбластейДанных");
		МодульИнтеграцияОбъектовОбластейДанных.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОбменСообщениями") Тогда
		МодульОбменСообщениямиВнутренний = ОбщегоНазначения.ОбщийМодуль("ОбменСообщениямиВнутренний");
		МодульОбменСообщениямиВнутренний.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ОчередьЗаданий") Тогда
		МодульОчередьЗаданийСлужебныйРазделениеДанных = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданийСлужебныйРазделениеДанных");
		МодульОчередьЗаданийСлужебныйРазделениеДанных.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РезервноеКопированиеОбластейДанных") Тогда
		МодульРезервноеКопированиеОбластейДанных = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеОбластейДанных");
		МодульРезервноеКопированиеОбластейДанных.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		МодульВыгрузкаЗагрузкаДанныхПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ВыгрузкаЗагрузкаДанныхПереопределяемый");
		МодульВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ПоставляемыеДанные") Тогда
		МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
		МодульПоставляемыеДанные.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РасширенияВМоделиСервиса") Тогда
		МодульРасширенияВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РасширенияВМоделиСервиса");
		МодульРасширенияВМоделиСервиса.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ФайлыОбластейДанных") Тогда
		МодульФайлыОбластейДанных = ОбщегоНазначения.ОбщийМодуль("ФайлыОбластейДанных");
		МодульФайлыОбластейДанных.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Пользователи

// См. ПользователиСлужебныйВМоделиСервиса.ПриЗавершенииОбработкиПользователяИБ
Процедура ПриЗавершенииОбработкиПользователяИБ(Пользователь) Экспорт

	РаботаВМоделиСервисаПереопределяемый.УстановитьПраваПоУмолчанию(Пользователь);

КонецПроцедуры

#КонецОбласти

#Область ПрофилиБезопасности

// См. РаботаВБезопасномРежимеПереопределяемый.ПриПроверкеВозможностиНастройкиПрофилейБезопасности
Процедура ПриПроверкеВозможностиНастройкиПрофилейБезопасности(Отказ) Экспорт

	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриПроверкеВозможностиНастройкиПрофилейБезопасности(Отказ);

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов
Процедура ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(Знач ПрограммныйМодуль,
		Знач Владелец, Знач РежимЗамещения, Знач ДобавляемыеРазрешения,
		Знач УдаляемыеРазрешения, СтандартнаяОбработка, Результат) Экспорт

	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗапросеРазрешенийНаИспользованиеВнешнихРесурсов(ПрограммныйМодуль, Владелец, РежимЗамещения, ДобавляемыеРазрешения, УдаляемыеРазрешения, СтандартнаяОбработка, Результат);

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗапросеСозданияПрофиляБезопасности
Процедура ПриЗапросеСозданияПрофиляБезопасности(Знач ПрограммныйМодуль,
		СтандартнаяОбработка, Результат) Экспорт

	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗапросеСозданияПрофиляБезопасности(ПрограммныйМодуль, СтандартнаяОбработка, Результат);

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗапросеУдаленияПрофиляБезопасности
Процедура ПриЗапросеУдаленияПрофиляБезопасности(Знач ПрограммныйМодуль,
		СтандартнаяОбработка, Результат) Экспорт

	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗапросеУдаленияПрофиляБезопасности(ПрограммныйМодуль, СтандартнаяОбработка, Результат);

КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриПодключенииВнешнегоМодуля
Процедура ПриПодключенииВнешнегоМодуля(Знач ВнешнийМодуль,
		БезопасныйРежим) Экспорт

	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриПодключенииВнешнегоМодуля(ВнешнийМодуль, БезопасныйРежим);

КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.МиграцияПриложений") Тогда
		МодульМиграцияПриложений = ОбщегоНазначения.ОбщийМодуль("МиграцияПриложений");
		МодульМиграцияПриложений.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.УправлениеТарифами") Тогда
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		МодульТарификация.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ЦентрКонтроляКачества") Тогда
		МодульИнцидентыЦККСервер = ОбщегоНазначения.ОбщийМодуль("ИнцидентыЦККСервер");
		МодульИнцидентыЦККСервер.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БазоваяФункциональность

// См. ОбновлениеИнформационнойБазыБТС.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияБТС(Обработчики) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриДобавленииОбработчиковОбновленияБТС Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриДобавленииОбработчиковОбновленияБТС(Обработчики);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузкаДанных

// Параметры:
//  Типы - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке.Типы
//
Процедура ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке(Типы) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке(Типы);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриЗаполненииТиповТребующихАннотациюСсылокПриВыгрузке(Типы);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Типы - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.Типы
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Типы - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке.Типы
//
Процедура ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриЗаполненииТиповОбщихДанныхНеТребующихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Типы - Массив из ОбъектМетаданных - исключаемые типы.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	РаботаВМоделиСервиса.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	ОбменСообщениямиВнутренний.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	ОчередьЗаданийСлужебныйРазделениеДанных.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	РезервноеКопированиеОбластейДанных.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ТаблицаОбработчиков - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковВыгрузкиДанных.ТаблицаОбработчиков
//
Процедура ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриРегистрацииОбработчиковВыгрузкиДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриРегистрацииОбработчиковВыгрузкиДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриРегистрацииОбработчиковВыгрузкиДанных(ТаблицаОбработчиков);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ТаблицаОбработчиков - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриРегистрацииОбработчиковЗагрузкиДанных.ТаблицаОбработчиков
//
Процедура ПриРегистрацииОбработчиковЗагрузкиДанных(ТаблицаОбработчиков) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриРегистрацииОбработчиковЗагрузкиДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриРегистрацииОбработчиковЗагрузкиДанных(ТаблицаОбработчиков);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриРегистрацииОбработчиковЗагрузкиДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриРегистрацииОбработчиковЗагрузкиДанных(ТаблицаОбработчиков);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Контейнер - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПередВыгрузкойДанных.Контейнер
//
Процедура ПередВыгрузкойДанных(Контейнер) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПередВыгрузкойДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПередВыгрузкойДанных(Контейнер);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПередВыгрузкойДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПередВыгрузкойДанных(Контейнер);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Контейнер - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеВыгрузкиДанных.Контейнер
//
Процедура ПослеВыгрузкиДанных(Контейнер) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПослеВыгрузкиДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		// @skip-warning МетодНеОбнаружен - особенность реализации подписок БСП.
		МодульИнтеграцияПодсистемБСП.ПослеВыгрузкиДанных(Контейнер);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПослеВыгрузкиДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПослеВыгрузкиДанных(Контейнер);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Контейнер - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПередЗагрузкойДанных.Контейнер
//
Процедура ПередЗагрузкойДанных(Контейнер) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПередВыгрузкойДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПередЗагрузкойДанных(Контейнер);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПередЗагрузкойДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПередЗагрузкойДанных(Контейнер);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Контейнер - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.Контейнер
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт

	РаботаВМоделиСервиса.ПослеЗагрузкиДанных(Контейнер);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПослеЗагрузкиДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПослеЗагрузкиДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Контейнер - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗагрузкеПользователяИнформационнойБазы.Контейнер
//  Сериализация - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗагрузкеПользователяИнформационнойБазы.Сериализация
//  ПользовательИБ - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗагрузкеПользователяИнформационнойБазы.ПользовательИБ
//  Отказ - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗагрузкеПользователяИнформационнойБазы.Отказ
//
Процедура ПриЗагрузкеПользователяИнформационнойБазы(Контейнер, Сериализация,
		ПользовательИБ, Отказ) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриЗагрузкеПользователяИнформационнойБазы Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗагрузкеПользователяИнформационнойБазы(Контейнер, Сериализация, ПользовательИБ, Отказ);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриЗагрузкеПользователяИнформационнойБазы Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриЗагрузкеПользователяИнформационнойБазы(Контейнер, Сериализация, ПользовательИБ, Отказ);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Контейнер - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиПользователяИнформационнойБазы.Контейнер
//  Сериализация - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиПользователяИнформационнойБазы.Сериализация
//  ПользовательИБ - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиПользователяИнформационнойБазы.ПользовательИБ
//
Процедура ПослеЗагрузкиПользователяИнформационнойБазы(Контейнер, Сериализация,
		ПользовательИБ) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПослеЗагрузкиПользователяИнформационнойБазы Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПослеЗагрузкиПользователяИнформационнойБазы(Контейнер, Сериализация, ПользовательИБ);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПослеЗагрузкиПользователяИнформационнойБазы Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПослеЗагрузкиПользователяИнформационнойБазы(Контейнер, Сериализация, ПользовательИБ);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  Контейнер - см. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиПользователейИнформационнойБазы.Контейнер
//
Процедура ПослеЗагрузкиПользователейИнформационнойБазы(Контейнер) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПослеЗагрузкиПользователейИнформационнойБазы Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПослеЗагрузкиПользователейИнформационнойБазы(Контейнер);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПослеЗагрузкиПользователейИнформационнойБазы Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПослеЗагрузкиПользователейИнформационнойБазы(Контейнер);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_БазоваяФункциональностьВМоделиСервиса

// Параметры:
//  ТаблицаПараметров - см. РаботаВМоделиСервиса.ПараметрыИБ
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт

	ДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	РаботаВМоделиСервисаБТС.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	РасширенияВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	ЭлектроннаяПодписьВМоделиСервиса.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	РезервноеКопированиеОбластейДанных.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриЗаполненииТаблицыПараметровИБ Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров)
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриЗаполненииТаблицыПараметровИБ Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриЗаполненииТаблицыПараметровИБ(ТаблицаПараметров);
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ИдентификаторПользователя - см. РаботаВМоделиСервиса.ПсевдонимПользователяИнформационнойБазы.ИдентификаторПользователя
//  Псевдоним - Строка - назначаемый псевдоним (возвращаемый параметр).
//
Процедура ПриОпределенииПсевдонимаПользователя(ИдентификаторПользователя, Псевдоним) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриОпределенииПсевдонимаПользователя Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПсевдонимаПользователя(ИдентификаторПользователя, Псевдоним)
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриОпределенииПсевдонимаПользователя Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриОпределенииПсевдонимаПользователя(ИдентификаторПользователя, Псевдоним);
	КонецЕсли;

КонецПроцедуры

// См. РаботаВМоделиСервиса.ПриОпределенииИсключенийНеразделенныхДанных
// 
// Параметры:
//  Исключения - Массив из ОбъектМетаданных - исключения.
//
Процедура ПриОпределенииИсключенийНеразделенныхДанных(Исключения) Экспорт

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ЦентрКонтроляКачества") Тогда
		МодульИнцидентыЦККСервер = ОбщегоНазначения.ОбщийМодуль("ИнцидентыЦККСервер");
		МодульИнцидентыЦККСервер.ПриОпределенииИсключенийНеразделенныхДанных(Исключения);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриОпределенииИсключенийНеразделенныхДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		// @skip-warning МетодНеОбнаружен - особенность реализации подписок БСП.
		МодульИнтеграцияПодсистемБСП.ПриОпределенииИсключенийНеразделенныхДанных(Исключения);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриОпределенииИсключенийНеразделенныхДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриОпределенииИсключенийНеразделенныхДанных(Исключения);
	КонецЕсли;

КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.ПриУстановкеЗначенийПараметровИБ
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт

	ДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	РасширенияВМоделиСервиса.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	УдаленноеАдминистрированиеСлужебный.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	ЭлектроннаяПодписьВМоделиСервиса.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриУстановкеЗначенийПараметровИБ Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		// @skip-warning МетодНеОбнаружен - особенность реализации подписок БСП.
		МодульИнтеграцияПодсистемБСП.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриУстановкеЗначенийПараметровИБ Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриУстановкеЗначенийПараметровИБ(ЗначенияПараметров);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_ОбменСообщениями

// @skip-warning - ПустойМетод - особенность реализации.
// 
//  Параметры:
//    Обработчики - см. ОбменСообщениямиПереопределяемый.ПолучитьОбработчикиКаналовСообщений.Обработчики
//
Процедура ПриОпределенииОбработчиковКаналовСообщений(Обработчики) Экспорт
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиПринимаемыхСообщений
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт

	ДополнительныеОтчетыИОбработкиВМоделиСервиса.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	РасширенияВМоделиСервиса.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	УдаленноеАдминистрированиеСлужебный.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.УправлениеТарифами") Тогда
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		МодульТарификация.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	РезервноеКопированиеОбластейДанных.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().РегистрацияИнтерфейсовПринимаемыхСообщений Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().РегистрацияИнтерфейсовПринимаемыхСообщений Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков);
	КонецЕсли;

КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиОтправляемыхСообщений
Процедура РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков) Экспорт

	ДополнительныеОтчетыИОбработкиВМоделиСервиса.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	РасширенияВМоделиСервиса.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	УдаленноеАдминистрированиеСлужебный.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.УправлениеТарифами") Тогда
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		МодульТарификация.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;
	РезервноеКопированиеОбластейДанных.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().РегистрацияИнтерфейсовОтправляемыхСообщений Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().РегистрацияИнтерфейсовОтправляемыхСообщений Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков);
	КонецЕсли;

КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ПриОпределенииВерсииИнтерфейсаКорреспондента
Процедура ПриОпределенииВерсииИнтерфейсаКорреспондента(Знач ИнтерфейсСообщения,
		Знач ПараметрыПодключения, Знач ПредставлениеПолучателя, Результат) Экспорт

	ДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриОпределенииВерсииИнтерфейсаКорреспондента(ИнтерфейсСообщения, ПараметрыПодключения, ПредставлениеПолучателя, Результат);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриОпределенииВерсииИнтерфейсаКорреспондента Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		// @skip-warning МетодНеОбнаружен - особенность реализации подписок БСП.
		МодульИнтеграцияПодсистемБСП.ПриОпределенииВерсииИнтерфейсаКорреспондента(
			ИнтерфейсСообщения, ПараметрыПодключения, ПредставлениеПолучателя, Результат);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриОпределенииВерсииИнтерфейсаКорреспондента Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриОпределенииВерсииИнтерфейсаКорреспондента(
			ИнтерфейсСообщения,	ПараметрыПодключения, ПредставлениеПолучателя, Результат);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_ОчередьЗаданий

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриПолученииСпискаШаблонов Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриПолученииСпискаШаблонов Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;

КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт

	ДополнительныеОтчетыИОбработкиВМоделиСервиса.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	РасширенияВМоделиСервиса.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	РаботаВМоделиСервисаБТС.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.МиграцияПриложений") Тогда
		МодульМиграцияПриложений = ОбщегоНазначения.ОбщийМодуль("МиграцияПриложений");
		МодульМиграцияПриложений.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ПоставляемыеДанныеАбонентов") Тогда
		МодульПоставляемыеДанныеАбонентов = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанныеАбонентов");
		МодульПоставляемыеДанныеАбонентов.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнтеграцияОбъектовОбластейДанных") Тогда
		МодульИнтеграцияОбъектовОбластейДанных = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияОбъектовОбластейДанных");
		МодульИнтеграцияОбъектовОбластейДанных.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.АсинхронноеПолучениеДанных") Тогда
		МодульАсинхронноеПолучениеДанных = ОбщегоНазначения.ОбщийМодуль("АсинхронноеПолучениеДанных");
		МодульАсинхронноеПолучениеДанных.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.АвтоматизацияПроцессов.РаспределенноеВыполнениеКоманд") Тогда
		МодульРаспределенноеВыполнениеКоманд = ОбщегоНазначения.ОбщийМодуль("РаспределенноеВыполнениеКоманд");
		МодульРаспределенноеВыполнениеКоманд.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;

	ПоставляемыеДанные.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	РаботаВМоделиСервиса.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	РезервноеКопированиеОбластейДанных.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриОпределенииПсевдонимовОбработчиков Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриОпределенииПсевдонимовОбработчиков Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;

КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииОбработчиковОшибок
Процедура ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок) Экспорт

	РаботаВМоделиСервисаБТС.ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок);
	РезервноеКопированиеОбластейДанных.ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриОпределенииОбработчиковОшибок Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииПсевдонимовОбработчиков(ОбработчикиОшибок);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриОпределенииОбработчиковОшибок Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок);
	КонецЕсли;

КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииИспользованияРегламентныхЗаданий
Процедура ПриОпределенииИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт

	РаботаВМоделиСервиса.ПриОпределенииИспользованияРегламентныхЗаданий(ТаблицаИспользования);

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриОпределенииИспользованияРегламентныхЗаданий Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииИспользованияРегламентныхЗаданий(ТаблицаИспользования);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриОпределенииИспользованияРегламентныхЗаданий Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриОпределенииИспользованияРегламентныхЗаданий(ТаблицаИспользования);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаВМоделиСервиса_ПоставляемыеДанные

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриОпределенииОбработчиковПоставляемыхДанных Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриОпределенииОбработчиковПоставляемыхДанных Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		МодульИнтеграцияПодсистемБСП.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		МодульИнформационныйЦентрСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСлужебный");
		МодульИнформационныйЦентрСлужебный.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	КонецЕсли;

	РасширенияВМоделиСервиса.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);
	РаботаВМоделиСервиса.ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики);

КонецПроцедуры

#КонецОбласти

#Область ТехнологияСервиса_УправлениеТарифами

Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБСП().ПриФормированииСпискаУслуг Тогда
		МодульИнтеграцияПодсистемБСП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБСП");
		// @skip-warning МетодНеОбнаружен - особенность реализации подписок БСП.
		МодульИнтеграцияПодсистемБСП.ПриФормированииСпискаУслуг(ПоставщикиУслуг);
	КонецЕсли;

	Если ИнтеграцияПодсистемБТСПовтИсп.ПодпискиБИП().ПриФормированииСпискаУслуг Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ПриФормированииСпискаУслуг(ПоставщикиУслуг);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПереопределениеВызовов

#Область БазоваяФункциональность

// См. ОбщегоНазначения.ИспользованиеРазделителяСеанса
Функция ИспользованиеРазделителяСеанса() Экспорт
	
	Возврат ОбщегоНазначения.РазделениеВключено() 
			И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
	
КонецФункции

// См. ОбщегоНазначения.ЗаблокироватьИБ()
Процедура ЗаблокироватьИБ(Знач ПроверитьОтсутствиеДругихСеансов = Истина) Экспорт

	УстановитьМонопольныйРежим(Истина);

КонецПроцедуры

// См. ОбщегоНазначения.РазблокироватьИБ()
Процедура РазблокироватьИБ() Экспорт

	УстановитьМонопольныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#Область БазоваяФункциональностьВМоделиСервиса

// См. РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных()
Процедура ЗаблокироватьТекущуюОбластьДанных(Знач ПроверитьОтсутствиеДругихСеансов = Ложь,
		Знач РазделяемаяБлокировка = Ложь) Экспорт

	УстановитьМонопольныйРежим(Истина);

КонецПроцедуры

// См. РаботаВМоделиСервиса.РазблокироватьТекущуюОбластьДанных()
Процедура РазблокироватьТекущуюОбластьДанных() Экспорт

	УстановитьМонопольныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
