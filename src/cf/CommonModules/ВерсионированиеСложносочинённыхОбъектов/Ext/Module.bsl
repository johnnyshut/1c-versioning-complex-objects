///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ОАО Глория Джинс
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
/////////////////////////////////////////////////////////////////////////////////////////////////////// 

#Область ПрограммныйИнтерфейс

// Записывает версию сложносочинённого объекта в информационную базу.
//  https://jira.gloria-jeans.ru/browse/COEF1C-483
//  Описание: Запись версии сложносочинённого объекта. 
//
// Параметры:
//  ЭтотОбъект 	- УправляемаяФорма - форма записываемого объекта ИБ;
//  РежимЗаписи - РежимЗаписиДокумента.
//
Процедура ЗаписатьВерсиюОбъекта(Знач ЭтотОбъект, Знач ТекущийОбъект, РежимЗаписи = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВерсионированиеСложносочинённыхОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Объект", ТекущийОбъект);
	СтруктураДанных.Вставить("Ссылка", ТекущийОбъект.Ссылка);
	ЗначенияРеквизитовФормыВСтруктуру(ЭтотОбъект, СтруктураДанных);	
			
	ПриСозданииВерсииОбъекта(СтруктураДанных, РежимЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗначенияРеквизитовФормыВСтруктуру(ЭтотОбъект, СтруктураДанных, ГруппаФормы = Неопределено)
	
	Если ГруппаФормы = Неопределено Тогда 
		ГруппаФормы = ЭтотОбъект;		
	КонецЕсли;	
	
	Для Каждого Элемент Из ГруппаФормы.ПодчиненныеЭлементы Цикл 
		Если Тип(Элемент) = Тип("ГруппаФормы") Тогда 
			ЗначенияРеквизитовФормыВСтруктуру(ЭтотОбъект, СтруктураДанных, Элемент);
			
		ИначеЕсли Тип(Элемент) = Тип("ТаблицаФормы") Тогда 	
			ТаблицаФормы = ЭтотОбъект.РеквизитФормыВЗначение(Элемент.ПутьКДанным);
			СтруктураДанных.Вставить(Элемент.ПутьКДанным, ТаблицаФормы);
			
		ИначеЕсли Тип(Элемент) = Тип("ПолеФормы") Тогда  
			НаименованиеКлюча 		= СтрЗаменить(СтрШаблон("%1", Элемент.ПутьКДанным), ".", "_");
			НаименованиеЗначения 	= СтрШаблон("ЭтотОбъект.%1", Элемент.ПутьКДанным);
			ТекстОператора = СтрШаблон("СтруктураДанных.Вставить(""%1"", %2)", НаименованиеКлюча, НаименованиеЗначения);	
			Выполнить(ТекстОператора);
			
		КонецЕсли;		
	КонецЦикла;	

КонецПроцедуры	

// Записывает версию объекта в информационную базу.
//
// Параметры:
//	Объект - для создания версии.
//
Процедура ПриСозданииВерсииОбъекта(СтруктураДанных, РежимЗаписи) 
	
	Перем НомерПоследнейВерсии;
	
	Если НЕ ОбъектВерсионируется(СтруктураДанных.Объект, НомерПоследнейВерсии) Тогда
		Возврат;
	КонецЕсли;
		
	СведенияОВерсииОбъекта = Новый Структура;
	СведенияОВерсииОбъекта.Вставить("НомерВерсии", Число(НомерПоследнейВерсии) + 1);
	СведенияОВерсииОбъекта.Вставить("Комментарий", "");
	
	СоздатьВерсиюОбъекта(СтруктураДанных, СведенияОВерсииОбъекта);
	
КонецПроцедуры

// Создает и записывает версию объекта в информационную базу.
//
Процедура СоздатьВерсиюОбъекта(СтруктураДанных, СведенияОВерсииОбъекта, ЗаписьОбычнойВерсии = Истина)
	
	ПроверитьНаличиеПравНаИзменениеОбъекта(СтруктураДанных.Объект.Метаданные());
	
	УстановитьПривилегированныйРежим(Истина);
		
	// Запись данных предыдущей версии.
	Если Не СтруктураДанных.Объект.ЭтоНовый() И (СведенияОВерсииОбъекта.НомерВерсии > 1 Или ВерсияОтличаетсяОтРанееЗаписанной(СтруктураДанных)) Тогда
		// Если версионирование включено после создания объекта, создаем предыдущую запись о версии.
		Если СведенияОВерсииОбъекта.НомерВерсии = 1
			И СведенияОВерсииОбъекта.Комментарий <> НСтр("ru = 'Версия создана по уже имеющемуся объекту'") Тогда
				Если ОбъектВерсионируется(СтруктураДанных.Ссылка, Ложь) Тогда
					ПараметрыВерсии = Новый Структура;
					ПараметрыВерсии.Вставить("НомерВерсии", 1);
					ПараметрыВерсии.Вставить("Комментарий", НСтр("ru = 'Версия создана по уже имеющемуся объекту'"));
					СоздатьВерсиюОбъекта(СтруктураДанных, ПараметрыВерсии);
					СведенияОВерсииОбъекта.НомерВерсии = 2;
				КонецЕсли;
		КонецЕсли;
		
		//// Сохраняем предыдущую версию объекта.
		//МенеджерЗаписи = РегистрыСведений.ВерсииСложносочинённыхОбъектов.СоздатьМенеджерЗаписи();
		//МенеджерЗаписи.Объект = СтруктураДанных.Ссылка;
		//МенеджерЗаписи.НомерВерсии = НомерПредыдущейВерсии(СтруктураДанных.Ссылка, СведенияОВерсииОбъекта.НомерВерсии);
		//МенеджерЗаписи.Прочитать();
		//Если МенеджерЗаписи.Выбран() И Не МенеджерЗаписи.ЕстьДанныеВерсии Тогда
		//	МенеджерЗаписи.ВерсияОбъекта = Новый ХранилищеЗначения(ДанныеДляХранения(СтруктураДанных), Новый СжатиеДанных(9)); 
		//	МенеджерЗаписи.Записать();
		//КонецЕсли;
	КонецЕсли;
	
	СсылкаНаОбъект = СтруктураДанных.Ссылка;;
	Если СсылкаНаОбъект.Пустая() Тогда
		СсылкаНаОбъект = СтруктураДанных.Объект.ПолучитьСсылкуНового();
		Если СсылкаНаОбъект.Пустая() Тогда
			СсылкаНаОбъект = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СтруктураДанных.Ссылка).ПолучитьСсылку();
			СтруктураДанных.Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		КонецЕсли;
	КонецЕсли;
	
	//// Запись текущей версии без данных.
	МенеджерЗаписи = РегистрыСведений.ВерсииСложносочинённыхОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = СсылкаНаОбъект;
	МенеджерЗаписи.НомерВерсии = СведенияОВерсииОбъекта.НомерВерсии;
	МенеджерЗаписи.ДатаВерсии = ТекущаяДатаСеанса();
	
	АвторВерсии = Неопределено;
	Если Не СтруктураДанных.Объект.ДополнительныеСвойства.Свойство("АвторВерсии", АвторВерсии) Тогда
		АвторВерсии = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	МенеджерЗаписи.АвторВерсии = АвторВерсии;
	
	МенеджерЗаписи.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.ИзмененоПользователем;
	СведенияОВерсииОбъекта.Свойство("Комментарий", МенеджерЗаписи.Комментарий);
	
	Если Не СтруктураДанных.Объект.ЭтоНовый() Тогда
		МенеджерЗаписи.КонтрольнаяСумма = КонтрольнаяСумма(ДанныеДляХранения(СтруктураДанных));
	КонецЕсли;
	
	МенеджерЗаписи.ВерсияОбъекта = Новый ХранилищеЗначения(ДанныеДляХранения(СтруктураДанных), Новый СжатиеДанных(9)); 
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Проверяет настройки версионирования по переданному объекту и
// и возвращает вариант версионирования. Если по объекту не настроено
// версионирование, то он версионируется в соответствии с правилами
// версионирования "по умолчанию".
//
Функция ОбъектВерсионируется(Знач Источник, НомерПоследнейВерсии)
	
	НомерПоследнейВерсии = НомерПоследнейВерсии(Источник.Ссылка);
	
	// Проверяем, что подсистема версионирования включена.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВерсионированиеОбъектов") Тогда
		Возврат Ложь;
	Иначе 	
		Возврат Истина;	
	КонецЕсли;
				
КонецФункции

// Возвращает номер последней записанной версии объекта.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект информационной базы.
//
// Возвращаемое значение:
//  Число - номер версии объекта.
//
Функция НомерПоследнейВерсии(Ссылка, ИзмененныеПользователем = Ложь) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВерсииСложносочинённыхОбъектов.НомерВерсии), 0) КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииСложносочинённыхОбъектов КАК ВерсииСложносочинённыхОбъектов
	|ГДЕ
	|	ВерсииСложносочинённыхОбъектов.Объект = &Ссылка
	|	И &ДополнительноеУсловие";
	
	Если ИзмененныеПользователем Тогда
		ДополнительноеУсловие = "ВерсииСложносочинённыхОбъектов.ТипВерсииОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыВерсийОбъекта.ИзмененоПользователем)";
	Иначе
		ДополнительноеУсловие = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловие", ДополнительноеУсловие);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИзмененныеПользователем", ИзмененныеПользователем);
	
	Если ТранзакцияАктивна() Тогда
		БлокировкаДанных = Новый БлокировкаДанных();
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ВерсииСложносочинённыхОбъектов");
		ЭлементБлокировки.УстановитьЗначение("Объект", Ссылка);
		БлокировкаДанных.Заблокировать();
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерВерсии;
	
КонецФункции

// Номер предыдущей версии, измененной пользователем.
Функция НомерПредыдущейВерсии(Ссылка, ТекущийНомерВерсии)
	
	Если Ссылка.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВерсииСложносочинённыхОбъектов.НомерВерсии), -1) КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииСложносочинённыхОбъектов КАК ВерсииСложносочинённыхОбъектов
	|ГДЕ
	|	ВерсииСложносочинённыхОбъектов.Объект = &Ссылка
	|	И ВерсииСложносочинённыхОбъектов.ТипВерсииОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыВерсийОбъекта.ИзмененоПользователем)
	|	И ВерсииСложносочинённыхОбъектов.НомерВерсии < &ТекущийНомерВерсии";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТекущийНомерВерсии", ТекущийНомерВерсии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерВерсии;
	
КонецФункции

Функция ВерсияОтличаетсяОтРанееЗаписанной(СтруктураДанных)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииСложносочинённыхОбъектов.КонтрольнаяСумма
	|ИЗ
	|	РегистрСведений.ВерсииСложносочинённыхОбъектов КАК ВерсииСложносочинённыхОбъектов
	|ГДЕ
	|	ВерсииСложносочинённыхОбъектов.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииСложносочинённыхОбъектов.НомерВерсии УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Объект", СтруктураДанных.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.КонтрольнаяСумма) Тогда
		Возврат Выборка.КонтрольнаяСумма <> КонтрольнаяСумма(ДанныеДляХранения(СтруктураДанных));
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ДанныеДляХранения(Знач СтруктураДанных)
	
	СсылкаНаОбъект = СтруктураДанных;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(СтруктураДанных) Тогда
		СтруктураДанных = СтруктураДанных.ПолучитьОбъект();
	Иначе
		СсылкаНаОбъект = СтруктураДанных.Ссылка;
	КонецЕсли;
	
	ДанныеОбъекта = СериализоватьОбъект(СтруктураДанных);
	
	ТабличныеДокументы = ТабличныеДокументыОбъекта(СсылкаНаОбъект);
	
	ДополнительныеРеквизиты = КоллекцияДополнительныхРеквизитов();
	СкрываемыеРеквизиты = КоллекцияСкрываемыхРеквизитов();
	
	ВерсионированиеСложносочинённыхОбъектовПереопределяемый.ПриПодготовкеДанныхОбъекта(СтруктураДанных, ДополнительныеРеквизиты);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствамиСлужебный");
		МодульУправлениеСвойствамиСлужебный.ПриПодготовкеДанныхОбъекта(СтруктураДанных.Объект, ДополнительныеРеквизиты);
		СкрываемыеРеквизиты.Добавить("ДополнительныеРеквизиты.*");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформациейСлужебный");
		МодульУправлениеКонтактнойИнформациейСлужебный.ПриПодготовкеДанныхОбъекта(СтруктураДанных.Объект, ДополнительныеРеквизиты);
		СкрываемыеРеквизиты.Добавить("КонтактнаяИнформация.*");
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект);
	Настройки = НастройкиПодсистемы();
	Попытка
		МенеджерОбъекта.ПриОпределенииНастроекВерсионированияОбъектов(Настройки);
	Исключение
		Настройки = НастройкиПодсистемы();
	КонецПопытки;
	
	СлужебныеРеквизитыОбъекта = Новый Массив;
	Если Настройки.ПриПолученииСлужебныхРеквизитов Тогда
		МенеджерОбъекта.ПриПолученииСлужебныхРеквизитов(СлужебныеРеквизитыОбъекта);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СкрываемыеРеквизиты, СлужебныеРеквизитыОбъекта);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СкрываемыеРеквизиты, СлужебныеРеквизитыОбъектов());
	
	Результат = Новый Структура;
	
	Если ТабличныеДокументы <> Неопределено И ТабличныеДокументы.Количество() > 0 Тогда
		Результат.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	КонецЕсли;
	
	Если ДополнительныеРеквизиты.Количество() > 0 Тогда
		Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	КонецЕсли;
	
	Если СкрываемыеРеквизиты.Количество() > 0 Тогда
		Результат.Вставить("СкрываемыеРеквизиты", СкрываемыеРеквизиты);
	КонецЕсли;
	
	Если Результат.Количество() > 0 Тогда
		Результат.Вставить("Объект", ДанныеОбъекта);
	Иначе
		Результат = ДанныеОбъекта;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сериализованный объект в виде двоичных данных.
//
// Параметры:
//  Объект - Любой - сериализуемый объект.
//
// Возвращаемое значение:
//  ДвоичныеДанные - сериализованный объект.
Функция СериализоватьОбъект(Знач СтруктураДанных) Экспорт
	
	ЗаписьXML = Новый ЗаписьFastInfoset;
	ЗаписьXML.УстановитьДвоичныеДанные();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Копируем структуру данных, чтобы удалить в ней лишние реквизиты
	СтруктураДляЗаписи = ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(СтруктураДанных));
	СтруктураДляЗаписи.Удалить("Объект");
	СтруктураДляЗаписи.Удалить("Ссылка");	
	
	ЗаписатьXML(ЗаписьXML, ЗначениеВСтрокуВнутр(СтруктураДляЗаписи), НазначениеТипаXML.Явное);	
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Контрольная сумма по алгоритму MD5.
Функция КонтрольнаяСумма(Данные) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ХешированиеДанных.Добавить(Данные.Объект);
		Если Данные.Свойство("ДополнительныеРеквизиты") Тогда
			ХешированиеДанных.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(Данные.ДополнительныеРеквизиты));
		КонецЕсли;
	Иначе
		ХешированиеДанных.Добавить(Данные);
	КонецЕсли;
	
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
КонецФункции

Процедура ПроверитьНаличиеПравНаИзменениеОбъекта(ОбъектМетаданных)
	
	Если Не ПривилегированныйРежим() И Не ПравоДоступа("Изменение", ОбъектМетаданных)Тогда
		ТекстСообщения = НСтр("ru = 'Недостаточно прав на изменение ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ОбъектМетаданных.Представление());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Функция СлужебныеРеквизитыОбъектов()
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Ref");
	Реквизиты.Добавить("IsFolder");
	Реквизиты.Добавить("PredefinedDataName");
	
	Возврат Реквизиты;
	
КонецФункции

Функция НастройкиПодсистемы()
	
	Результат = Новый Структура;
	Результат.Вставить("ПриПолученииСлужебныхРеквизитов", Ложь);
	
	Возврат Результат;	
	
КонецФункции

Функция КоллекцияДополнительныхРеквизитов()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор");
	Результат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Значение");
	
	Возврат Результат;
	
КонецФункции

Функция КоллекцияСкрываемыхРеквизитов()
	
	Возврат Новый Массив;
	
КонецФункции

Функция ТабличныеДокументыОбъекта(Ссылка)
	
	Результат = Новый Структура;
	ВерсионированиеСложносочинённыхОбъектовПереопределяемый.ПриПолученииТабличныхДокументовОбъекта(Ссылка, Результат);
	Возврат Результат;
	
КонецФункции


// Возвращает табличный документ, заполненный данными объекта.
// 
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка.
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма объекта.
//
Функция ОтчетПоВерсииОбъекта(СсылкаНаОбъект, Знач ВерсияОбъекта = Неопределено, ПользовательскийНомерВерсии = Неопределено) Экспорт
	
	НомерВерсии = Неопределено;
	СериализованныйОбъект = Неопределено;
	Если ТипЗнч(ВерсияОбъекта) = Тип("Число") Тогда
		НомерВерсии = ВерсияОбъекта;
	ИначеЕсли ТипЗнч(ВерсияОбъекта) = Тип("Строка") Тогда
		СериализованныйОбъект = ВерсияОбъекта;
	КонецЕсли;
	
	Если НомерВерсии = Неопределено Тогда
		Если СериализованныйОбъект = Неопределено Тогда
			СериализованныйОбъект = СериализоватьОбъект(СсылкаНаОбъект.ПолучитьОбъект());
		КонецЕсли;
		ОписаниеОбъекта = РазборПредставленияОбъектаXML(СериализованныйОбъект, СсылкаНаОбъект);
		ОписаниеОбъекта.Вставить("ИмяОбъекта",     Строка(СсылкаНаОбъект));
		ОписаниеОбъекта.Вставить("АвторИзменения", "");
		ОписаниеОбъекта.Вставить("ДатаИзменения",  ТекущаяДатаСеанса());
		ОписаниеОбъекта.Вставить("Комментарий", "");
		НомерВерсии = 0;
		
		ВерсионированиеСложносочинённыхОбъектовПереопределяемый.ПослеРазбораВерсииОбъекта(СсылкаНаОбъект, ОписаниеОбъекта);
	Иначе
		ОписаниеОбъекта = РазборВерсии(СсылкаНаОбъект, НомерВерсии);
	КонецЕсли;
	
	Если ПользовательскийНомерВерсии = Неопределено Тогда
		ПользовательскийНомерВерсии = НомерВерсииВИерархии(СсылкаНаОбъект, НомерВерсии);
	КонецЕсли;
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ %1 / (%2) / %3'"), ПользовательскийНомерВерсии,
		Строка(ОписаниеОбъекта.ДатаИзменения), СокрЛП(Строка(ОписаниеОбъекта.АвторИзменения)));
		
	ОписаниеОбъекта.Вставить("Описание", Описание);
	ОписаниеОбъекта.Вставить("НомерВерсии", НомерВерсии);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьОтчетПоВерсииОбъекта(ТабличныйДокумент, ОписаниеОбъекта, СсылкаНаОбъект);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Процедура считывает данные XML из файла и заполняет структуры данных.
//
// Возвращаемое значение:
// Структура, содержащая два соответствия: ТабличныеЧасти, Реквизиты.
// Структура хранения данных:
// Соответствие ТабличныеЧасти, которое содержит в себе значения табличных частей
// формат: 
//          СоответствиеИмя1 -> ТаблицаЗначений1
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM1.
//
//          СоответствиеИмя2 -> ТаблицаЗначений2
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM2.
//
//
//          СоответствиеИмяN -> ТаблицаЗначенийN
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM3.
//
// Соответствие ЗначенияРеквизитов
//          ИмяРеквизита1 -> Значение1
//          ИмяРеквизита2 -> Значение2
//          ...
//          ИмяРеквизитаN -> ЗначениеN.
//
Функция РазборПредставленияОбъектаXML(ДанныеВерсии, Ссылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТабличныеДокументы");
	Результат.Вставить("ДополнительныеРеквизиты");
	Результат.Вставить("СкрываемыеРеквизиты", Новый Массив);
	
	ДвоичныеДанные = ДанныеВерсии;
	Если ТипЗнч(ДанныеВерсии) = Тип("Структура") Тогда
		ДвоичныеДанные = ДанныеВерсии.Объект;
		ДанныеВерсии.Свойство("ТабличныеДокументы", Результат.ТабличныеДокументы);
		ДанныеВерсии.Свойство("ДополнительныеРеквизиты", Результат.ДополнительныеРеквизиты);
		ДанныеВерсии.Свойство("СкрываемыеРеквизиты", Результат.СкрываемыеРеквизиты);
	КонецЕсли;
	
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	ЗначенияРеквизитов.Колонки.Добавить("НаименованиеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ТипРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("Тип");
	
	ТабличныеЧасти = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеFastInfoSet;
	ЧтениеXML.УстановитьДвоичныеДанные(ДвоичныеДанные);
	
	// Уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части.
	УровеньЧтения = 0;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ТипЗначенияПоляТЧ = "";
	
	Пока ЧтениеXML.Прочитать() Цикл 
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда	
			УровеньЧтения = УровеньЧтения + 1;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если УровеньЧтения = 1 Тогда				
				СтруктураРеквизитов = ЗначениеИзСтрокиВнутр(ЧтениеXML.Значение);				
			КонецЕсли;	
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;	
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Реквизит Из СтруктураРеквизитов Цикл 	
		НовоеЗР = ЗначенияРеквизитов.Добавить();
		НовоеЗР.НаименованиеРеквизита 	= Реквизит.Ключ;
		НовоеЗР.ЗначениеРеквизита		= Реквизит.Значение;
		НовоеЗР.Тип						= ТипЗнч(Реквизит.Значение);
		
		ИмяТабличнойЧасти = Реквизит.Ключ;
		Если МетаданныеТабличнойЧасти(МетаданныеОбъекта, ИмяТабличнойЧасти) <> Неопределено
			Или ТипЗнч(Реквизит.Значение) = Тип("ТаблицаЗначений") Тогда
			ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Реквизит.Значение.Скопировать());	
			
		КонецЕсли;				
	КонецЦикла;	
		
	// Из списка реквизитов исключаем табличные части.
	Для Каждого Элемент Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Удалить(ЗначенияРеквизитов.Найти(Элемент.Ключ));
	КонецЦикла;
	
	// Заполнение колонок таблицы в случае, когда в объекте табличная часть пустая, и имена колонок не были прочитаны.
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		ИмяТаблицы = ТабличнаяЧасть.Ключ;
		Таблица = ТабличнаяЧасть.Значение;
		Если Таблица.Колонки.Количество() = 0 Тогда
			МетаданныеТаблицы = МетаданныеТабличнойЧасти(МетаданныеОбъекта, ИмяТаблицы);
			Если МетаданныеТаблицы <> Неопределено Тогда
				Для Каждого ОписаниеКолонки Из РеквизитыТабличнойЧасти(МетаданныеТаблицы) Цикл
					Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
						Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
					КонецЕсли;
				КонецЦикла;
				Если Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
					Для Каждого ОписаниеКолонки Из МетаданныеОбъекта.ПризнакиУчетаСубконто Цикл
						Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
							Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("Реквизиты", ЗначенияРеквизитов);
	Результат.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Если Результат.СкрываемыеРеквизиты <> Неопределено Тогда
		Для Каждого ИмяРеквизита Из Результат.СкрываемыеРеквизиты Цикл
			Если СтрЗаканчиваетсяНа(ИмяРеквизита, ".*") Тогда
				ИмяТабличнойЧасти = Лев(ИмяРеквизита, СтрДлина(ИмяРеквизита) - 2);
				Если Результат.ТабличныеЧасти[ИмяТабличнойЧасти] <> Неопределено Тогда
					Результат.ТабличныеЧасти.Удалить(ИмяТабличнойЧасти);
				КонецЕсли;
			Иначе
				НайденныеРеквизиты = Результат.Реквизиты.НайтиСтроки(Новый Структура("НаименованиеРеквизита", ИмяРеквизита));
				Для Каждого Реквизит Из НайденныеРеквизиты Цикл
					Результат.Реквизиты.Удалить(Реквизит);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.ДополнительныеРеквизиты <> Неопределено Тогда
		Для Каждого ДополнительныйРеквизит Из Результат.ДополнительныеРеквизиты Цикл
			Реквизит = ЗначенияРеквизитов.Добавить();
			Реквизит.НаименованиеРеквизита = ДополнительныйРеквизит.Наименование;
			Реквизит.ЗначениеРеквизита = ДополнительныйРеквизит.Значение;
			Реквизит.Тип = ТипЗнч(ДополнительныйРеквизит.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МетаданныеРеквизита(МетаданныеОбъекта, ИмяРеквизита)
	Результат = МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита);
	Если Результат = Неопределено Тогда
		Попытка
			Результат = МетаданныеОбъекта.СтандартныеРеквизиты[ИмяРеквизита];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция МетаданныеТабличнойЧасти(МетаданныеОбъекта, ИмяТабличнойЧасти) Экспорт
	Результат = МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
	Если Результат = Неопределено Тогда
		Попытка
			Результат = МетаданныеОбъекта.СтандартныеТабличныеЧасти[ИмяТабличнойЧасти];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция МетаданныеРеквизитаТабличнойЧасти(МетаданныеТабличнойЧасти, ИмяРеквизита) Экспорт
	Результат = Неопределено;
	Если ТипЗнч(МетаданныеТабличнойЧасти) = Тип("ОписаниеСтандартнойТабличнойЧасти") Тогда
		Попытка
			Результат = МетаданныеТабличнойЧасти.СтандартныеРеквизиты[ИмяРеквизита];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	Иначе
		Результат = МетаданныеТабличнойЧасти.Реквизиты.Найти(ИмяРеквизита);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция РеквизитыТабличнойЧасти(МетаданныеТабличнойЧасти)
	Если ТипЗнч(МетаданныеТабличнойЧасти) = Тип("ОписаниеСтандартнойТабличнойЧасти") Тогда
		Результат = МетаданныеТабличнойЧасти.СтандартныеРеквизиты;
	Иначе
		Результат = МетаданныеТабличнойЧасти.Реквизиты;
	КонецЕсли;
	Возврат Результат;
КонецФункции


Процедура СформироватьОтчетПоВерсииОбъекта(ТабличныйДокумент, ОписаниеОбъекта, СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.Метаданные().Макеты.Найти("МакетОбъекта") <> Неопределено Тогда
		Макет = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект).ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Неопределено;
	КонецЕсли;
	
	Если Макет = Неопределено Тогда
		Секция = ТабличныйДокумент.ПолучитьОбласть("R2");
		ВывестиТекстВОтчет(ТабличныйДокумент, Секция, "R2C2", СсылкаНаОбъект.Метаданные().Синоним, 16, Истина);
		
		ТабличныйДокумент.Область("C2").ШиринаКолонки = 30;
		Если ОписаниеОбъекта.НомерВерсии <> 0 Тогда
			ВывестиШапкуПоВерсии(ТабличныйДокумент, ОписаниеОбъекта.Описание, 4, 3);
			ВывестиШапкуПоВерсии(ТабличныйДокумент, ОписаниеОбъекта.Комментарий, 5, 3);
		КонецЕсли;
		
		ЧислоВыведенныхСтрок = ВывестиРеквизитыПоРазобранномуОбъекту(ТабличныйДокумент, ОписаниеОбъекта, СсылкаНаОбъект);
		ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТабличныйДокумент, ОписаниеОбъекта, ЧислоВыведенныхСтрок + 7, СсылкаНаОбъект);
		ВывестиТабличныеДокументыПоРазобранномуОбъекту(ТабличныйДокумент, ОписаниеОбъекта);
	Иначе
		СформироватьПоСтандартномуМакету(ТабличныйДокумент, Макет, ОписаниеОбъекта, ОписаниеОбъекта.Описание, СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПоСтандартномуМакету(ТЧОтчета, Макет, ВерсияОбъекта, Знач ОписаниеВерсии, СсылкаНаОбъект)
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	НаименованиеОбъекта = МетаданныеОбъекта.Имя;
	
	ТЧОтчета = Новый ТабличныйДокумент;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Макет = Справочники[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Документы[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	КонецЕсли;
	
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R3");
	УстановитьСвойстваТекста(Область.Область("R1C2"), ОписаниеВерсии, , Истина);
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R5");
	ТЧОтчета.Вывести(Область);
	
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Реквизиты = Новый Структура;
	Для Каждого ОписаниеРеквизита Из ВерсияОбъекта.Реквизиты Цикл
		ИмяРеквизита = ОписаниеРеквизита.НаименованиеРеквизита;
		МетаданныеРеквизита = МетаданныеРеквизита(МетаданныеОбъекта, ОписаниеРеквизита.НаименованиеРеквизита);
		Если МетаданныеРеквизита = Неопределено И Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
			МетаданныеРеквизита = МетаданныеОбъекта.ПризнакиУчета.Найти(ОписаниеРеквизита.НаименованиеРеквизита);
		КонецЕсли;
		Если МетаданныеРеквизита <> Неопределено Тогда
			ИмяРеквизита = МетаданныеРеквизита.Имя;
		КонецЕсли;
		
		ЗначениеРеквизита = ОписаниеРеквизита.ЗначениеРеквизита;
		Реквизиты.Вставить(ИмяРеквизита, ЗначениеРеквизита);
	КонецЦикла;
	Шапка.Параметры.Заполнить(Реквизиты);
	ТЧОтчета.Вывести(Шапка);
	
	ИменаТабличныхЧастей = Новый Массив;
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ИменаТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
	КонецЦикла;
	Если Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.СтандартныеТабличныеЧасти Цикл
			ИменаТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
		Если ВерсияОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличнаяЧасть = ВерсияОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти].Скопировать();
		ТабличнаяЧасть.Колонки.Добавить("НомерСтроки");
		
		ИмяОбласти = ИмяТабличнойЧасти + "Шапка";
		Если Макет.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Иначе
			Продолжить;
		КонецЕсли;
		ТЧОтчета.Вывести(Область);
		
		ИмяОбласти = ИмяТабличнойЧасти;
		Если Макет.Области.Найти(ИмяОбласти) <> Неопределено Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Иначе
			Продолжить;
		КонецЕсли;
		НомерСтроки = 0;
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицы.НомерСтроки = НомерСтроки;
			Область.Параметры.Заполнить(СтрокаТаблицы);
			ТЧОтчета.Вывести(Область);
		КонецЦикла;
	КонецЦикла;
	
	Если ВерсияОбъекта.Свойство("ТабличныеДокументы") Тогда
		ТабличныеДокументы = ВерсияОбъекта.ТабличныеДокументы;
		Если ТабличныеДокументы <> Неопределено Тогда
			Если Макет.Области.Найти("ШапкаТабличныхДокументов") <> Неопределено Тогда
				ШапкаТабличныхДокументов = Макет.ПолучитьОбласть("ШапкаТабличныхДокументов");
				ТЧОтчета.Вывести(ШапкаТабличныхДокументов);
				ШапкаТабличногоДокумента = ?(Макет.Области.Найти("ШапкаТабличногоДокумента") = Неопределено,
					Неопределено, Макет.ПолучитьОбласть("ШапкаТабличногоДокумента"));
				
				Для Каждого ЭлементСтруктуры Из ТабличныеДокументы Цикл
					Если ШапкаТабличногоДокумента <> Неопределено Тогда
						НаименованиеТабличногоДокумента = Новый Структура("НаименованиеТабличногоДокумента", ЭлементСтруктуры.Значение.Наименование);
						ШапкаТабличногоДокумента.Параметры.Заполнить(НаименованиеТабличногоДокумента);
						ТЧОтчета.Вывести(ШапкаТабличногоДокумента);
					КонецЕсли;
					ТЧОтчета.Вывести(ЭлементСтруктуры.Значение.Данные);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТЧОтчета.ОтображатьСетку = Ложь;
	ТЧОтчета.Защита = Истина;
	ТЧОтчета.ТолькоПросмотр = Истина;
	ТЧОтчета.ОтображатьЗаголовки = Ложь;
	
КонецПроцедуры

// Выводит табличные документы по разобранному объекту, при выводе единственного объекта.
Процедура ВывестиТабличныеДокументыПоРазобранномуОбъекту(ТабличныйДокумент, ОписаниеОбъекта)
	
	ТабличныеДокументы = ОписаниеОбъекта.ТабличныеДокументы;
	
	Если ТабличныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщийШаблон = РегистрыСведений.ВерсииСложносочинённыхОбъектов.ПолучитьМакет("СтандартныйМакетПредставленияОбъекта");
	
	ШаблонЗаголовокТабличныеДокументы = ОбщийШаблон.ПолучитьОбласть("ШапкаТабличныхДокументов");	
	ШаблонСтрокаТабличныеДокументы = ОбщийШаблон.ПолучитьОбласть("ШапкаТабличногоДокумента");
	ШаблонПустаяСтрока = ОбщийШаблон.ПолучитьОбласть("СвободнаяСтрока");
	
	ТабличныйДокумент.Вывести(ШаблонПустаяСтрока);
	ТабличныйДокумент.Вывести(ШаблонЗаголовокТабличныеДокументы);
	ТабличныйДокумент.Вывести(ШаблонПустаяСтрока);
	ТабличныйДокумент.НачатьГруппуСтрок("ГруппаТабличныхДокументов");
	
	Для Каждого ЭлементСтруктуры Из ТабличныеДокументы Цикл
		НаименованиеТабличногоДокумента = ЭлементСтруктуры.Значение.Наименование;
		ШаблонСтрокаТабличныеДокументы.Параметры.НаименованиеТабличногоДокумента = НаименованиеТабличногоДокумента;
		ТабличныйДокумент.Вывести(ШаблонСтрокаТабличныеДокументы);
		ТабличныйДокумент.Вывести(ШаблонПустаяСтрока);
		
		ВыводимыйДокумент = ЭлементСтруктуры.Значение.Данные;
		ОбластьВыводаТабличногоДокумента = ТабличныйДокумент.Вывести(ВыводимыйДокумент);
		ОбластьВыводаТабличногоДокумента.СоздатьФорматСтрок();
		
		Для НомерКолонки = 1 По ВыводимыйДокумент.ШиринаТаблицы Цикл 
			ШиринаКолонки = ВыводимыйДокумент.Область(1, НомерКолонки, ВыводимыйДокумент.ВысотаТаблицы, НомерКолонки).ШиринаКолонки;
			ТабличныйДокумент.Область(ОбластьВыводаТабличногоДокумента.Верх, НомерКолонки,
				ОбластьВыводаТабличногоДокумента.Низ, НомерКолонки).ШиринаКолонки = ШиринаКолонки;
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ШаблонПустаяСтрока);
	КонецЦикла;
	
	ТабличныйДокумент.ЗакончитьГруппуСтрок();
	ТабличныйДокумент.Вывести(ШаблонПустаяСтрока);
	
КонецПроцедуры

// Выводит шапку отчета при выводе отчета по версии объекта.
//
Процедура ВывестиШапкуПоВерсии(ТЧОтчета, Знач Текст, Знач НомерСтроки, Знач НомерКолонки)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		ТЧОтчета.Область("C"+Строка(НомерКолонки)).ШиринаКолонки = 50;
		
		Регион = "R" + Формат(НомерСтроки, "ЧГ=0") + "C" + Формат(НомерКолонки, "ЧГ=0");
		ТЧОтчета.Область(Регион).Текст = Текст;
		ТЧОтчета.Область(Регион).ЦветФона = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
		ТЧОтчета.Область(Регион).Шрифт = Новый Шрифт(, 8, Истина, , , );
		ТЧОтчета.Область(Регион).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ТЧОтчета.Область(Регион).ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ТЧОтчета.Область(Регион).ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ТЧОтчета.Область(Регион).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит изменившиеся реквизиты в отчет. При этом получает их представление.
//
Функция ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, СсылкаНаОбъект)
	
	Секция = ТЧОтчета.ПолучитьОбласть("R6");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", "Реквизиты", 11, Истина);
	ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	
	ЧислоВыводимыхСтрок = 0;
	
	Реквизиты = ВерсияОбъекта.Реквизиты.Скопировать();
	Реквизиты.Колонки.Добавить("СтруктураОписанияНаименования");
	Реквизиты.Колонки.Добавить("ВыводимоеНаименование");
	Для Каждого Реквизит Из Реквизиты Цикл
		Реквизит.СтруктураОписанияНаименования = НаименованиеВыводимогоРеквизита(СсылкаНаОбъект, Реквизит.НаименованиеРеквизита);
		Реквизит.ВыводимоеНаименование = Реквизит.СтруктураОписанияНаименования.ВыводимоеНаименование;
	КонецЦикла;
	Реквизиты.Сортировать("ВыводимоеНаименование");
	
	Для Каждого ЭлементРеквизит Из Реквизиты Цикл
		СтруктураОписанияНаименования = ЭлементРеквизит.СтруктураОписанияНаименования;
		Если Не СтруктураОписанияНаименования.ВыводитьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		ВыводимоеНаименование = СтруктураОписанияНаименования.ВыводимоеНаименование;
		ОписаниеРеквизита = СтруктураОписанияНаименования.ОписаниеРеквизита;
		
		ЗначениеРеквизита = ?(ЭлементРеквизит.ЗначениеРеквизита = Неопределено, "", ЭлементРеквизит.ЗначениеРеквизита);
		ПредставлениеЗначения = ПредставлениеЗначенияРеквизита(ЗначениеРеквизита, ОписаниеРеквизита);
		
		УстановитьСвойстваТекста(Секция.Область("R1C2"), ВыводимоеНаименование, , Истина);
		УстановитьСвойстваТекста(Секция.Область("R1C3"), ПредставлениеЗначения);
		Секция.Область("R1C2:R1C3").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, 0);
		Секция.Область("R1C2:R1C3").ЦветРамки = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
		
		ТЧОтчета.Вывести(Секция);
		
		ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
	КонецЦикла;
	
	ТЧОтчета.ЗакончитьГруппуСтрок();
	
	Возврат ЧислоВыводимыхСтрок;
	
КонецФункции

// Выводит табличные части по разобранному объекту, при выводе единственного объекта.
//
Процедура ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, НомерСтрокиВывода, СсылкаНаОбъект)
	
	Если ВерсияОбъекта.ТабличныеЧасти.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ЧислоВыводимыхСтрок = 0;
	
	Для Каждого СтрокаТабличнаяЧасть Из ВерсияОбъекта.ТабличныеЧасти Цикл
		НаименованиеТабличнойЧасти = СтрокаТабличнаяЧасть.Ключ;
		ТабличнаяЧасть             = СтрокаТабличнаяЧасть.Значение;
		Если ТабличнаяЧасть.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		МетаданныеТЧ = МетаданныеТабличнойЧасти(МетаданныеОбъекта, НаименованиеТабличнойЧасти);
		СинонимТЧ = НаименованиеТабличнойЧасти;
		Если МетаданныеТЧ <> Неопределено Тогда
			СинонимТЧ = МетаданныеТЧ.Представление();
		КонецЕсли;
		
		Секция = ТЧОтчета.ПолучитьОбласть("R" + Строка(НомерСтрокиВывода));
		ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C100", " ");
		ОбластьВывода = ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", СинонимТЧ, 11, Истина);
		ТЧОтчета.Область("R" + Формат(ОбластьВывода.Верх, "ЧГ=0") + "C2").СоздатьФорматСтрок();
		ТЧОтчета.Область("R" + Формат(ОбластьВывода.Верх, "ЧГ=0") + "C2").ШиринаКолонки = Окр(СтрДлина(СинонимТЧ)*2, 0, РежимОкругления.Окр15как20);
		ТЧОтчета.НачатьГруппуСтрок("ГруппаСтрок");
		
		ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
		ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
		НомерСтрокиВывода = НомерСтрокиВывода + 3;
		
		ДобавляемаяТЧ = Новый ТабличныйДокумент;
		ДобавляемаяТЧ.Присоединить(СформироватьПустойСектор(ТабличнаяЧасть.Количество()+1));
		
		НомерКолонки = 2;
		СоответствиеРазмерностиКолонок = Новый Соответствие;
		
		Секция = Новый ТабличныйДокумент;
		ОбластьСекции = Секция.Область("R1C1");
		УстановитьСвойстваТекста(ОбластьСекции, "N", , Истина, Истина);
		ОбластьСекции.ЦветФона = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
		
		НомерСтроки = 1;
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
			НомерСтроки = НомерСтроки + 1;
			УстановитьСвойстваТекста(Секция.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1"), Формат(НомерСтроки-1, "ЧГ=0"), , Ложь, Истина);
		КонецЦикла;
		ДобавляемаяТЧ.Присоединить(Секция);
		
		НомерКолонки = 3;
		
		Для Каждого КолонкаТабличнойЧасти Из ТабличнаяЧасть.Колонки Цикл
			Секция = Новый ТабличныйДокумент;
			НаименованиеПоля = КолонкаТабличнойЧасти.Имя;
			
			ОписаниеПоля = Неопределено;
			Если МетаданныеТЧ <> Неопределено Тогда
				ОписаниеПоля = МетаданныеРеквизитаТабличнойЧасти(МетаданныеТЧ, НаименованиеПоля);
			КонецЕсли;
			Если ОписаниеПоля = Неопределено И Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
				ОписаниеПоля = МетаданныеОбъекта.ПризнакиУчетаСубконто.Найти(НаименованиеПоля);
			КонецЕсли;
			Если ОписаниеПоля = Неопределено Тогда
				ВыводимоеНаименованиеПоля = НаименованиеПоля;
			Иначе
				ВыводимоеНаименованиеПоля = ОписаниеПоля.Представление();
			КонецЕсли;
			
			ЦветЗаголовкаКолонки = ?(ОписаниеПоля = Неопределено, ЦветаСтиля.ЗаголовокУдаленногоРеквизитаФон, ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			СекцияОбласти = Секция.Область("R1C1");
			УстановитьСвойстваТекста(СекцияОбласти, ВыводимоеНаименованиеПоля, , Истина, Истина);
			СекцияОбласти.ЦветФона = ЦветЗаголовкаКолонки;
			СоответствиеРазмерностиКолонок.Вставить(НомерКолонки, СтрДлина(НаименованиеПоля) + 4);
			НомерСтроки = 1;
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				НомерСтроки = НомерСтроки + 1;
				Значение = ?(СтрокаТабличнойЧасти[НаименованиеПоля] = Неопределено, "", СтрокаТабличнойЧасти[НаименованиеПоля]);
				ПредставлениеЗначения = ПредставлениеЗначенияРеквизита(Значение, ОписаниеПоля);
				
				УстановитьСвойстваТекста(Секция.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1"), ПредставлениеЗначения, , , Истина);
				Если СтрДлина(ПредставлениеЗначения) > (СоответствиеРазмерностиКолонок[НомерКолонки] - 4) Тогда
					СоответствиеРазмерностиКолонок[НомерКолонки] = СтрДлина(ПредставлениеЗначения) + 4;
				КонецЕсли;
			КонецЦикла;
			
			ДобавляемаяТЧ.Присоединить(Секция);
			НомерКолонки = НомерКолонки + 1;
		КонецЦикла;
		
		ОбластьВывода = ТЧОтчета.Вывести(ДобавляемаяТЧ);
		ТЧОтчета.Область(ОбластьВывода.Верх, 1, ОбластьВывода.Низ, НомерКолонки).СоздатьФорматСтрок();
		ТЧОтчета.Область("R" + Формат(ОбластьВывода.Верх, "ЧГ=0") + "C2").ШиринаКолонки = 7;
		Для ТекущийНомерКолонки = 3 По НомерКолонки-1 Цикл
			ТЧОтчета.Область("R" + Формат(ОбластьВывода.Верх, "ЧГ=0") + "C" + Формат(ТекущийНомерКолонки, "ЧГ=0")).ШиринаКолонки = СоответствиеРазмерностиКолонок[ТекущийНомерКолонки];
		КонецЦикла;
		ТЧОтчета.ЗакончитьГруппуСтрок();
	КонецЦикла;
	
КонецПроцедуры

// Выводит текст в область табличного документа с определенным оформлением.
//
Функция ВывестиТекстВОтчет(ТаблицаОтчета, Знач Секция, Знач Регион, Знач Текст, Знач Размер = 9, Знач Жирный = Ложь)
	
	ОбластьСекции = Секция.Область(Регион);
	
	Если ТипЗнч(ОбластьСекции) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		ОбластьСекции.Текст      = Текст;
		ОбластьСекции.Шрифт      = Новый Шрифт(, Размер, Жирный, , , );
		ОбластьСекции.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		
		ОбластьСекции.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбластьСекции.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбластьСекции.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		ОбластьСекции.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
		
	КонецЕсли;
	
	Возврат ТаблицаОтчета.Вывести(Секция);
	
КонецФункции

// Используется для вывода текста в область табличного документа
// с условным оформлением.
//
Процедура УстановитьСвойстваТекста(ОбластьСекции, Текст, Знач Размер = 9, Знач Жирный = Ложь, Знач ПоказыватьГраницы = Ложь)
	
	Если ТипЗнч(ОбластьСекции) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		ОбластьСекции.Текст = Текст;
		ОбластьСекции.Шрифт = Новый Шрифт(, Размер, Жирный, , , );
		
		Если ПоказыватьГраницы Тогда
			ОбластьСекции.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьСекции.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьСекции.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьСекции.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
			ОбластьСекции.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		КонецЕсли;
	
	КонецЕсли
	
КонецПроцедуры

// ЗначениеЗаполнения - массив строк.
// ТипВывода - строка :
//           "и" - изменение
//           "д" - добавление
//           "у" - удаление
//           ""  - обычный вывод.
Функция СформироватьСекторСтрокиТЧ(Знач ЗначениеЗаполнения,Знач ТипВывода = "")
	
	ОбщийШаблон = РегистрыСведений.ВерсииСложносочинённыхОбъектов.ПолучитьМакет("СтандартныйМакетПредставленияОбъекта");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если      ТипВывода = ""  Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИсходноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "И" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИзмененноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "Д" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ДобавленныйРеквизит");
	ИначеЕсли ТипВывода = "У" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("УдаленныйРеквизит");
	КонецЕсли;
	
	Для Каждого ОчередноеЗначение Из ЗначениеЗаполнения Цикл
		Шаблон.Параметры.ЗначениеРеквизита = ОчередноеЗначение;
		ТабличныйДокумент.Вывести(Шаблон);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует пустой сектор для вывода в отчет. Используется,
// если строка не была изменена в одной из версий.
//
Функция СформироватьПустойСектор(Знач ЧислоСтрок, Знач ТипВывода = "")
	
	ЗначениеЗаполнения = Новый Массив;
	
	Для Индекс = 1 По ЧислоСтрок Цикл
		ЗначениеЗаполнения.Добавить(" ");
	КонецЦикла;
	
	Возврат СформироватьСекторСтрокиТЧ(ЗначениеЗаполнения, ТипВывода);
	
КонецФункции

Функция НаименованиеВыводимогоРеквизита(СсылкаНаОбъект, Знач ИмяРеквизита) Экспорт
	
	ВыводитьРеквизит = Истина;
	
	ОписаниеРеквизита = МетаданныеРеквизита(СсылкаНаОбъект.Метаданные(), ИмяРеквизита);
	Если ОписаниеРеквизита = Неопределено Тогда
		ОписаниеРеквизита = Метаданные.ОбщиеРеквизиты.Найти(ИмяРеквизита);
	КонецЕсли;
	
	ПредставлениеРеквизита = ИмяРеквизита;
	Если ОписаниеРеквизита <> Неопределено Тогда
		ПредставлениеРеквизита = ОписаниеРеквизита.Представление();
	КонецЕсли;
	
	ВерсионированиеСложносочинённыхОбъектовПереопределяемый.ПриОпределенииНаименованияРеквизитаОбъекта(СсылкаНаОбъект, 
		ИмяРеквизита, ПредставлениеРеквизита, ВыводитьРеквизит);
	
	Возврат Новый Структура("ВыводимоеНаименование, ВыводитьРеквизит, ОписаниеРеквизита", 
		ПредставлениеРеквизита, ВыводитьРеквизит, ОписаниеРеквизита);
	
КонецФункции

Функция ПредставлениеЗначенияРеквизита(ЗначениеРеквизита, ОбъектМетаданныхРеквизит)
	
	ФорматнаяСтрока = "";
	Если ОбъектМетаданныхРеквизит <> Неопределено Тогда
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда
			ФорматнаяСтрока = "ДЛФ=DT";
			Если ОбъектМетаданныхРеквизит.Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
				ФорматнаяСтрока = "ДЛФ=D";
			ИначеЕсли ОбъектМетаданныхРеквизит.Тип.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
				ФорматнаяСтрока = "ДЛФ=T";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Формат(ЗначениеРеквизита, ФорматнаяСтрока);
	
КонецФункции


Функция ЕстьПравоЧтенияИнформацииОВерсияхОбъектов() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ВерсииСложносочинённыхОбъектов);
КонецФункции

Функция ЕстьПравоЧтенияДанныхВерсийОбъектов() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.ИсторияИзменений);
КонецФункции

Функция РазмерДанных(Данные) Экспорт
	Возврат Base64Значение(СериализаторXDTO.XMLСтрока(Данные)).Размер();
КонецФункции


// Возвращает структуру, содержащую версию объекта и дополнительную информацию.
//
// Параметры:
//  Ссылка      - Ссылка - ссылка версионируемый объект;
//  НомерВерсии - Число  - номер версии объекта.
//
// Возвращаемое значение - Структура:
//                          ВерсияОбъекта - ДвоичныеДанные - сохраненная версия объекта информационной базы;
//                          АвторВерсии   - Справочник.Пользователи, Справочник.ВнешниеПользователи - 
//                                          пользователь, записавший версию объекта.
//                          ДатаВерсии    - Дата - дата записи версии объекта.
// 
// Примечание:
//  Функция может вызвать исключение, если запись не содержит данных.
//  Функцию требуется вызвать в привилегированном режиме.
//
Функция СведенияОВерсииОбъекта(Знач Ссылка, Знач НомерВерсии) Экспорт
	СообщениеНеУдалосьПолучитьВерсию = НСтр("ru = 'Не удалось получить предыдущую версию объекта.'");
	Если Не ЕстьПравоЧтенияДанныхВерсийОбъектов() Тогда
		ВызватьИсключение СообщениеНеУдалосьПолучитьВерсию;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииСложносочинённыхОбъектов.АвторВерсии КАК АвторВерсии,
	|	ВерсииСложносочинённыхОбъектов.ДатаВерсии КАК ДатаВерсии,
	|	ВерсииСложносочинённыхОбъектов.Комментарий КАК Комментарий,
	|	ВерсииСложносочинённыхОбъектов.ВерсияОбъекта,
	|	ВерсииСложносочинённыхОбъектов.КонтрольнаяСумма
	|ИЗ
	|	РегистрСведений.ВерсииСложносочинённыхОбъектов КАК ВерсииСложносочинённыхОбъектов
	|ГДЕ
	|	ВерсииСложносочинённыхОбъектов.Объект = &Ссылка
	|	И ВерсииСложносочинённыхОбъектов.НомерВерсии = &НомерВерсии";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомерВерсии", Число(НомерВерсии));
	
	Результат = Новый Структура("ВерсияОбъекта, АвторВерсии, ДатаВерсии, Комментарий");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Результат.ВерсияОбъекта = Результат.ВерсияОбъекта.Получить();
		Если Результат.ВерсияОбъекта = Неопределено Тогда
			СтруктураДанных = Новый Структура("Объект, Ссылка", Ссылка, Ссылка);
			Результат.ВерсияОбъекта = ДанныеВерсииОбъекта(СтруктураДанных, НомерВерсии, Выборка.КонтрольнаяСумма);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.ВерсияОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Выбранная версия объекта отсутствует в программе.'");
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ДанныеВерсииОбъекта(СтруктураДанных, НомерВерсии, КонтрольнаяСумма)
	
	Если Не ПустаяСтрока(КонтрольнаяСумма) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииСложносочинённыхОбъектов.ВерсияОбъекта,
		|	ВерсииСложносочинённыхОбъектов.НомерВерсии
		|ИЗ
		|	РегистрСведений.ВерсииСложносочинённыхОбъектов КАК ВерсииСложносочинённыхОбъектов
		|ГДЕ
		|	ВерсииСложносочинённыхОбъектов.Объект = &Объект
		|	И ВерсииСложносочинённыхОбъектов.НомерВерсии >= &НомерВерсии
		|	И ВерсииСложносочинённыхОбъектов.КонтрольнаяСумма = &КонтрольнаяСумма
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииСложносочинённыхОбъектов.НомерВерсии УБЫВ";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Объект", СтруктураДанных.Объект);
		Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
		Запрос.УстановитьПараметр("КонтрольнаяСумма", КонтрольнаяСумма);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.ВерсияОбъекта.Получить();
			Если Результат = Неопределено И Выборка.НомерВерсии = НомерПоследнейВерсии(СтруктураДанных.Объект, Истина) Тогда
				Результат = ДанныеДляХранения(СтруктураДанных);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииСложносочинённыхОбъектов.КонтрольнаяСумма
		|ИЗ
		|	РегистрСведений.ВерсииСложносочинённыхОбъектов КАК ВерсииСложносочинённыхОбъектов
		|ГДЕ
		|	ВерсииСложносочинённыхОбъектов.Объект = &Объект
		|	И ВерсииСложносочинённыхОбъектов.НомерВерсии >= &НомерВерсии
		|	И ВерсииСложносочинённыхОбъектов.КонтрольнаяСумма <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииСложносочинённыхОбъектов.НомерВерсии";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Объект", СтруктураДанных);
		Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ДанныеВерсииОбъекта(СтруктураДанных, НомерВерсии, Выборка.КонтрольнаяСумма);
		КонецЕсли;
		
		Возврат ДанныеДляХранения(СтруктураДанных);
	КонецЕсли;
	
КонецФункции

Функция РазборВерсии(Ссылка, НомерВерсии) Экспорт
	
	СведенияОВерсии = СведенияОВерсииОбъекта(Ссылка, НомерВерсии);
	
	Результат = РазборПредставленияОбъектаXML(СведенияОВерсии.ВерсияОбъекта, Ссылка);
	Результат.Вставить("ИмяОбъекта",     Строка(Ссылка));
	Результат.Вставить("АвторИзменения", СокрЛП(Строка(СведенияОВерсии.АвторВерсии)));
	Результат.Вставить("ДатаИзменения",  СведенияОВерсии.ДатаВерсии);
	Результат.Вставить("Комментарий",    СведенияОВерсии.Комментарий);
	
	ВерсионированиеСложносочинённыхОбъектовПереопределяемый.ПослеРазбораВерсииОбъекта(Ссылка, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция НомерВерсииВИерархии(Ссылка, НомерВерсии)
	
	Если ЕстьПравоЧтенияДанныхВерсийОбъектов() Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВерсииСложносочинённыхОбъектов.НомерВерсии КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииСложносочинённыхОбъектов КАК ВерсииСложносочинённыхОбъектов
	|ГДЕ
	|	ВерсииСложносочинённыхОбъектов.Объект = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВерсии УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаВерсий = Запрос.Выполнить().Выгрузить();
	
	ДеревоВерсий = Новый ДеревоЗначений;
	ДеревоВерсий.Колонки.Добавить("НомерВерсии");
	ДеревоВерсий.Колонки.Добавить("ПредставлениеНомераВерсии");
	ДеревоВерсий.Колонки.Добавить("Отклонена", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьИерархиюВерсий(ДеревоВерсий, ТаблицаВерсий);
	ПронумероватьВерсии(ДеревоВерсий.Строки);
	
	ОписаниеВерсии = ДеревоВерсий.Строки.Найти(НомерВерсии, "НомерВерсии", Истина);
	Результат = ОписаниеВерсии;
	Если Результат <> Неопределено Тогда
		Результат = ОписаниеВерсии.ПредставлениеНомераВерсии;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьИерархиюВерсий(ИерархияВерсий, СписокВерсий) Экспорт
	
	Для Каждого ОписаниеВерсии Из СписокВерсий Цикл
		Элемент = ИерархияВерсий.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Элемент, ОписаниеВерсии);
	КонецЦикла;
		
КонецПроцедуры

Процедура ПронумероватьВерсии(КоллекцияВерсий) Экспорт
	
	ТекущийНомерВерсии = КоллекцияВерсий.Количество();
	Для Каждого Версия Из КоллекцияВерсий Цикл
		ПрефиксНомера = "";
		Если Версия.Родитель <> Неопределено И Не ПустаяСтрока(Версия.Родитель.ПредставлениеНомераВерсии) Тогда
			ПрефиксНомера = Версия.Родитель.ПредставлениеНомераВерсии + ".";
		КонецЕсли;
		
		Версия.ПредставлениеНомераВерсии = ПрефиксНомера + Формат(ТекущийНомерВерсии, "ЧГ=0");
		ПронумероватьВерсии(Версия.Строки);
		ТекущийНомерВерсии = ТекущийНомерВерсии - 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

