///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует подпись переданных данных с помощью переданного ключа алгоритмом HMAC-SHA256.
//
// Параметры:
//   Ключ - ДвоичныеДанные - двоичные данные ключа подписи.
//   Данные - Строка - подписываемые данные.
//
// Возвращаемое значение:
//   Строка - подпись в формате Base64.
//
Функция Подпись(Ключ, Данные) Экспорт
	
	Возврат Base64Строка(HMACSHA256(Ключ, ПолучитьДвоичныеДанныеИзСтроки(Данные)));
	
КонецФункции

#КонецОбласти 

#Область СлужебныйПрограммныйИнтерфейс

Функция HMACSHA256(Знач Ключ, Знач Данные) Экспорт
	
	Возврат HMAC(Ключ, Данные, ХешФункция.SHA256, 64);
	
КонецФункции

Функция СтрокаИзСтруктурыJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные, , "ПреобразованиеЗначенийJSON", РаботаВМоделиСервисаБТС);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Параметры:
//   Строка - Строка - строка в формате JSON.
//   СвойстваТипаДата - Массив из Строка - имена свойств с типом "Дата".
// 
// Возвращаемое значение:
//   Структура, Массив - полученная структура или массив.
//
Функция СтруктураИзСтрокиJSON(Строка, СвойстваТипаДата = Неопределено) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Ответ = ПрочитатьJSON(ЧтениеJSON,, СвойстваТипаДата, ФорматДатыJSON.ISO); 
	Возврат Ответ;
	
КонецФункции

// Параметры:
//   ПотокДанных - ФайловыйПоток, ПотокВПамяти - поток данных.
//   СвойстваТипаДата - Массив из Строка - имена свойств с типом "Дата".
// 
// Возвращаемое значение:
//   Структура, Массив - полученная структура или массив.
//
Функция СтруктураИзПотокаJSON(ПотокДанных, СвойстваТипаДата = Неопределено) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ПотокДанных);
	Ответ = ПрочитатьJSON(ЧтениеJSON, , СвойстваТипаДата, ФорматДатыJSON.ISO);
	ЧтениеJSON.Закрыть();
	Возврат Ответ;
	
КонецФункции

// Отправляет данные на указанный адрес в Менеджер сервиса.
//
// Параметры:
//  Метод - Строка - имя HTTP-метода для запроса согласно стандарту RFC7230 (https://tools.ietf.org/html/rfc7230).
//  Адрес  - Строка - адрес, на который отправляются данные, например "hs/ext_api/execute".
//  Данные - Структура - данные, отправляемые в менеджер сервиса.
//  КэшСоединения - Булево - использовать кэш соединения при отправке запросов.
//  Таймаут - Строка - время ожидания ответа от менеджера сервиса.
// 
// Возвращаемое значение:
//  HTTPОтвет - ответ HTTP-сервиса Менеджера сервиса. 
//
Функция ОтправитьЗапросВМенеджерСервиса(Метод, Адрес, Знач Данные = Неопределено, КэшСоединения = Истина, Таймаут = 60) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПолныйАдрес = СтрШаблон("%1/%2", РаботаВМоделиСервиса.ВнутреннийАдресМенеджераСервиса(), Адрес);

	ДанныеСервера = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдрес);

	Если КэшСоединения Тогда
		Соединение = РаботаВМоделиСервисаБТСПовтИсп.СоединениеСМенеджеромСервиса(ДанныеСервера, Таймаут);
	Иначе
		Соединение = СоединениеСМенеджеромСервиса(ДанныеСервера, Таймаут);
	КонецЕсли;

	Запрос = Новый HTTPЗапрос(ДанныеСервера.ПутьНаСервере);
	Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		Данные = СтрокаИзСтруктурыJSON(Данные);
		Запрос.УстановитьТелоИзСтроки(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		Запрос.УстановитьТелоИзДвоичныхДанных(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		Запрос.УстановитьТелоИзСтроки(Данные);
	КонецЕсли;

	Возврат Соединение.ВызватьHTTPМетод(Метод, Запрос);

КонецФункции
 
// Возвращает HTTP-соединение с Менеджером сервиса.
//
// Параметры:
//  ДанныеСервера - см. ОбщегоНазначенияКлиентСервер.СтруктураURI
//  Таймаут - Число - время ожидания ответа от сервера
// 
// Возвращаемое значение:
//  HTTPСоединение - соединение с Менеджером сервиса.
//
Функция СоединениеСМенеджеромСервиса(ДанныеСервера, Таймаут = 60) Экспорт

	СхемаSSL = "https";
	Если НРег(ДанныеСервера.Схема) = СхемаSSL Тогда
		ЗащищенноеСоединение =  Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Соединение = Новый HTTPСоединение(ДанныеСервера.Хост, ДанныеСервера.Порт,
		РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса(),
		РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса(), , Таймаут, ЗащищенноеСоединение);

	Возврат Соединение;

КонецФункции

Функция НовыйПараметрыДействияПрикрепитьОбластьДанных() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КодОбластиДанных");
	Параметры.Вставить("СписокПользователей");
	Параметры.Вставить("ПредставлениеПриложения");
	Параметры.Вставить("ЧасовойПоясПриложения");
	
	Возврат Параметры;
	
КонецФункции

Функция ПользовательОбластиПоИдентификаторуПользователяСервиса(Знач ИдентификаторПользователяСервиса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса";
	Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ИдентификаторПользователяСервиса);
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Справочник.Пользователи");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.Пустой() Тогда
		ШаблонСообщения = НСтр("ru = 'Не найден пользователь с идентификатором пользователя сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИдентификаторПользователяСервиса);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

// Вызывается при установке конечной точки Менеджера сервиса.
// @skip-warning ПустойМетод - особенность реализации.
//
Процедура ПриУстановкеКонечнойТочкиМенеджераСервиса() Экспорт
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//  // Добавление обработчика в список.
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Процедура = "РаботаВМоделиСервисаБТС.СоздатьНеразделенныеПредопределенныеЭлементы";
		Обработчик.Приоритет = 99;
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.МонопольныйРежим = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	СоздатьНеразделенныеПредопределенныеЭлементы();
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
//   ТаблицаПараметров - см. РаботаВМоделиСервиса.ПараметрыИБ
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ВнешнийАдресУправляющегоПриложения");
	
КонецПроцедуры

// Обработчик создания/обновления предопределенных элементов
// неразделенных объектов метаданных.
//
Процедура СоздатьНеразделенныеПредопределенныеЭлементы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВызватьИсключение НСтр("ru = 'Операция может быть выполнена только в сеансе, в котором не установлены значения разделителей'");
		
	КонецЕсли;
	
	ИнициализироватьПредопределенныеДанные();
	
КонецПроцедуры

// Вызывается при формировании манифеста конфигурации.
//
// Параметры:
//  РасширенныеСведения - Массив из ОбъектXDTO - внутри процедуры обработчика в данный массив требуется
//    добавить объекты типа ОбъектXDTO с ТипомXDTO, унаследованным от
//    {http://www.1c.ru/1cFresh/Application/Manifest/a.b.c.d}ExtendedInfoItem.
//
Процедура ПриФормированииМанифестаКонфигурации(РасширенныеСведения) Экспорт
	
	Если ТранзакцияАктивна() Тогда
		ВызватьИсключение НСтр("ru = 'Операция не может быть выполнена при активной внешней транзакции'");
	КонецЕсли;
	
	ВызовВНеразделеннойИБ = Не ОбщегоНазначения.РазделениеВключено();
	
	НачатьТранзакцию();
	
	Попытка
		
		ОписаниеРазрешений = ФабрикаXDTO.Создать(
			ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Application/Permissions/Manifes/1.0.0.1", "RequiredPermissions"));
		
		ОписаниеВнешнихКомпонент = ФабрикаXDTO.Создать(
			ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Application/Permissions/Manifes/1.0.0.1", "Addins"));
		
		МакетыВнешнихКомпонент = Новый Соответствие();
		ИспользоватьРазделениеПоОбластямДанных = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
		ОтключитьРазделениеПоОбластямДанных = Ложь;
		
		Если ВызовВНеразделеннойИБ Тогда
			
			Если НЕ ИспользоватьРазделениеПоОбластямДанных Тогда
				Константы.ИспользоватьРазделениеПоОбластямДанных.Установить(Истина);
				ОтключитьРазделениеПоОбластямДанных = Истина;
			КонецЕсли; 
			
			ОбновитьПовторноИспользуемыеЗначения();
			
		КонецЕсли;
		
		Константы.ИспользуютсяПрофилиБезопасности.Установить(Истина);
		Константы.АвтоматическиНастраиватьРазрешенияВПрофиляхБезопасности.Установить(Истина);
		
		ИдентификаторыЗапросов = РаботаВБезопасномРежиме.ЗапросыОбновленияРазрешенийКонфигурации();
		
		МенеджерПрименения = РаботаВБезопасномРежимеСлужебныйВМоделиСервиса.МенеджерПримененияРазрешений(ИдентификаторыЗапросов);
		Дельта = МенеджерПрименения.ДельтаБезУчетаВладельцев();
		
		МакетыВнешнихКомпонент = Новый Массив();
		
		Для Каждого ЭлементДельты Из Дельта.Добавляемые Цикл
			
			Для Каждого КлючИЗначение Из ЭлементДельты.Разрешения Цикл
				
				Разрешение = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(КлючИЗначение.Значение);
				ОписаниеРазрешений.Permission.Добавить(Разрешение);
				
				Если Разрешение.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Application/Permissions/1.0.0.1", "AttachAddin") Тогда
					МакетыВнешнихКомпонент.Добавить(Разрешение.TemplateName);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ИмяМакета Из МакетыВнешнихКомпонент Цикл
			
			ОписаниеВнешнейКомпоненты = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Application/Permissions/Manifes/1.0.0.1", "AddinBundle"));
			ОписаниеВнешнейКомпоненты.TemplateName = ИмяМакета;
			
			ОписанияФайлов = РаботаВБезопасномРежиме.КонтрольныеСуммыФайловКомплектаВнешнейКомпоненты(ИмяМакета);
			
			Для Каждого КлючИЗначение Из ОписанияФайлов Цикл
				
				ОписаниеФайла = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Application/Permissions/Manifes/1.0.0.1", "AddinFile"));
				ОписаниеФайла.FileName = КлючИЗначение.Ключ;
				ОписаниеФайла.Hash = КлючИЗначение.Значение;
				
				ОписаниеВнешнейКомпоненты.Files.Добавить(ОписаниеФайла);
				
			КонецЦикла;
			
			ОписаниеВнешнихКомпонент.Bundles.Добавить(ОписаниеВнешнейКомпоненты);
			
		КонецЦикла;
		
		РасширенныеСведения.Добавить(ОписаниеРазрешений);
		РасширенныеСведения.Добавить(ОписаниеВнешнихКомпонент);
		
		Если ОтключитьРазделениеПоОбластямДанных Тогда
			Константы.ИспользоватьРазделениеПоОбластямДанных.Установить(Ложь);
		КонецЕсли; 
		
	Исключение
		
		ОтменитьТранзакцию();
		Если ВызовВНеразделеннойИБ Тогда
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОтменитьТранзакцию();
	Если ВызовВНеразделеннойИБ Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает внутренний адрес менеджера сервиса.
//
// Возвращаемое значение:
//  Строка - внутренний адрес менеджера сервиса.
//
Функция ВнутреннийАдресМенеджераСервиса() Экспорт
	
	Возврат Константы.ВнутреннийАдресМенеджераСервиса.Получить();
	
КонецФункции

// Устанавливает внутренний адрес менеджера сервиса.
//
// Параметры:
//  Значение - Строка - внутренний адрес менеджера сервиса.
//
Процедура УстановитьВнутреннийАдресМенеджераСервиса(Знач Значение) Экспорт
	
	Константы.ВнутреннийАдресМенеджераСервиса.Установить(Значение);
	
КонецПроцедуры

// Возвращает имя служебного пользователя менеджера сервиса.
//
// Возвращаемое значение:
//  Строка - имя служебного пользователя менеджера сервиса.
//
Функция ИмяСлужебногоПользователяМенеджераСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ВнутреннийАдресМенеджераСервиса");
	ИмяСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ИмяСлужебногоПользователяМенеджераСервиса", Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИмяСлужебногоПользователя;
	
КонецФункции

// Возвращает пароль служебного пользователя менеджера сервиса.
//
// Возвращаемое значение:
//  Строка - пароль служебного пользователя менеджера сервиса.
//
Функция ПарольСлужебногоПользователяМенеджераСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Владелец = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Константа.ВнутреннийАдресМенеджераСервиса");
	ПарольСлужебногоПользователя = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ПарольСлужебногоПользователяМенеджераСервиса", Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПарольСлужебногоПользователя;
	
КонецФункции

// Возвращает конечную точку для отправки сообщений в менеджер сервиса.
//
// Возвращаемое значение:
//  ПланОбменаСсылка.ОбменСообщениями - узел соответствующий менеджеру сервиса.
//
Функция КонечнаяТочкаМенеджераСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КонечнаяТочкаМенеджераСервиса.Получить();
	
КонецФункции

Процедура ПодготовитьИПрикрепитьОбластьДанных(Знач КодОбластиДанных, Знач СписокПользователей, Знач ПредставлениеПриложения, Знач ЧасовойПоясПриложения, Знач ИдентификаторФайлаНачальныхДанных) Экспорт
	
	Попытка
		ПодготовитьОбластьДанных(КодОбластиДанных, ИдентификаторФайлаНачальныхДанных);
		ПараметрыДействия = НовыйПараметрыДействияПрикрепитьОбластьДанных();
		ПараметрыДействия.КодОбластиДанных = КодОбластиДанных;
		ПараметрыДействия.СписокПользователей = СписокПользователей;
		ПараметрыДействия.ПредставлениеПриложения = ПредставлениеПриложения;
		ПараметрыДействия.ЧасовойПоясПриложения = ЧасовойПоясПриложения;		
		ПрикрепитьОбластьДанных(ПараметрыДействия);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УведомитьМенеджерОшибкаПодготовкиОбласти(КодОбластиДанных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодготовитьОбластьДанных(Знач КодОбластиДанных, Знач ИдентификаторФайлаНачальныхДанных)
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение(НСтр("ru = 'Недостаточно прав для выполнения операции'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючОбласти = РаботаВМоделиСервиса.СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(
		РегистрыСведений.ОбластиДанных,
		Новый Структура(РаботаВМоделиСервиса.РазделительВспомогательныхДанных(), КодОбластиДанных));
	ЗаблокироватьДанныеДляРедактирования(КлючОбласти);
	
	Попытка
		РаботаВМоделиСервиса.ПолучитьМенеджерЗаписиОбластиДанных(КодОбластиДанных, Перечисления.СтатусыОбластейДанных.ПустаяСсылка());
		
		Если ТекущийРежимЗапуска() <> Неопределено Тогда
			
			СообщениеОбОшибке = "";
			
			ПользователиСлужебный.АвторизоватьТекущегоПользователя();
			
			РезультатПодготовки = РаботаВМоделиСервиса.ПодготовитьОбластьДанныхКИспользованиюИзЭталонной(КодОбластиДанных, ИдентификаторФайлаНачальныхДанных, "Стандарт", СообщениеОбОшибке);
			
			Если РезультатПодготовки <> "Успех" Тогда
				ИмяСобытия = РаботаВМоделиСервиса.СобытиеЖурналаРегистрацииПодготовкаОбластиДанных();
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
				ТипСообщения = СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОшибкаПодготовкиОбластиДанных();
				ОтправитьСообщениеОСостоянииОбластиДанных(ТипСообщения, КодОбластиДанных, СообщениеОбОшибке);
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
			
		КонецЕсли;
			
	Исключение
		РазблокироватьДанныеДляРедактирования(КлючОбласти);
		ВызватьИсключение;
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(КлючОбласти);
	
КонецПроцедуры

// Загружает данные в область из пользовательской выгрузки.
// 
// Параметры: 
//   КодОбластиДанных - Число - номер заполняемой области.
//   ИдентификаторВыгрузки - УникальныйИдентификатор - идентификатор файла выгрузки.
//   СопоставлениеПользователей - ТаблицаЗначений - описание см. ВыгрузкаЗагрузкаДанных.ЗагрузитьДанныеИзАрхива().
//   ОбщиеДанные - Булево - признак того, что это общие данные.
//
Процедура ПодготовитьОбластьИзВыгрузки(Знач КодОбластиДанных, Знач ИдентификаторВыгрузки, 
		Знач СопоставлениеПользователей, Знач ОбщиеДанные = Ложь) Экспорт
	
	Попытка
		
		ДанныеЗаблокированы = Ложь;
		
		Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
			ВызватьИсключение(НСтр("ru = 'Недостаточно прав для выполнения операции'"));
		КонецЕсли;
		
		ОтборЗадания = Новый Структура;
		ОтборЗадания.Вставить("ИмяМетода", "РаботаВМоделиСервиса.ОчиститьОбластьДанных");
		ОтборЗадания.Вставить("Ключ"     , "1");
		ОтборЗадания.Вставить("ОбластьДанных", КодОбластиДанных);
		ОтборЗадания.Вставить("СостояниеЗадания", Перечисления.СостоянияЗаданий.Выполняется);
		ЗаданияОчиститьОбластьДанных = ОчередьЗаданий.ПолучитьЗадания(ОтборЗадания);
		// Если есть выполняемое задание на очистку области, текущее задание нужно перепланировать 
		Если ЗаданияОчиститьОбластьДанных.Количество() > 0 Тогда
			
			ДобавитьЗаданиеПодготовитьОбластьИзВыгрузки(КодОбластиДанных, ИдентификаторВыгрузки,
				СопоставлениеПользователей, ОбщиеДанные, Истина);
			
			Возврат;
		КонецЕсли;
		
		ИмяСобытия = РаботаВМоделиСервиса.СобытиеЖурналаРегистрацииПодготовкаОбластиДанных();

		Если ОбщиеДанные Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, КодОбластиДанных);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		КлючОбласти = РаботаВМоделиСервиса.СоздатьКлючЗаписиРегистраСведенийВспомогательныхДанных(
			РегистрыСведений.ОбластиДанных,
			Новый Структура(РаботаВМоделиСервиса.РазделительВспомогательныхДанных(), КодОбластиДанных));
		ЗаблокироватьДанныеДляРедактирования(КлючОбласти);
		
		ДанныеЗаблокированы = Истина;
		
		НачатьТранзакцию();
		Попытка

			Блокировка = Новый БлокировкаДанных;
			Элемент = Блокировка.Добавить("РегистрСведений.ОбластиДанных");
			Элемент.УстановитьЗначение("ОбластьДанныхВспомогательныеДанные", КодОбластиДанных);
			Элемент.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = КодОбластиДанных;
			МенеджерЗаписи.Прочитать();
			
			ПодходящиеСтатусыОД = Новый Массив;
			ПодходящиеСтатусыОД.Добавить(Перечисления.СтатусыОбластейДанных.ПустаяСсылка());
			ПодходящиеСтатусыОД.Добавить(Перечисления.СтатусыОбластейДанных.Удалена);

			Если НЕ МенеджерЗаписи.Выбран() Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 не найдена'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
					КодОбластиДанных);
					
				ВызватьИсключение(ТекстСообщения);
			ИначеЕсли ПодходящиеСтатусыОД.Найти(МенеджерЗаписи.Статус) = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'Статус области данных %1 не равен ""%2""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
					КодОбластиДанных, СтрСоединить(ПодходящиеСтатусыОД, """/"""));
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
			
		
		Если ТекущийРежимЗапуска() <> Неопределено Тогда
			ПользователиСлужебный.АвторизоватьТекущегоПользователя();
		КонецЕсли;
		
		ИмяФайлаВыгрузки = РаботаВМоделиСервиса.ПолучитьФайлИзХранилищаМенеджераСервиса(ИдентификаторВыгрузки);
		
		Если ИмяФайлаВыгрузки = Неопределено Тогда
			
			СообщениеОбОшибке = НСтр("ru = 'Нет файла начальных данных для области'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
			ТипСообщения = 
				СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОшибкаПодготовкиОбластиДанных();
				
			ОтправитьСообщениеОСостоянииОбластиДанных(ТипСообщения, КодОбластиДанных, СообщениеОбОшибке);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ВыгрузкаЗагрузкаОбластейДанных") Тогда
			
			РаботаВМоделиСервиса.ВызватьИсключениеОтсутствуетПодсистемаБТС("ТехнологияСервиса.ВыгрузкаЗагрузкаОбластейДанных");
			
		КонецЕсли;
		
		МодульВыгрузкаЗагрузкаОбластейДанных = ОбщегоНазначения.ОбщийМодуль("ВыгрузкаЗагрузкаОбластейДанных");
		
		Если Не МодульВыгрузкаЗагрузкаОбластейДанных.ВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИмяФайлаВыгрузки) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Требуется конвертация'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
			ТипСообщения = 
				СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОшибкаПодготовкиОбластиДанныхТребуетсяКонвертация();
			
			ДополнительныеСвойства = Новый Структура();
			ДополнительныеСвойства.Вставить("ИдентификаторВыгрузки", ИдентификаторВыгрузки);
			ДополнительныеСвойства.Вставить("ИмяКонфигурации", Метаданные.Имя);
			ДополнительныеСвойства.Вставить("ВерсияКонфигурации", Метаданные.Версия);
			
			ОтправитьСообщениеОСостоянииОбластиДанных(ТипСообщения, КодОбластиДанных, СообщениеОбОшибке, 
				ДополнительныеСвойства);
			РазблокироватьДанныеДляРедактирования(КлючОбласти);
			Если ОбщиеДанные Тогда
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользованиеКаталогаРасширенийВМоделиСервиса") Тогда
			ДанныеРасширений = КаталогРасширений.ПолучитьРасширенияДляНовойОбласти(КодОбластиДанных);
		Иначе 
			ДанныеРасширений = Неопределено;
		КонецЕсли;
		
		МодульВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьДанныхИзАрхива(ИмяФайлаВыгрузки,,, 
			СопоставлениеПользователей, ДанныеРасширений);		
		
		МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Используется;
		
		// Отправить сообщение о готовности области в менеджер сервиса.
		ТипСообщения = СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОбластьДанныхПодготовлена();
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(ТипСообщения);
		Сообщение.Body.Zone = МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные;
		
		НачатьТранзакцию();
		Попытка
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Попытка
			УдалитьФайлы(ИмяФайлаВыгрузки);
		Исключение
			ЗаписьЖурналаРегистрации(РаботаВМоделиСервиса.СобытиеЖурналаРегистрацииПодготовкаОбластиДанных(), 
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(КлючОбласти);
		
		Если ОбщиеДанные Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
	Исключение
		Если ДанныеЗаблокированы Тогда
			РазблокироватьДанныеДляРедактирования(КлючОбласти);
		КонецЕсли;
		
		Если ОбщиеДанные Тогда
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьЗаданиеПодготовитьОбластьИзВыгрузки(Знач КодОбластиДанных, Знач ИдентификаторВыгрузки,
	Знач СопоставлениеПользователей, Знач ОбщиеДанные, Отложенное = Ложь) Экспорт 
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(КодОбластиДанных);
	ПараметрыМетода.Добавить(ИдентификаторВыгрузки);
	ПараметрыМетода.Добавить(СопоставлениеПользователей);
	ПараметрыМетода.Добавить(ОбщиеДанные);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", "РаботаВМоделиСервисаБТС.ПодготовитьОбластьИзВыгрузки");
	ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
	Если ОбщиеДанные Тогда
		ПараметрыЗадания.Вставить("ОбластьДанных", -1);
	Иначе
		ПараметрыЗадания.Вставить("ОбластьДанных", КодОбластиДанных);
		ПараметрыЗадания.Вставить("Ключ", "1");
	КонецЕсли;
	ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
	Если Отложенное Тогда
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ТекущаяДатаСеанса() + 300);
	КонецЕсли;
	
	ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);

КонецПроцедуры

Процедура ПриОшибкеПодготовкиОбластиИзВыгрузки(ПараметрыЗадания, ИнформацияОбОшибке) Экспорт
	
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ПараметрыЗадания.Параметры[0]);
	
	ИмяСобытия = НСтр("ru = 'Область данных.Ошибка при загрузке из файла'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если ПараметрыЗадания.НомерПопытки < ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении Тогда
		ШаблонТекста = НСтр("ru = 'Ошибка подготовки области данных %1 из файла выгрузки.
                             |Номер попытки: %2'", КодЯзыка());
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ПараметрыЗадания.Параметры[0], ПараметрыЗадания.НомерПопытки);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , Текст);
	Иначе
		ШаблонТекста = НСтр("ru = 'Не удалось создать приложение %1 из файла выгрузки.'", КодЯзыка());
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ПараметрыЗадания.Параметры[0], ПараметрыЗадания.НомерПопытки);
		УведомитьМенеджерОшибкаПодготовкиОбласти(ПараметрыЗадания.Параметры[0], ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение, , , Текст);
	КонецЕсли;
	
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

Процедура ПрикрепитьОбластьДанных(Параметры) Экспорт
	
	КодОбластиДанных = Параметры.КодОбластиДанных;
	СписокПользователей = Параметры.СписокПользователей;
	ПредставлениеПриложения = Параметры.ПредставлениеПриложения;
	ЧасовойПоясПриложения = Параметры.ЧасовойПоясПриложения;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользованиеКаталогаРасширенийВМоделиСервиса") Тогда
		ДанныеРасширений = КаталогРасширений.ПолучитьРасширенияДляНовойОбласти(КодОбластиДанных);
	Иначе 
		ДанныеРасширений = Неопределено;
	КонецЕсли;
	
	Если ДанныеРасширений <> Неопределено И ДанныеРасширений.Свойство("РасширенияДляВосстановления")
		И ДанныеРасширений.РасширенияДляВосстановления.Количество() > 0 Тогда
		
		Если ДанныеРасширений.Свойство("КлючОбластиДанных") Тогда
			
			Константы.КлючОбластиДанных.Установить(ДанныеРасширений.КлючОбластиДанных);
			КаталогРасширений.ВосстановитьРасширенияВНовойОбласти(ДанныеРасширений.РасширенияДляВосстановления);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Установка параметров области данных.
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.ОбластиДанных");
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ШаблонСообщения = НСтр("ru = 'Область данных %1 не существует.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КодОбластиДанных);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Используется;
		КопияМенеджера = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(КопияМенеджера, МенеджерЗаписи);
		МенеджерЗаписи = КопияМенеджера;
		МенеджерЗаписи.Записать();
		
		// Создание администраторов в области.
		Для каждого ОписаниеПользователя Из СписокПользователей Цикл
			
			ЯзыкПользователя = ЯзыкПоКоду(ОписаниеПользователя.Language);
			
			Почта = "";
			Телефон = "";
			Если ЗначениеЗаполнено(ОписаниеПользователя.EMail) Тогда
				Почта = ОписаниеПользователя.EMail;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеПользователя.Phone) Тогда
				Телефон = ОписаниеПользователя.Phone;
			КонецЕсли;
			
			СтруктураАдресаЭП = СоставПочтовогоАдреса(Почта);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|    Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|    Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|    Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса";
			Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ОписаниеПользователя.UserServiceID);
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить("Справочник.Пользователи");
			Блокировка.Заблокировать();
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ПользовательОбластиДанных = Неопределено;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ПользовательОбластиДанных = Выборка.Ссылка;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПользовательОбластиДанных) Тогда
				ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
				ПользовательОбъект.ИдентификаторПользователяСервиса = ОписаниеПользователя.UserServiceID;
			Иначе
				ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
			КонецЕсли;
			
			ПользовательОбъект.Наименование = ОписаниеПользователя.FullName;
			
			ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
			
			ОбновитьТелефон(ПользовательОбъект, Телефон);
			
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			
			ОписаниеПользователяИБ.Имя = ОписаниеПользователя.Name;
			
			ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
			ОписаниеПользователяИБ.АутентификацияOpenID = Истина;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			
			ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = ОписаниеПользователя.StoredPasswordValue;
			
			ОписаниеПользователяИБ.Язык = ЯзыкПользователя;
			
			// Эти свойства поддерживаются с версии 1.0.3.7.
			СвойстваОС = Новый Структура("OSAuthentication, OSUser");
			ЗаполнитьЗначенияСвойств(СвойстваОС, ОписаниеПользователя);
			ОписаниеПользователяИБ.АутентификацияОС = СвойстваОС.OSAuthentication;
			ОписаниеПользователяИБ.ПользовательОС   = СвойстваОС.OSUser;
			
			Роли = Новый Массив;
			Роли.Добавить("ПолныеПрава");
			ОписаниеПользователяИБ.Роли = Роли;
			
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			ПользовательОбъект.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
				НСтр("ru = 'Создание администратора области данных из менеджера сервиса.'"));
			
			ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
			ПользовательОбъект.Записать();
			
			ПользовательОбластиДанных = ПользовательОбъект.Ссылка;
			
			Если ПользователиСлужебный.ЗапретРедактированияРолей()
				И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			
				МодульУправлениеДоступомСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебныйВМоделиСервиса");
				МодульУправлениеДоступомСлужебныйВМоделиСервиса.УстановитьПринадлежностьПользователяКГруппеАдминистраторы(ПользовательОбластиДанных, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ПредставлениеПриложения) Тогда
			ОбновитьСвойстваПредопределенныхУзлов(ПредставлениеПриложения);
		КонецЕсли;
	
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОбластьДанныхГотоваКИспользованию());
		Сообщение.Body.Zone = КодОбластиДанных;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(Сообщение, РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(), Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ПроверитьНеобходимостьИПодключитьКСистемеВзаимодействия(Параметры);
	
	ОбновитьПараметрыТекущейОбластиДанных(ПредставлениеПриложения, ЧасовойПоясПриложения);
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	
КонецПроцедуры

// @skip-warning ПустойМетод - особенность реализации.
//
Процедура ПроверитьНеобходимостьИПодключитьКСистемеВзаимодействия(ПараметрыПрикрепленияОбласти)
	
КонецПроцедуры

Процедура ОтправитьСообщениеОСостоянииОбластиДанных(Знач ТипСообщения, Знач КодОбластиДанных, Знач СообщениеОбОшибке, ДополнительныеСвойства = Неопределено)
	
	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(ТипСообщения);
	Сообщение.Body.Zone = КодОбластиДанных;
	Если Сообщение.Body.Свойства().Получить("ErrorDescription") <> Неопределено Тогда
		Сообщение.Body.ErrorDescription = СообщениеОбОшибке;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДополнительныеСвойства) Тогда
		Сообщение.AdditionalInfo = СериализаторXDTO.ЗаписатьXDTO(ДополнительныеСвойства);
	КонецЕсли;
	НачатьТранзакцию();
	Попытка
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ЯзыкПоКоду(Знач КодЯзыка) Экспорт
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		
		Для каждого Язык Из Метаданные.Языки Цикл
			Если Язык.КодЯзыка = КодЯзыка Тогда
				Возврат Язык.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Неподдерживаемый код языка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Язык);
		ВызватьИсключение(ТекстСообщения);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция СоставПочтовогоАдреса(Знач АдресЭП) Экспорт
	
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		
		Попытка
			СтруктураАдресаЭП = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Указан некорректный адрес электронной почты: %1
				|Ошибка: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, АдресЭП, ИнформацияОбОшибке().Описание);
			ВызватьИсключение(ТекстСообщения);
		КонецПопытки;
		
		Возврат СтруктураАдресаЭП;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьАдресЭлектроннойПочты(Знач ПользовательОбъект, Знач Адрес, Знач СтруктураАдресаЭП) Экспорт
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтруктураАдресаЭП = Неопределено Тогда
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ПользовательОбъект.КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
			СтрокаТабличнойЧасти.Вид = ВидКИ;
		КонецЕсли;
		СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаТабличнойЧасти.Представление = Адрес;
		
		Если СтруктураАдресаЭП.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.АдресЭП = СтруктураАдресаЭП[0].Адрес;
			
			Поз = СтрНайти(СтрокаТабличнойЧасти.АдресЭП, "@");
			Если Поз <> 0 Тогда
				СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьТелефон(Знач ПользовательОбъект, Знач Телефон) Экспорт
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
		СтрокаТабличнойЧасти.Вид = ВидКИ;
	КонецЕсли;
	СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаТабличнойЧасти.Представление = Телефон;
	
КонецПроцедуры

Процедура ОбновитьСвойстваПредопределенныхУзлов(Знач Наименование) Экспорт
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ОбменДаннымиПовтИсп.ПланОбменаИспользуетсяВМоделиСервиса(ПланОбмена.Имя) Тогда
			
			ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
			
			СвойстваУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотУзел, "Код, Наименование");
			
			Если ПустаяСтрока(СвойстваУзла.Код) Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Код = СообщенияУдаленногоАдминистрированияРеализация.КодУзлаПланаОбменаВСервисе(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
				ЭтотУзелОбъект.Наименование = Наименование;
				ЭтотУзелОбъект.Записать();
				
			ИначеЕсли СвойстваУзла.Наименование <> Наименование Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Наименование = Наименование;
				ЭтотУзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПараметрыТекущейОбластиДанных(Знач Представление, Знач ЧасовойПояс) Экспорт
	
	Константы.ПредставлениеОбластиДанных.Установить(Представление);
	Константы.ЧасовойПоясОбластиДанных.Установить(ЧасовойПояс);
	
	Если ПолучитьЧасовойПоясИнформационнойБазы() <> ЧасовойПояс Тогда
		
		ВнешнийМонопольныйРежим = МонопольныйРежим();
		
		Если ВнешнийМонопольныйРежим Тогда
			
			ОбластьЗаблокирована = Истина;
			
		Иначе
			
			Попытка
				
				УстановитьМонопольныйРежим(Истина);
				ОбластьЗаблокирована = Истина;
				
			Исключение
				
				ОбластьЗаблокирована = Ложь;
				
				ШаблонСообщения = НСтр("ru = 'Не удалось заблокировать область данных для установки часового пояса ""%1""'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЧасовойПояс);
				ЗаписьЖурналаРегистрации(СообщенияУдаленногоАдминистрированияРеализация.СобытиеЖурналаРегистрацииУдаленноеАдминистрированиеУстановитьПараметры(),
					УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ОбластьЗаблокирована Тогда
			
			Если ЗначениеЗаполнено(ЧасовойПояс) Тогда
				
				УстановитьЧасовойПоясИнформационнойБазы(ЧасовойПояс);
				
			Иначе
				
				УстановитьЧасовойПоясИнформационнойБазы();
				
			КонецЕсли;
			
			Если НЕ ВнешнийМонопольныйРежим Тогда
				
				УстановитьМонопольныйРежим(Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие из КлючИЗначение:
//   * Ключ - Строка - псевдоним метода, например ОчиститьОбластьДанных.
//   * Значение - Строка - имя метода для вызова, например "РаботаВМоделиСервиса.ОчиститьОбластьДанных".
//   
// Пример:
//    В качестве значения можно указать Неопределено, 
//    в этом случае считается что имя совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("РаботаВМоделиСервисаБТС.ПодготовитьИПрикрепитьОбластьДанных");
	СоответствиеИменПсевдонимам.Вставить("РаботаВМоделиСервисаБТС.ПодготовитьОбластьИзВыгрузки");
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииОбработчиковОшибок.
Процедура ПриОпределенииОбработчиковОшибок(ОбработчикиОшибок) Экспорт
	
	ОбработчикиОшибок.Вставить("РаботаВМоделиСервисаБТС.ПодготовитьОбластьИзВыгрузки", "РаботаВМоделиСервисаБТС.ПриОшибкеПодготовкиОбластиИзВыгрузки");
	
КонецПроцедуры

Процедура УведомитьМенеджерОшибкаПодготовкиОбласти(КодОбластиДанных, СообщениеОбОшибке)
	
	МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = КодОбластиДанных;
	МенеджерЗаписи.Прочитать();
	
	ЗаписьЖурналаРегистрации(РаботаВМоделиСервиса.СобытиеЖурналаРегистрацииПодготовкаОбластиДанных(), 
			УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
	МенеджерЗаписи.ОшибкаОбработки = Истина;
	ТипСообщения = СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.СообщениеОшибкаПодготовкиОбластиДанных();
	
	// Отправить сообщение о готовности области в менеджер сервиса.
	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(ТипСообщения);
	Сообщение.Body.Zone = МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные;
	Сообщение.Body.ErrorDescription = СообщениеОбОшибке;

	НачатьТранзакцию();
	Попытка
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
		
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция КодЯзыка()
	
	Возврат ОбщегоНазначения.КодОсновногоЯзыка();
	
КонецФункции

#Область Криптография

Функция Хеш(ДвоичныеДанные, Тип)
	
	Хеширование = Новый ХешированиеДанных(Тип);
	Хеширование.Добавить(ДвоичныеДанные);
	
	Возврат Хеширование.ХешСумма;
		
КонецФункции

Функция HMAC(Знач Ключ, Знач Данные, Тип, РазмерБлока)
	
	Если Ключ.Размер() > РазмерБлока Тогда
		Ключ = Хеш(Ключ, Тип);
	КонецЕсли;
	
	Если Ключ.Размер() < РазмерБлока Тогда
		Ключ = ПолучитьHexСтрокуИзДвоичныхДанных(Ключ);
		Ключ = Лев(Ключ + ПовторитьСтроку("00", РазмерБлока), РазмерБлока * 2);
	КонецЕсли;
	
	Ключ = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзHexСтроки(Ключ));
	
	ipad = ПолучитьБуферДвоичныхДанныхИзHexСтроки(ПовторитьСтроку("36", РазмерБлока));
	opad = ПолучитьБуферДвоичныхДанныхИзHexСтроки(ПовторитьСтроку("5c", РазмерБлока));
	
	ipad.ЗаписатьПобитовоеИсключительноеИли(0, Ключ);
	ikeypad = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ipad);
	
	opad.ЗаписатьПобитовоеИсключительноеИли(0, Ключ);
	okeypad = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(opad);
	
	Возврат Хеш(СклеитьДвоичныеДанные(okeypad, Хеш(СклеитьДвоичныеДанные(ikeypad, Данные), Тип)), Тип);
	
КонецФункции

Функция СклеитьДвоичныеДанные(ДвоичныеДанные1, ДвоичныеДанные2)
	
	МассивДвоичныхДанных = Новый Массив;
	МассивДвоичныхДанных.Добавить(ДвоичныеДанные1);
	МассивДвоичныхДанных.Добавить(ДвоичныеДанные2);
	
	Возврат СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
КонецФункции

Функция ПовторитьСтроку(Строка, Количество)
	
	Части = Новый Массив(Количество);
	Для к = 1 По Количество Цикл
		Части.Добавить(Строка);
	КонецЦикла;
	
	Возврат СтрСоединить(Части, "");
	
КонецФункции

#КонецОбласти

// Функция преобразования значений JSON
// см. функцию глобального контекста - ЗаписатьJSON.
//
// Возвращаемое значение:
//  Строка - УникальныйИдентификатор -> Строка(УникальныйИдентификатор)
//
Функция ПреобразованиеЗначенийJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт 
	
    Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
        Возврат Строка(Значение);
    КонецЕсли; 
    
    Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область Проверки

Функция КонтрольИсключенияРазделенныхОбъектовВКонтролирующихПодписках(ВызыватьИсключение = Истина) Экспорт
	
	ПравилаКонтроляМетаданных = Новый Соответствие;
	
	ПравилаКонтроляМетаданных.Вставить(Метаданные.Константы, "КонстантаМенеджерЗначения.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.Справочники, "СправочникОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.Документы, "ДокументОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.БизнесПроцессы, "БизнесПроцессОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.Задачи, "ЗадачаОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.ПланыВидовРасчета, "ПланВидовРасчетаОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.ПланыВидовХарактеристик, "ПланВидовХарактеристикОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.ПланыОбмена, "ПланОбменаОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.ПланыСчетов, "ПланСчетовОбъект.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.РегистрыБухгалтерии, "РегистрБухгалтерииНаборЗаписей.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.РегистрыНакопления, "РегистрНакопленияНаборЗаписей.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.РегистрыРасчета, "РегистрРасчетаНаборЗаписей.%1");
	ПравилаКонтроляМетаданных.Вставить(Метаданные.РегистрыСведений, "РегистрСведенийНаборЗаписей.%1");
	
	СтандартныеРазделители = Новый Массив; // Массив Из ОбъектМетаданных
	СтандартныеРазделители.Добавить(Метаданные.ОбщиеРеквизиты.ОбластьДанныхОсновныеДанные);
	СтандартныеРазделители.Добавить(Метаданные.ОбщиеРеквизиты.ОбластьДанныхВспомогательныеДанные);
	
	КонтрольныеПроцедуры = Новый Массив;
	КонтрольныеПроцедуры.Добавить(Метаданные.ПодпискиНаСобытия.КонтрольНеразделенныхНаборовЗаписейПриЗаписиТехнологияСервиса.Обработчик);
	КонтрольныеПроцедуры.Добавить(Метаданные.ПодпискиНаСобытия.КонтрольНеразделенныхОбъектовПриЗаписиТехнологияСервиса.Обработчик);
	
	КонтролирующиеПодписки = Новый Массив; // Массив Из ОбъектМетаданныхПодпискаНаСобытие
	Для Каждого ПодпискаНаСобытие Из Метаданные.ПодпискиНаСобытия Цикл
		Если КонтрольныеПроцедуры.Найти(ПодпискаНаСобытие.Обработчик) <> Неопределено Тогда
			КонтролирующиеПодписки.Добавить(ПодпискаНаСобытие);
		КонецЕсли;
	КонецЦикла;
	
	НарушенияКонтроляИсключенияРазделенныхОбъектовВКонтролирующихПодписках = Новый Массив();
	
	ОбъектыМетаданныхСНарушениями = Новый Массив;
	
	Для Каждого ПравилоКонтроляМетаданных Из ПравилаКонтроляМетаданных Цикл
		
		КонтролируемыеОбъектыМетаданных = ПравилоКонтроляМетаданных.Ключ; // Массив Из ОбъектМетаданных
		КонструкторТипаОбъектовМетаданных = ПравилоКонтроляМетаданных.Значение;
		
		Для Каждого КонтролируемыйОбъектМетаданных Из КонтролируемыеОбъектыМетаданных Цикл
			
			
			// 2. Проверка неразделенных объектов метаданных на включение в состав контролирующих
			// подписок на события.
			
			Если ЗначениеЗаполнено(КонструкторТипаОбъектовМетаданных) Тогда
				
				ТипОбъектаМетаданных = Тип(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(КонструкторТипаОбъектовМетаданных, КонтролируемыйОбъектМетаданных.Имя));
				
				ОбеспеченКонтрольИсключенияРазделенныхОбъектовВНеразделенныеПодписки = Истина;
				
				Для Каждого КонтролирующаяПодписка Из КонтролирующиеПодписки Цикл
					
					Если КонтролирующаяПодписка.Источник.СодержитТип(ТипОбъектаМетаданных) Тогда
						Для Каждого СтандартныйРазделитель Из СтандартныеРазделители Цикл
							Если РаботаВМоделиСервиса.ЭтоРазделенныйОбъектМетаданных(КонтролируемыйОбъектМетаданных, СтандартныйРазделитель.Имя) Тогда
								ОбеспеченКонтрольИсключенияРазделенныхОбъектовВНеразделенныеПодписки = Ложь;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ОбеспеченКонтрольИсключенияРазделенныхОбъектовВНеразделенныеПодписки Тогда
					НарушенияКонтроляИсключенияРазделенныхОбъектовВКонтролирующихПодписках.Добавить(КонтролируемыйОбъектМетаданных);
					ОбъектыМетаданныхСНарушениями.Добавить(КонтролируемыйОбъектМетаданных);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВызываемыеИсключения = Новый Массив();
	
	Если НарушенияКонтроляИсключенияРазделенныхОбъектовВКонтролирующихПодписках.Количество() > 0 Тогда
		
		ТекстИсключения = "";
		
		Для Каждого НарушающийОбъектМетаданных Из НарушенияКонтроляИсключенияРазделенныхОбъектовВКонтролирующихПодписках Цикл
			
			Если Не ПустаяСтрока(ТекстИсключения) Тогда
				ТекстИсключения = ТекстИсключения + ", ";
			КонецЕсли;
			
			ТекстИсключения = ТекстИсключения + НарушающийОбъектМетаданных.ПолноеИмя();
			
		КонецЦикла;
		
		ТекстПодписок = "";
		Для Каждого КонтролирующаяПодписка Из КонтролирующиеПодписки Цикл
			
			Если Не ПустаяСтрока(ТекстПодписок) Тогда
				ТекстПодписок = ТекстПодписок + ", ";
			КонецЕсли;
			
			ТекстПодписок = ТекстПодписок + КонтролирующаяПодписка.Имя;
			
		КонецЦикла;
		
		ВызываемыеИсключения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Разделенные объекты метаданных конфигурации не должны входить в состав подписок на события (%1).
                  |Следующие объекты не удовлетворяют этому критерию: %2'"),
			ТекстПодписок, ТекстИсключения));
		
	КонецЕсли;
	
	РезультирующееИсключение = "";
	Итератор = 1;
	
	Для Каждого ВызываемоеИсключение Из ВызываемыеИсключения Цикл
		
		Если Не ПустаяСтрока(РезультирующееИсключение) Тогда
			РезультирующееИсключение = РезультирующееИсключение + Символы.ПС + Символы.ВК;
		КонецЕсли;
		
		РезультирующееИсключение = РезультирующееИсключение + Формат(Итератор, "ЧДЦ=0; ЧГ=0") + ". " + ВызываемоеИсключение;
		Итератор = Итератор + 1;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(РезультирующееИсключение) Тогда
		
		РезультирующееИсключение = НСтр("ru = 'Обнаружены ошибки в структуре метаданных конфигурации:'") + Символы.ПС + Символы.ВК + РезультирующееИсключение;
		
		Если ВызыватьИсключение Тогда
			
			ВызватьИсключение РезультирующееИсключение;
			
		Иначе
			
			Возврат Новый Структура("ОбъектыМетаданных, ТекстИсключения", ОбъектыМетаданныхСНарушениями, РезультирующееИсключение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

