///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Простая настройка.
	ДанныеПодсистемыБазоваяФункциональность = Истина;
	ДанныеПодсистемыПользователи = Истина;
	ДанныеПодсистемыУправлениеДоступом = Истина;
	ДанныеПодсистемыВариантыОтчетов = Истина;
	ДанныеПодсистемыИнформацияПриЗапуске = Истина;
	ДанныеПодсистемыКонтрольВеденияУчета = Истина;
	
	// Сложная настройка.
	
	// СтандартныеПодсистемы БазоваяФункциональность
	ИдентификаторыОбъектовМетаданных = Истина;
	ИдентификаторыОбъектовРасширений = Истина;
	КэшПрограммныхИнтерфейсов = Истина;
	
	// СтандартныеПодсистемы Пользователи
	ПроверитьНазначениеРолей = Истина;
	СоставыГруппПользователей = Истина;
	
	// СтандартныеПодсистемы УправлениеДоступом
	ПраваРолей = Истина;
	ЗависимостиПрав = Истина;
	СвойстваВидовДоступа = Истина;
	ОписаниеПоставляемыхПрофилейГруппДоступа = Истина;
	ОписаниеВозможныхПравДляНастройкиПравОбъектов = Истина;
	ПоставляемыеПрофилиГруппДоступа = Истина;
	РолиПользователейИнформационнойБазы = Истина;
	ПараметрыОграниченияДоступа = Истина;
	ТаблицыГруппДоступа = Истина;
	ЗначенияГруппДоступа = Истина;
	НаследованиеНастроекПравОбъектов = Истина;
	НастройкиПравОбъектов = Истина;
	ГруппыЗначенийДоступа = Истина;
	НаборыЗначенийДоступа = Истина;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	ОтчетыКонфигурации  = Истина;
	ОтчетыРасширений    = Истина;
	ИндексПоискаОтчетов = Истина;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	ПакетыИнформацииПриЗапуске = Истина;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	ПравилаПроверкиУчета = Истина;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			СеансЗапущенБезРазделителей = МодульРаботаВМоделиСервиса.СеансЗапущенБезРазделителей();
		Иначе
			СеансЗапущенБезРазделителей = Истина;
		КонецЕсли;
		
		Если СеансЗапущенБезРазделителей Тогда
			ОбновитьНеразделенныеДанные = Истина;
		Иначе
			ОбновитьРазделенныеДанные = Истина;
		КонецЕсли;
		
	Иначе
		ОбновитьНеразделенныеДанные = Истина;
		ОбновитьРазделенныеДанные   = Истина;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.РазделениеВключено()
	 ИЛИ НЕ ОбновитьНеразделенныеДанные Тогда
		
		Элементы.ОбластьДанных.Видимость                = Ложь;
		Элементы.ВойтиВУказаннуюОбластьДанных.Видимость = Ложь;
		Элементы.ТекущаяОбластьДанных.Видимость         = Ложь;
		Элементы.ВыйтиИзТекущейОбластиДанных.Видимость  = Ложь;
	КонецЕсли;
	
	ОбновитьТекущуюОбластьДанных();
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Элементы.ПодсистемаУправлениеДоступом.Видимость = Ложь;
		Элементы.ДанныеПодсистемыУправлениеДоступом.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		Элементы.ДанныеПодсистемыВариантыОтчетов.Видимость = Ложь;
		Элементы.ПодсистемаВариантыОтчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ИнформацияПриЗапуске") Тогда
		Элементы.ДанныеПодсистемыИнформацияПриЗапуске.Видимость = Ложь;
		Элементы.ПодсистемаИнформацияПриЗапуске.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Элементы.ДанныеПодсистемыКонтрольВеденияУчета.Видимость = Ложь;
		Элементы.ПодсистемаКонтрольВеденияУчета.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьВидимостьПоРежимуНастройки();
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьВидимостьПоРежимуНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимНастройкиПриИзменении(Элемент)
	
	ОбновитьВидимостьПоРежимуНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВойтиВУказаннуюОбластьДанных(Команда)
	
	ОбновитьТекущуюОбластьДанных();
	
	Если ОбластьДанных = ТекущаяОбластьДанных Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вход в указанную область данных уже выполнен.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущаяОбластьДанных <> Неопределено Тогда
		Отказ = Ложь;
		ВыйтиИзОбластиДанных(Отказ);
		Если Отказ Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не удалось выйти из текущей области данных.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВойтиВОбластьДанных();
	
	ОбновитьТекущуюОбластьДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзТекущейОбластиДанных(Команда)
	
	ОбновитьТекущуюОбластьДанных();
	
	Если ТекущаяОбластьДанных = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вход в область данных еще не выполнен.'"));
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ВыйтиИзОбластиДанных(Отказ);
	Если Отказ Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось выйти из текущей области данных.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбновитьТекущуюОбластьДанных() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Область данных не изменилась.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновление(Команда)
	
	ДанныеОтмечены = Ложь;
	
	Если НЕ ЗначениеЗаполнено(РежимНастройки) Тогда
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	     И (    ИдентификаторыОбъектовМетаданных И Элементы.ИдентификаторыОбъектовМетаданных.Доступность
	        ИЛИ ИдентификаторыОбъектовРасширений И Элементы.ИдентификаторыОбъектовРасширений.Доступность
	        ИЛИ КэшПрограммныхИнтерфейсов        И Элементы.КэшПрограммныхИнтерфейсов.Доступность) Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	     И (    ПроверитьНазначениеРолей И Элементы.ПроверитьНазначениеРолей.Доступность
	        ИЛИ СоставыГруппПользователей    И Элементы.СоставыГруппПользователей.Доступность) Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка"
		   И (    ПраваРолей                                    И Элементы.ПраваРолей.Доступность
		      ИЛИ ЗависимостиПрав                               И Элементы.ЗависимостиПрав.Доступность
		      ИЛИ СвойстваВидовДоступа                          И Элементы.СвойстваВидовДоступа.Доступность
		      ИЛИ ОписаниеПоставляемыхПрофилейГруппДоступа      И Элементы.ОписаниеПоставляемыхПрофилейГруппДоступа.Доступность
		      ИЛИ ОписаниеВозможныхПравДляНастройкиПравОбъектов И Элементы.ОписаниеВозможныхПравДляНастройкиПравОбъектов.Доступность
		      
		      ИЛИ ПоставляемыеПрофилиГруппДоступа     И Элементы.ПоставляемыеПрофилиГруппДоступа.Доступность
		      ИЛИ РолиПользователейИнформационнойБазы И Элементы.РолиПользователейИнформационнойБазы.Доступность
		      ИЛИ ПараметрыОграниченияДоступа         И Элементы.ПараметрыОграниченияДоступа.Доступность
		      ИЛИ ТаблицыГруппДоступа                 И Элементы.ТаблицыГруппДоступа.Доступность
		      ИЛИ ЗначенияГруппДоступа                И Элементы.ЗначенияГруппДоступа.Доступность
		      ИЛИ НаследованиеНастроекПравОбъектов    И Элементы.НаследованиеНастроекПравОбъектов.Доступность
		      ИЛИ НастройкиПравОбъектов               И Элементы.НастройкиПравОбъектов.Доступность
		      ИЛИ ГруппыЗначенийДоступа               И Элементы.ГруппыЗначенийДоступа.Доступность
		      ИЛИ НаборыЗначенийДоступа               И Элементы.НаборыЗначенийДоступа.Доступность) Тогда
			
			ДанныеОтмечены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
		 ИЛИ РежимНастройки = "СложнаяНастройка"
		   И (    ОтчетыКонфигурации  И Элементы.ОтчетыКонфигурации.Доступность
		      ИЛИ ОтчетыРасширений    И Элементы.ОтчетыРасширений.Доступность
		      ИЛИ ИндексПоискаОтчетов И Элементы.ИндексПоискаОтчетов.Доступность) Тогда
		
			ДанныеОтмечены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыИнформацияПриЗапуске
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	   И ПакетыИнформацииПриЗапуске И Элементы.ПакетыИнформацииПриЗапуске.Доступность Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыКонтрольВеденияУчета
	 ИЛИ РежимНастройки = "СложнаяНастройка"
	   И ПравилаПроверкиУчета И Элементы.ПравилаПроверкиУчета.Доступность Тогда
		
		ДанныеОтмечены = Истина;
	КонецЕсли;
	
	Если НЕ ДанныеОтмечены Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отметьте данные, которые нужно обновить.'"));
		Возврат;
	КонецЕсли;
	
	// Установка обычного цвета всех пунктов.
	ВыделитьИзменения(
		"ДанныеПодсистемыБазоваяФункциональность,
		|ИдентификаторыОбъектовМетаданных,
		|ИдентификаторыОбъектовРасширений,
		|КэшПрограммныхИнтерфейсов,
		|
		|ДанныеПодсистемыПользователи,
		|ПроверитьНазначениеРолей,
		|СоставыГруппПользователей,
		|
		|ДанныеПодсистемыВариантыОтчетов,
		|ОтчетыКонфигурации,
		|ОтчетыРасширений,
		|ИндексПоискаОтчетов,
		|
		|ДанныеПодсистемыИнформацияПриЗапуске,
		|ПакетыИнформацииПриЗапуске,
		|
		|ДанныеПодсистемыКонтрольВеденияУчета,
		|ПравилаПроверкиУчета,
		|
		|ДанныеПодсистемыУправлениеДоступом,
		|ПраваРолей,
		|ЗависимостиПрав,
		|СвойстваВидовДоступа,
		|ОписаниеПоставляемыхПрофилейГруппДоступа,
		|ОписаниеВозможныхПравДляНастройкиПравОбъектов,
		|ПоставляемыеПрофилиГруппДоступа,
		|РолиПользователейИнформационнойБазы,
		|ПараметрыОграниченияДоступа,
		|ТаблицыГруппДоступа,
		|ЗначенияГруппДоступа,
		|НаследованиеНастроекПравОбъектов,
		|НастройкиПравОбъектов,
		|ГруппыЗначенийДоступа,
		|НаборыЗначенийДоступа",
		Ложь);
	
	ЕстьИзменения = Ложь;
	ВыполнитьОбновлениеНаСервере(ЕстьИзменения);
	
	Если ЕстьИзменения = Неопределено Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'После открытия обработки изменилась текущая область данных.
			           |Если нужно проверьте настройки и повторите команду.'"));
		Возврат;
	КонецЕсли;
	
	Если ОбновитьНеразделенныеДанные И ОбновитьРазделенныеДанные Тогда
		
		Если ЕстьИзменения Тогда
			Текст = НСтр("ru = 'Обновление выполнено успешно.'");
		Иначе
			Текст = НСтр("ru = 'Обновление не требуется.'");
		КонецЕсли;
		
	ИначеЕсли ОбновитьНеразделенныеДанные Тогда
		
		Если ЕстьИзменения Тогда
			Текст = НСтр("ru = 'Обновление неразделенных данных выполнено успешно.'");
		Иначе
			Текст = НСтр("ru = 'Обновление неразделенных данных не требуется.'");
		КонецЕсли;
	Иначе
		Если ЕстьИзменения Тогда
			Текст = НСтр("ru = 'Обновление разделенных данных выполнено успешно.'");
		Иначе
			Текст = НСтр("ru = 'Обновление разделенных данных не требуется.'");
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьОбновлениеНаСервере(ЕстьИзменения)
	
	Если ОбновитьТекущуюОбластьДанных() Тогда
		ЕстьИзменения = Неопределено;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ВыполнитьОбновлениеНеразделенныхДанных(ЕстьИзменения);
		ВыполнитьОбновлениеРазделенныхДанных(ЕстьИзменения);
	Иначе
		Если ОбновитьНеразделенныеДанные Тогда
			ВернутьсяВТекущуюОбластьДанных = Ложь;
			
			Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
				// Временный выход из области данных.
				ВернутьсяВТекущуюОбластьДанных = Истина;
				УстановитьРазделениеСеанса(Ложь);
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;
			
			Попытка
				// Обновление общих данных.
				ВыполнитьОбновлениеНеразделенныхДанных(ЕстьИзменения);
			Исключение
				Если ВернутьсяВТекущуюОбластьДанных Тогда
					УстановитьРазделениеСеанса(Истина, ТекущаяОбластьДанных);
				КонецЕсли;
				ОбновитьПовторноИспользуемыеЗначения();
				ВызватьИсключение;
			КонецПопытки;
			
			Если ВернутьсяВТекущуюОбластьДанных Тогда
				УстановитьРазделениеСеанса(Истина, ТекущаяОбластьДанных);
				ОбновитьПовторноИспользуемыеЗначения();
			КонецЕсли;
		КонецЕсли;
		
		Если ОбновитьРазделенныеДанные Тогда
			// Обновление данных области данных.
			ВыполнитьОбновлениеРазделенныхДанных(ЕстьИзменения);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТекущуюОбластьДанных();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеНеразделенныхДанных(ЕстьОбщиеИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИдентификаторыОбъектовМетаданных Тогда
		
		ЕстьИзменения = Ложь;
		Справочники["ИдентификаторыОбъектовМетаданных"].ОбновитьДанныеСправочника(ЕстьИзменения);
		
		Если ЕстьИзменения Тогда
			ЕстьОбщиеИзменения = Истина;
			ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, ИдентификаторыОбъектовМетаданных");
		КонецЕсли;
	КонецЕсли;
	
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И КэшПрограммныхИнтерфейсов Тогда
		
		ЕстьИзменения = Ложь;
		ОчиститьКэшПрограммныхИнтерфейсов(ЕстьИзменения);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
			
			МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
			Если МодульПодключаемыеКоманды.ОперативноеОбновлениеОбщихДанныхКонфигурации().ЕстьИзменения Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;
			Если МодульПодключаемыеКоманды.ПриЗаполненииВсехПараметровРаботыРасширений().ЕстьИзменения Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		
		Если ЕстьИзменения Тогда
			ЕстьОбщиеИзменения = Истина;
			ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, КэшПрограммныхИнтерфейсов");
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ПроверитьНазначениеРолей Тогда
		
		Пользователи.ПроверитьНазначениеРолей(Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
	
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ПраваРолей Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ПраваРолей"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПраваРолей");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ЗависимостиПрав Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ЗависимостиПравДоступа"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ЗависимостиПрав");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И СвойстваВидовДоступа Тогда
			
			ЕстьИзменения = Ложь;
			МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
			МодульУправлениеДоступомСлужебный.ОбновитьОписаниеСвойствВидовДоступа(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, СвойстваВидовДоступа");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ОписаниеПоставляемыхПрофилейГруппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			Справочники["ПрофилиГруппДоступа"].ОбновитьСоставПредопределенныхПрофилей(ЕстьИзменения);
			Справочники["ПрофилиГруппДоступа"].ОбновитьОписаниеПоставляемыхПрофилей(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ОписаниеПоставляемыхПрофилейГруппДоступа");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ОписаниеВозможныхПравДляНастройкиПравОбъектов Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НастройкиПравОбъектов"].ОбновитьВозможныеПраваДляНастройкиПравОбъектов(
				ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ОписаниеВозможныхПравДляНастройкиПравОбъектов");
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		
		Настройки = МодульВариантыОтчетов.ПараметрыОбновленияНастроек();
		Настройки.ОбщиеДанные = Истина; // Предопределенные.
		Настройки.РазделенныеДанные = Ложь;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыКонфигурации Тогда
			
			Настройки.Конфигурация = Истина;
			Настройки.Расширения = Ложь;
			Настройки.Оперативное = Истина; // Обновление представлений и др.
			Настройки.Отложенное = Ложь;
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			Если Обновление.ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ОтчетыКонфигурации.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
			
			Если РазрешеноИндексированиеНеразделенныхДанных () Тогда
				Настройки.Конфигурация = Истина;
				Настройки.Расширения = Ложь;
				Настройки.Оперативное = Ложь;
				Настройки.Отложенное = Истина; // Обновление индекса поиска по схеме СКД.
				Настройки.ИндексироватьСхему = Истина; // Принудительное перестроение индекса.
				Обновление = МодульВариантыОтчетов.Обновить(Настройки);
				
				Если Обновление.ЕстьИзменения Тогда
					ЕстьОбщиеИзменения = Истина;
					ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ИндексПоискаОтчетов.Имя);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ИнформацияПриЗапуске") Тогда
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыИнформацияПриЗапуске
			ИЛИ РежимНастройки = "СложнаяНастройка" И ПакетыИнформацииПриЗапуске Тогда
			
			МодульИнформацияПриЗапуске = ОбщегоНазначения.ОбщийМодуль("ИнформацияПриЗапуске");
			Обновление = МодульИнформацияПриЗапуске.Обновить();
			Если Обновление.ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыИнформацияПриЗапуске.Имя + "," + Элементы.ПакетыИнформацииПриЗапуске.Имя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыКонтрольВеденияУчета
			ИЛИ РежимНастройки = "СложнаяНастройка" И ПравилаПроверкиУчета Тогда
			
			ЕстьИзменения = Ложь;
			
			МодульКонтрольВеденияУчетаСлужебный = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчетаСлужебный");
			МодульКонтрольВеденияУчетаСлужебный.ОбновитьПараметрыПроверокУчета(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыКонтрольВеденияУчета.Имя + "," + Элементы.ПравилаПроверкиУчета.Имя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеРазделенныхДанных(ЕстьОбщиеИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыБазоваяФункциональность
	 ИЛИ РежимНастройки = "СложнаяНастройка" И ИдентификаторыОбъектовРасширений Тогда
		
		ЕстьИзменения = Ложь;
		Справочники["ИдентификаторыОбъектовРасширений"].ОбновитьДанныеСправочника(ЕстьИзменения);
		
		Если ЕстьИзменения Тогда
			ЕстьОбщиеИзменения = Истина;
			ВыделитьИзменения("ДанныеПодсистемыБазоваяФункциональность, ИдентификаторыОбъектовРасширений");
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы Пользователи
	Если РежимНастройки = ""
	 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыПользователи
	 ИЛИ РежимНастройки = "СложнаяНастройка" И СоставыГруппПользователей Тогда
		
		ЕстьИзменения = Ложь;
		РегистрыСведений["СоставыГруппПользователей"].ОбновитьДанныеРегистра(ЕстьИзменения);
		
		Если ЕстьИзменения Тогда
			ЕстьОбщиеИзменения = Истина;
			ВыделитьИзменения("ДанныеПодсистемыПользователи, СоставыГруппПользователей");
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ПоставляемыеПрофилиГруппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			Справочники["ГруппыДоступа"].ПометитьНаУдалениеГруппыДоступаПомеченныхПрофилей(ЕстьИзменения);
			Справочники["ПрофилиГруппДоступа"].ОбновитьПоставляемыеПрофили(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПоставляемыеПрофилиГруппДоступа");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И РолиПользователейИнформационнойБазы Тогда
			
			ЕстьИзменения = Ложь;
			МодульУправлениеДоступомСлужебный.ОбновитьРолиПользователей(, , ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, РолиПользователейИнформационнойБазы");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ПараметрыОграниченияДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ПараметрыОграниченияДоступа"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ПараметрыОграниченияДоступа");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ТаблицыГруппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ТаблицыГруппДоступа"].ОбновитьДанныеРегистра( , , ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ТаблицыГруппДоступа");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ЗначенияГруппДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ЗначенияГруппДоступа"].ОбновитьДанныеРегистра( , ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ЗначенияГруппДоступа");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И НаследованиеНастроекПравОбъектов Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НаследованиеНастроекПравОбъектов"].ОбновитьДанныеРегистра(, ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НаследованиеНастроекПравОбъектов");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И НастройкиПравОбъектов Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НастройкиПравОбъектов"].ОбновитьВспомогательныеДанныеРегистра(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НастройкиПравОбъектов");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И ГруппыЗначенийДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["ГруппыЗначенийДоступа"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, ГруппыЗначенийДоступа");
			КонецЕсли;
		КонецЕсли;
		
		Если РежимНастройки = ""
		 ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыУправлениеДоступом
		 ИЛИ РежимНастройки = "СложнаяНастройка" И НаборыЗначенийДоступа Тогда
			
			ЕстьИзменения = Ложь;
			РегистрыСведений["НаборыЗначенийДоступа"].ОбновитьДанныеРегистра(ЕстьИзменения);
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения("ДанныеПодсистемыУправлениеДоступом, НаборыЗначенийДоступа");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
		
		Настройки = МодульВариантыОтчетов.ПараметрыОбновленияНастроек();
		Настройки.ОбщиеДанные = Ложь;
		Настройки.РазделенныеДанные = Истина;
		Настройки.Конфигурация = Истина;
		Настройки.Расширения = Ложь;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыКонфигурации Тогда
			
			Настройки.Оперативное = Истина;
			Настройки.Отложенное = Ложь;
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			Если Обновление.ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ОтчетыКонфигурации.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
			
			Настройки.Оперативное = Ложь;
			Настройки.Отложенное = Истина;
			Настройки.ИндексироватьСхему = Истина;
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			Если Обновление.ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ИндексПоискаОтчетов.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		Настройки = МодульВариантыОтчетов.ПараметрыОбновленияНастроек();
		Настройки.ОбщиеДанные = Истина; // Предопределенные.
		Настройки.РазделенныеДанные = Истина;
		Настройки.Конфигурация = Ложь;
		Настройки.Расширения = Истина;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ОтчетыРасширений Тогда
			
			Настройки.Оперативное = Истина;
			Настройки.Отложенное = Ложь;
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			Если Обновление.ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ОтчетыРасширений.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыВариантыОтчетов
			ИЛИ РежимНастройки = "СложнаяНастройка" И ИндексПоискаОтчетов Тогда
			
			Настройки.Оперативное = Ложь;
			Настройки.Отложенное = Истина;
			Настройки.ИндексироватьСхему = Истина;
			Обновление = МодульВариантыОтчетов.Обновить(Настройки);
			
			Если Обновление.ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыВариантыОтчетов.Имя + "," + Элементы.ИндексПоискаОтчетов.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Если РежимНастройки = ""
			ИЛИ РежимНастройки = "ПростаяНастройка" И ДанныеПодсистемыКонтрольВеденияУчета
			ИЛИ РежимНастройки = "СложнаяНастройка" И ПравилаПроверкиУчета Тогда
			
			ЕстьИзменения = Истина;
			
			МодульКонтрольВеденияУчетаСлужебный = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчетаСлужебный");
			МодульКонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
			
			Если ЕстьИзменения Тогда
				ЕстьОбщиеИзменения = Истина;
				ВыделитьИзменения(Элементы.ДанныеПодсистемыКонтрольВеденияУчета.Имя + "," + Элементы.ПравилаПроверкиУчета.Имя);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементов(Форма)
	
	Элементы = Форма.Элементы;
	
	// СтандартныеПодсистемы БазоваяФункциональность
	Элементы.ИдентификаторыОбъектовМетаданных.Доступность              = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ИдентификаторыОбъектовРасширений.Доступность              = Форма.ОбновитьРазделенныеДанные;
	Элементы.КэшПрограммныхИнтерфейсов.Доступность                     = Форма.ОбновитьНеразделенныеДанные;
	
	// СтандартныеПодсистемы Пользователи
	Элементы.ПроверитьНазначениеРолей.Доступность                      = Форма.ОбновитьНеразделенныеДанные;
	Элементы.СоставыГруппПользователей.Доступность                     = Форма.ОбновитьРазделенныеДанные;
	
	// СтандартныеПодсистемы УправлениеДоступом
	Элементы.ПраваРолей.Доступность                                    = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ЗависимостиПрав.Доступность                               = Форма.ОбновитьНеразделенныеДанные;
	Элементы.СвойстваВидовДоступа.Доступность                          = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ОписаниеПоставляемыхПрофилейГруппДоступа.Доступность      = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ОписаниеВозможныхПравДляНастройкиПравОбъектов.Доступность = Форма.ОбновитьНеразделенныеДанные;
	Элементы.ПоставляемыеПрофилиГруппДоступа.Доступность               = Форма.ОбновитьРазделенныеДанные;
	Элементы.РолиПользователейИнформационнойБазы.Доступность           = Форма.ОбновитьРазделенныеДанные;
	Элементы.ТаблицыГруппДоступа.Доступность                           = Форма.ОбновитьРазделенныеДанные;
	Элементы.ЗначенияГруппДоступа.Доступность                          = Форма.ОбновитьРазделенныеДанные;
	Элементы.НаследованиеНастроекПравОбъектов.Доступность              = Форма.ОбновитьРазделенныеДанные;
	Элементы.НастройкиПравОбъектов.Доступность                         = Форма.ОбновитьРазделенныеДанные;
	Элементы.ГруппыЗначенийДоступа.Доступность                         = Форма.ОбновитьРазделенныеДанные;
	Элементы.НаборыЗначенийДоступа.Доступность                         = Форма.ОбновитьРазделенныеДанные;
	Элементы.ПараметрыОграниченияДоступа.Доступность                   = Форма.ОбновитьРазделенныеДанные;
	
	// СтандартныеПодсистемы ВариантыОтчетов
	Элементы.ОтчетыКонфигурации.Доступность  = Форма.ОбновитьНеразделенныеДанные Или Форма.ОбновитьРазделенныеДанные;
	Элементы.ОтчетыРасширений.Доступность    = Форма.ОбновитьНеразделенныеДанные Или Форма.ОбновитьРазделенныеДанные;
	Элементы.ИндексПоискаОтчетов.Доступность = Форма.ОбновитьРазделенныеДанные;
	
	// СтандартныеПодсистемы ИнформацияПриЗапуске
	Элементы.ПакетыИнформацииПриЗапуске.Доступность = Форма.ОбновитьНеразделенныеДанные;
	
	// СтандартныеПодсистемы КонтрольВеденияУчета
	Элементы.ПравилаПроверкиУчета.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьПоРежимуНастройки()
	
	ОбновитьТекущуюОбластьДанных();
	
	Если РежимНастройки = "ПростаяНастройка" Тогда
		Элементы.ПростаяНастройка.Видимость = Истина;
		Элементы.СложнаяНастройка.Видимость = Ложь;
		
	ИначеЕсли РежимНастройки = "СложнаяНастройка" Тогда
		Элементы.ПростаяНастройка.Видимость = Ложь;
		Элементы.СложнаяНастройка.Видимость = Истина;
		
	Иначе // Без настройки
		Элементы.ПростаяНастройка.Видимость = Ложь;
		Элементы.СложнаяНастройка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьИзменения(ИменаЭлементов, ЕстьИзменения = Истина)
	
	ЦветИзменения = Метаданные.ЭлементыСтиля.ГиперссылкаЦвет.Значение;
	ЦветОбычный   = Элементы.ОбластьДанных.ЦветТекстаЗаголовка; // Авто.
	
	ОписаниеЭлементов = Новый Структура(ИменаЭлементов);
	Для каждого ОписаниеЭлемента Из ОписаниеЭлементов Цикл
		Элементы[ОписаниеЭлемента.Ключ].ЦветТекстаЗаголовка = ?(ЕстьИзменения, ЦветИзменения, ЦветОбычный);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьТекущуюОбластьДанных()
	
	Если НЕ ОбщегоНазначения.РазделениеВключено()
	 ИЛИ НЕ ОбновитьНеразделенныеДанные Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеРазделителяСеанса = Неопределено;
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		ЗначениеРазделителяСеанса = МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	ТекущаяОбластьДанныхИзменена = ТекущаяОбластьДанных <> ЗначениеРазделителяСеанса;
	
	Если ТекущаяОбластьДанныхИзменена Тогда
		ТекущаяОбластьДанных = ЗначениеРазделителяСеанса;
	КонецЕсли;
	
	Если ТекущаяОбластьДанных = Неопределено Тогда
		ОбновитьРазделенныеДанные = Ложь;
	Иначе
		ОбновитьРазделенныеДанные = Истина;
	КонецЕсли;
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
	Возврат ТекущаяОбластьДанныхИзменена;
	
КонецФункции

&НаСервере
Процедура ОчиститьКэшПрограммныхИнтерфейсов(ЕстьИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	РегистрСведений.КэшПрограммныхИнтерфейсов КАК КэшПрограммныхИнтерфейсов";
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.КэшПрограммныхИнтерфейсов");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			НаборЗаписей = РегистрыСведений.КэшПрограммныхИнтерфейсов.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРазделениеСеанса(Знач Использование, Знач ОбластьДанных = Неопределено)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.БазоваяФункциональность") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.УстановитьРазделениеСеанса(Использование, ОбластьДанных);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Скопировано из ОбщаяФормы.ВходВОбластьДанных.

&НаКлиенте
Процедура ВойтиВОбластьДанных()
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ УказаннаяОбластьДанныхЗаполнена(ОбластьДанных) Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВойтиВОбластьДанныхЗавершение", ЭтотОбъект),
			НСтр("ru = 'Выбранная область данных не заполнена, продолжить вход?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
	Иначе
		ВойтиВОбластьДанныхЗавершение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВойтиВОбластьДанныхЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВойтиВОбластьДанныхНаСервере(ОбластьДанных);
	
	ОбновитьИнтерфейс();
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПродолжениеВходаВОбластьДанныхПослеДействийПередНачаломРаботыСистемы", ЭтотОбъект);
	
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы(ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВходаВОбластьДанныхПослеДействийПередНачаломРаботыСистемы(Результат, Контекст) Экспорт
	
	Если Результат.Отказ Тогда
		ВыйтиИзОбластиДанныхНаСервере();
		ОбновитьИнтерфейс();
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПродолжениеВходаВОбластьДанныхПослеДействийПриНачалеРаботыСистемы", ЭтотОбъект);
	
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы(ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеВходаВОбластьДанныхПослеДействийПриНачалеРаботыСистемы(Результат, Контекст) Экспорт
	
	Если Результат.Отказ Тогда
		ВыйтиИзОбластиДанныхНаСервере();
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыйтиИзОбластиДанных(Отказ)
	
	ВыйтиИзОбластиДанныхНаСервере();
	
	ОбновитьИнтерфейс();
	
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УказаннаяОбластьДанныхЗаполнена(Знач ОбластьДанных)
	
	РегистрОбластиДанных = СтрЗаменить("РегистрСведений.%1", "%1", "ОбластиДанных");
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиДанных.Статус КАК Статус
	|ИЗ
	|	#ОбластьДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные = &ОбластьДанных";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ОбластьДанных", РегистрОбластиДанных);
	Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус = Перечисления["СтатусыОбластейДанных"].Используется;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВойтиВОбластьДанныхНаСервере(Знач ОбластьДанных)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	
	НачатьТранзакцию();
	
	Попытка
		КлючОбласти = РегистрыСведений["ОбластиДанных"].СоздатьКлючЗаписи(
			Новый Структура("ОбластьДанныхВспомогательныеДанные", ОбластьДанных));
		
		ЗаблокироватьДанныеДляРедактирования(КлючОбласти);
		
		РегистрОбластиДанных = СтрЗаменить("РегистрСведений.%1", "%1", "ОбластиДанных");
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить(РегистрОбластиДанных);
		Элемент.УстановитьЗначение("ОбластьДанныхВспомогательныеДанные", ОбластьДанных);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений["ОбластиДанных"].СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			ИмяПеречисления = "СтатусыОбластейДанных";
			МенеджерЗаписи.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
			МенеджерЗаписи.Статус = Перечисления[ИмяПеречисления].Используется;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		РазблокироватьДанныеДляРедактирования(КлючОбласти);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыйтиИзОбластиДанныхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

// Можно ли индексировать содержимое СКД схемы отчетов конфигурации.
// Это копия функции из модуля ВариантыОтчетов.
//
&НаСервереБезКонтекста
Функция РазрешеноИндексированиеНеразделенныхДанных()
	Возврат Не ОбщегоНазначения.РазделениеВключено();
КонецФункции

#КонецОбласти
