///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

// См. в модуле объекта раздел "ЗАПОЛНЯЕТСЯ РАЗРАБОТЧИКАМИ ПОДСИСТЕМ".

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИсточникОграничений = "ИзТабличногоДокумента";
	ВыполнятьВыгрузкуВоВременнуюПапку = Истина;
	
	СвойстваВидовПользователей.Добавить();
	СвойстваВидовПользователей.Добавить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	Если ЭтоВнешняяОбработка Тогда
		ИмяФайлаОбработки = ОбработкаОбъект.ИспользуемоеИмяФайла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсточникСравнения) Тогда
		ИсточникСравнения = "Файл";
	КонецЕсли;
	
	Элементы.ОграничениеПоВладельцуСОптимизациейНадпись.Подсказка =
		НСтр("ru = 'Для работы ограничения используются ключи доступа, записанные для владельца.
		           |Не требуется запись своих ключей доступа и расчет прав на них, что эффективно.'");
	
	Элементы.ОграничениеПоВладельцуСОптимизациейНадписьДляВнешнихПользователей.Подсказка =
		Элементы.ОграничениеПоВладельцуСОптимизациейНадпись.Подсказка;
	
	Элементы.ОграничениеПоВладельцуБезОптимизацииНадпись.Подсказка =
		НСтр("ru = 'Оптимизация не используется, так как ключи доступа объекта используются другим объектом или отключена разработчиком.
		           |Для работы ограничения записываются свои ключи доступа, зависимые от ключей доступа владельца, что увеличивает время обновления.
		           |Иногда при разработке требуется учесть, что права на зависимые ключи доступа рассчитываются с небольшим отставанием от расчета прав на ведущие ключи доступа.'");
	
	Элементы.ОграничениеПоВладельцуБезОптимизацииНадписьДляВнешнихПользователей.Подсказка =
		Элементы.ОграничениеПоВладельцуБезОптимизацииНадпись.Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
#Если ВебКлиент Или МобильныйКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Инструмент ""Управление доступом"" не доступен в веб-клиенте и мобильном клиенте, необходимо использовать тонкий клиент.'"));
		Отказ = Истина;
		Возврат;
#КонецЕсли
	
#Если Не ВебКлиент Тогда
	
	ПрочитатьПараметрыЗапуска();
	
	Если СтрНайти(ПараметрЗапуска, "ПапкаНовогоОписания") > 0 Тогда
		НачатьВыгрузкуТекстовОграничений();
		ПрекратитьРаботуСистемы();
		Возврат;
	КонецЕсли;
	
	Элементы.ПапкаВыгрузкиТекстовRLSИзЭтойКонфигурации.Доступность = ВыгружатьТекстыRLS;
	Элементы.ПапкаСВыгруженнымиФайламиКонфигурации.Доступность = ФайлыКонфигурацииВыгружены;
	УстановитьВидимостьЭлементов();
	
	ПрочитатьОтличия();
	
#КонецЕсли
	
	Элементы.Список.ОбновитьТекстРедактирования();
	ОбновитьТекстыОграниченияСписка();
	
	Если Не ЗначениеЗаполнено(СтрокаЗапускаВнешнейПрограммы) Тогда
		СтрокаЗапускаВнешнейПрограммы = """C:\Program Files (x86)\SmartSynchronize\bin\smartsynchronize.exe"" %1 %2";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ИсключаемыеРеквизиты = Новый Массив;
	
	Если ИсточникСравнения = "Файл" Тогда
		ИсключаемыеРеквизиты.Добавить("ПапкаПредыдущейВыгрузкиТекстовRLS");
	Иначе // "Папка".
		ИсключаемыеРеквизиты.Добавить("ПутьКФайлуПредыдущейВерсииКонфигурации");
	КонецЕсли;
	
	Если Не ВыгружатьТекстыRLS Тогда
		ИсключаемыеРеквизиты.Добавить("ПапкаВыгрузкиТекстовRLSИзЭтойКонфигурации");
	КонецЕсли;
	
	Если Не ФайлыКонфигурацииВыгружены Тогда
		ИсключаемыеРеквизиты.Добавить("ПапкаСВыгруженнымиФайламиКонфигурации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ИсключаемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ОбновитьТекстыОграниченияСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Коллекции = Новый СписокЗначений;
	Коллекции.Добавить("ПланыОбмена");
	Коллекции.Добавить("Справочники");
	Коллекции.Добавить("Документы");
	Коллекции.Добавить("ЖурналыДокументов");
	Коллекции.Добавить("ПланыВидовХарактеристик");
	Коллекции.Добавить("ПланыСчетов");
	Коллекции.Добавить("ПланыВидовРасчета");
	Коллекции.Добавить("РегистрыСведений");
	Коллекции.Добавить("РегистрыНакопления");
	Коллекции.Добавить("РегистрыБухгалтерии");
	Коллекции.Добавить("РегистрыРасчета");
	Коллекции.Добавить("БизнесПроцессы");
	Коллекции.Добавить("Задачи");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборЕдинственного", Истина);
	ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", Список);
	ПараметрыФормы.Вставить("КоллекцииВыбираемыхОбъектовМетаданных", Коллекции);
	
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы, Элемент,,,, Новый ОписаниеОповещения(
		"СписокНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Список.КнопкаОткрытия <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/list/" + Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Список = Текст;
	ОбновитьТекстыОграниченияСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОграниченияИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ПриИзмененииТекстаОграничения(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОграниченияДляВнешнихПользователейИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ПриИзмененииТекстаОграничения(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОграниченийПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаГотовойВыгрузкиКонфигурацииВФайлыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = ПапкаГотовойВыгрузкиКонфигурацииВФайлы;
	Диалог.Заголовок = НСтр("ru = 'Выбор папки, содержащей файлы выгрузки конфигурации'");
	
	Обработчик = Новый ОписаниеОповещения(
		"ПапкаГотовойВыгрузкиКонфигурацииВФайлыНачалоВыбораПослеВыбора", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Обработчик, Диалог);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораПапкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФайловаяСистемаКлиент.ОткрытьПроводник(ЭтотОбъект[Элемент.Имя]);
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораПапкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = ЭтотОбъект[Элемент.Имя];
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор папки'");
	
	Если ЗначениеЗаполнено(Элемент.Подсказка) Тогда
		ДиалогВыбораФайла.Заголовок = Элемент.Подсказка;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореПапки", ЭтотОбъект, Элемент.Имя);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОписаниеОповещения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВыбораПапкиПриИзменении(Элемент)
	ИмяФайла = ЭтотОбъект[Элемент.Имя];
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		ЭтотОбъект[Элемент.Имя] = Файл.ПолноеИмя + ПолучитьРазделительПути();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПредыдущейВерсииКонфигурацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Каталог = "";
	Файл = Новый Файл(ЭтотОбъект[Элемент.Имя]);
	Если Файл.Существует() Тогда
		Каталог = Файл.Путь;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Каталог = Каталог;
	ДиалогВыбораФайла.Фильтр = "Конфигурация (*.cf)|*.cf";
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл предыдущей версии конфигурации'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореФайлаКонфигурации", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(ОписаниеОповещения, ДиалогВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникСравненияПриИзменении(Элемент)
	Если ИсточникСравнения = "Файл" И Не ЗначениеЗаполнено(ИмяФайлаОбработки) Тогда
		ИсточникСравнения = "Папка";
		ПоказатьПредупреждение(, НСтр("ru = 'Для сравнения текстов RLS с текстами в предыдущей версии конфигурации (.cf)
			|необходимо в конфигураторе выгрузить эту обработку в файл 
			|и открывать ее в тонком клиенте через меню Файл -> Открыть.'"));
	КонецЕсли;
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьТекстыRLSПриИзменении(Элемент)
	Элементы.ПапкаВыгрузкиТекстовRLSИзЭтойКонфигурации.Доступность = ВыгружатьТекстыRLS;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыКонфигурацииВыгруженыПриИзменении(Элемент)
	Элементы.ПапкаСВыгруженнымиФайламиКонфигурации.Доступность = ФайлыКонфигурацииВыгружены;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеРазличия

&НаКлиенте
Процедура НайденныеРазличияПриАктивизацииСтроки(Элемент)
	
#Если Не ВебКлиент Тогда
	
	Если Элементы.НайденныеРазличия.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПапкаЭталонногоОписания) Или Не ЗначениеЗаполнено(Объект.ПапкаНовогоОписания) Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = Элементы.НайденныеРазличия.ТекущиеДанные.Значение;
	
	ИмяФайла = Объект.ПапкаЭталонногоОписания + Таблица + ".txt";
	Было = ПрочитатьФайл(ИмяФайла);
	
	ИмяФайла = Объект.ПапкаНовогоОписания + Таблица + ".txt";
	Стало = ПрочитатьФайл(ИмяФайла);
#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДоступ(Команда)
	
	ЗапланироватьОбновлениеДоступаНаСервере(СписокПолноеИмя);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыключитьАвтообновлениеПрогресса",   Истина);
	ПараметрыФормы.Вставить("ПоказатьПрогрессПоОтдельнымСпискам", Истина);
	
	ОткрытьФорму("РегистрСведений.ОбновлениеКлючейДоступаКДанным.Форма.ОбновлениеДоступаНаУровнеЗаписей",
		ПараметрыФормы);
	
	ПодключитьОбработчикОжидания("ЗапуститьОбновлениеДоступаОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписаниеПрофилейВыполнить(Команда)
#Если Не МобильныйКлиент Тогда
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ОписаниеНачальногоЗаполненияПрофилейНаВстроенномЯзыке(КонкретныйПрофиль));
	ТекстовыйДокумент.Показать(НСтр("ru = 'Описание начального заполнения имеющихся профилей групп доступа'"));
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОграничение(Команда)
	
	ПроверитьУказанноеОграничение(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстДляВставки(Команда)
#Если Не МобильныйКлиент Тогда
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстДляВставки());
	ТекстовыйДокумент.Показать(НСтр("ru = 'Тексты для вставки в модуль и в роли'"));
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОграничениеВРоли(Команда)
	
	ПроверитьУказанноеОграничение(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьВыгрузкуВоВременнуюПапкуПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПолноеОписание(Команда)
	
	СформироватьОписание();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписаниеРазличий(Команда)
	
	СформироватьОписание(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОписания(Команда)
	
#Если Не ВебКлиент Тогда
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ФайлыКонфигурацииВыгружены Тогда
		Объект.ПапкаВыгрузкиКонфигурации = ПапкаСВыгруженнымиФайламиКонфигурации;
	Иначе
		Объект.ПапкаВыгрузкиКонфигурации = "";
		Если ОткрытКонфигуратор() И Не ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
			ВызватьИсключение НСтр("ru = 'Для сравнения текстов RLS необходимо закрыть конфигуратор.'");
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникСравнения = "Файл" Тогда
		Объект.ПапкаЭталонногоОписания = ПолучитьИмяВременногоФайла("last") + ПолучитьРазделительПути();
		ВыгрузитьТекстыОграниченийИзФайлаКонфигурации();
	Иначе
		Объект.ПапкаЭталонногоОписания = ПапкаПредыдущейВыгрузкиТекстовRLS;
	КонецЕсли;
	
	Если ВыгружатьТекстыRLS Тогда
		Объект.ПапкаНовогоОписания = ПапкаВыгрузкиТекстовRLSИзЭтойКонфигурации;
	Иначе
		Объект.ПапкаНовогоОписания = ПолучитьИмяВременногоФайла("this") + ПолучитьРазделительПути();
	КонецЕсли;
	
	НачатьВыгрузкуТекстовОграничений();
	ПрочитатьОтличия();
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Контроль изменения текстов RLS'"), , НСтр("ru = 'Сравнение текстов RLS подготовлено.'"));
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СравнитьВоВнешнейПрограмме(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПапкаНовогоОписания) Тогда
		Объект.ПапкаНовогоОписания = ПапкаВыгрузкиТекстовRLSИзЭтойКонфигурации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПапкаЭталонногоОписания) Тогда
		Объект.ПапкаЭталонногоОписания = ПапкаПредыдущейВыгрузкиТекстовRLS;
	КонецЕсли;
	
	СтрокаЗапуска = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СтрокаЗапускаВнешнейПрограммы,
		ОбернутьВКавычки(Объект.ПапкаЭталонногоОписания),
		ОбернутьВКавычки(Объект.ПапкаНовогоОписания));
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаЗапуска);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СписокНачалоВыбораЗавершение(СписокЗначений, Контекст) Экспорт
	
	Если ТипЗнч(СписокЗначений) <> Тип("СписокЗначений")
	 Или СписокЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Список = СписокЗначений[0].Значение;
	
	ПодключитьОбработчикОжидания("СписокОбновитьТекстРедактированияОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбновитьТекстРедактированияОбработчикОжидания()
	
	Элементы.Список.ОбновитьТекстРедактирования();
	ОбновитьТекстыОграниченияСписка();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапланироватьОбновлениеДоступаНаСервере(Знач ПолноеИмя)
	
	УправлениеДоступомСлужебный.ЗапланироватьОбновлениеДоступа(ПолноеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьОбновлениеДоступаОбработчикОжидания()
	
	Результат = ЗапуститьОбновлениеДоступаНаСервере();
	Если ЗначениеЗаполнено(Результат.ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, Результат.ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьОбновлениеДоступаНаСервере()
	
	Возврат УправлениеДоступомСлужебный.ЗапуститьОбновлениеДоступаНаУровнеЗаписей(Истина);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьУказанноеОграничение(УчитыватьЗависимости)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УчитыватьЗависимости", УчитыватьЗависимости);
	ДополнительныеПараметры.Вставить("Текст", СвойстваВидовПользователей[0].ТекстОграничения);
	ДополнительныеПараметры.Вставить("ТекстДляВнешнихПользователей",
		СвойстваВидовПользователей[1].ТекстОграничения);
	
	ОбновитьТекстыОграниченияСписка(ДополнительныеПараметры);
	
	Если Элементы.ОграничениеДоступа.ТекущаяСтраница = Элементы.ДляПользователей Тогда
		Если ЗначениеЗаполнено(СвойстваВидовПользователей[0].ТекстОшибокОграничения) Тогда
			Элементы.ОграничениеДоступа.ТекущаяСтраница = Элементы.ДляПользователейОшибки;
			ТекущийЭлемент = Элементы.ТекстОшибокОграничения;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СвойстваВидовПользователей[1].ТекстОшибокОграничения) Тогда
			Элементы.ОграничениеДоступа.ТекущаяСтраница = Элементы.ДляВнешнихПользователейОшибки;
			ТекущийЭлемент = Элементы.ТекстОшибокОграниченияДляВнешнихПользователей;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстыОграниченияСписка(ДополнительныеПараметры = Неопределено)
	
	СвойстваСписка = СвойстваСписка(Список, ДополнительныеПараметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваСписка);
	
	Элементы.ОграничениеДоступа.Доступность = СвойстваСписка.СписокНайден;
	Элементы.Список.КнопкаОткрытия          = СвойстваСписка.СписокНайден;
	Элементы.ОбновитьДоступ.Доступность     = СвойстваСписка.СписокНайден;
	
	ОбновитьТекстыОграниченияСпискаДляВидаПользователей(СвойстваСписка.ДляПользователей, Ложь, ДополнительныеПараметры);
	ОбновитьТекстыОграниченияСпискаДляВидаПользователей(СвойстваСписка.ДляВнешнихПользователей, Истина, ДополнительныеПараметры);
	
	ЕстьОшибки = Не СвойстваСписка.СписокЕстьРезультат
		Или ЗначениеЗаполнено(СвойстваСписка.ДляПользователей.ТекстОшибокОграничения)
		Или ЗначениеЗаполнено(СвойстваСписка.ДляВнешнихПользователей.ТекстОшибокОграничения);
	
	Элементы.РассчитатьОграничениеВРоли.Доступность = Не ЕстьОшибки;
	Элементы.РассчитатьОграничениеВРолиДляВнешнихПользователей.Доступность = Не ЕстьОшибки;
	
	ОбновитьДоступностьТекстаДляВставки(ЕстьОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстыОграниченияСпискаДляВидаПользователей(Свойства, ДляВнешнихПользователей, ДополнительныеПараметры)
	
	Если ДляВнешнихПользователей Тогда
		СтраницыОграничениеВРолиЗаголовки            = Элементы.ОграничениеВРолиЗаголовкиДляВнешнихПользователей;
		СтраницаОграничениеВРолиЗаголовокСРасчетом   = Элементы.ОграничениеВРолиЗаголовокСРасчетомДляВнешнихПользователей;
		СтраницаОграничениеВРолиЗаголовокБезРасчета  = Элементы.ОграничениеВРолиЗаголовокБезРасчетаДляВнешнихПользователей;
		ЭлементОшибки                                = Элементы.ДляВнешнихПользователейОшибки;
		ЭлементТекстОграничения                      = Элементы.ТекстОграниченияДляВнешнихПользователей;
		ЭлементПроверитьТекстОграничения             = Элементы.ПроверитьТекстОграниченияДляВнешнихПользователей;
		ЭлементРассчитатьОграничениеВРоли            = Элементы.РассчитатьОграничениеВРолиДляВнешнихПользователей;
		ЭлементОграничениеПоВладельцу                = Элементы.ОграничениеПоВладельцуДляВнешнихПользователей;
		СтраницаОграничениеПоВладельцуНеРассчитано   = Элементы.ОграничениеПоВладельцуНеРассчитаноДляВнешнихПользователей;
		СтраницаОграничениеПоВладельцуСОптимизацией  = Элементы.ОграничениеПоВладельцуСОптимизациейДляВнешнихПользователей;
		СтраницаОграничениеПоВладельцуБезОптимизации = Элементы.ОграничениеПоВладельцуБезОптимизацииДляВнешнихПользователей;
		НадписьОграничениеПоВладельцуБезОптимизации  = Элементы.ОграничениеПоВладельцуБезОптимизацииНадписьДляВнешнихПользователей;
	Иначе
		СтраницыОграничениеВРолиЗаголовки            = Элементы.ОграничениеВРолиЗаголовки;
		СтраницаОграничениеВРолиЗаголовокСРасчетом   = Элементы.ОграничениеВРолиЗаголовокСРасчетом;
		СтраницаОграничениеВРолиЗаголовокБезРасчета  = Элементы.ОграничениеВРолиЗаголовокБезРасчета;
		ЭлементОшибки                                = Элементы.ДляПользователейОшибки;
		ЭлементТекстОграничения                      = Элементы.ТекстОграничения;
		ЭлементПроверитьТекстОграничения             = Элементы.ПроверитьТекстОграничения;
		ЭлементРассчитатьОграничениеВРоли            = Элементы.РассчитатьОграничениеВРоли;
		ЭлементОграничениеПоВладельцу                = Элементы.ОграничениеПоВладельцу;
		СтраницаОграничениеПоВладельцуНеРассчитано   = Элементы.ОграничениеПоВладельцуНеРассчитано;
		СтраницаОграничениеПоВладельцуСОптимизацией  = Элементы.ОграничениеПоВладельцуСОптимизацией;
		СтраницаОграничениеПоВладельцуБезОптимизации = Элементы.ОграничениеПоВладельцуБезОптимизации;
		НадписьОграничениеПоВладельцуБезОптимизации  = Элементы.ОграничениеПоВладельцуБезОптимизацииНадпись;
	КонецЕсли;
	
	СтраницыОграничениеВРолиЗаголовки.ТекущаяСтраница =
		?(Свойства.ОграничениеПоВладельцуВозможно = Истина,
			СтраницаОграничениеВРолиЗаголовокСРасчетом, СтраницаОграничениеВРолиЗаголовокБезРасчета);
	
	ХранимыеСвойства = СвойстваВидовПользователей[?(ДляВнешнихПользователей, 1, 0)];
	ЗаполнитьЗначенияСвойств(ХранимыеСвойства, Свойства);
	
	ЭлементОшибки.Видимость = ЗначениеЗаполнено(ХранимыеСвойства.ТекстОшибокОграничения);
	ЭлементТекстОграничения.ОбновитьТекстРедактирования();
	ЭлементПроверитьТекстОграничения.Заголовок = НСтр("ru = 'Проверить'");
	
	Если ЗначениеЗаполнено(Свойства.ТекстОшибокОграничения)
		Или Свойства.ОграничениеПоВладельцуВозможно = Истина
		И (ДополнительныеПараметры = Неопределено
			Или Не ДополнительныеПараметры.УчитыватьЗависимости) Тогда
		
		ХранимыеСвойства.ТекстОграниченияВРоли = ?(ЗначениеЗаполнено(Свойства.ТекстОшибокОграничения),
			НСтр("ru = '<Ограничение для роли не рассчитано - исправьте ошибки и нажмите Проверить>'"),
			НСтр("ru = '<Ограничение для роли не рассчитано - нажмите Рассчитать>'"));
		
		ЭлементОграничениеПоВладельцу.ТекущаяСтраница = СтраницаОграничениеПоВладельцуНеРассчитано;
		ЭлементРассчитатьОграничениеВРоли.Заголовок = НСтр("ru = 'Рассчитать *'");
		
	ИначеЕсли Свойства.ОграничениеПоВладельцуВозможно = Истина Тогда
		
		ЭлементРассчитатьОграничениеВРоли.Заголовок = НСтр("ru = 'Рассчитать'");
		ЭлементОграничениеПоВладельцу.ТекущаяСтраница = ?(Свойства.ОграничениеПоВладельцуИспользуется,
			СтраницаОграничениеПоВладельцуСОптимизацией, СтраницаОграничениеПоВладельцуБезОптимизации);
		НадписьОграничениеПоВладельцуБезОптимизации.Заголовок =
			?(Свойства.ПоВладельцуБезЗаписиКлючейДоступа = Ложь,
				НСтр("ru = 'Без оптимизации (отключена)'"), НСтр("ru = 'Без оптимизации'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекстаОграничения(ДляВнешнихПользователей)
	
	Если ДляВнешнихПользователей Тогда
		ЭлементПроверитьТекстОграничения  = Элементы.ПроверитьТекстОграниченияДляВнешнихПользователей;
		ЭлементРассчитатьОграничениеВРоли = Элементы.РассчитатьОграничениеВРолиДляВнешнихПользователей;
	Иначе
		ЭлементПроверитьТекстОграничения  = Элементы.ПроверитьТекстОграничения;
		ЭлементРассчитатьОграничениеВРоли = Элементы.РассчитатьОграничениеВРоли;
	КонецЕсли;
	
	ЭлементПроверитьТекстОграничения.Заголовок  = НСтр("ru = 'Проверить *'");
	ЭлементРассчитатьОграничениеВРоли.Заголовок = НСтр("ru = 'Рассчитать'");
	
	Элементы.РассчитатьОграничениеВРоли.Доступность = Ложь;
	Элементы.ОграничениеПоВладельцу.ТекущаяСтраница = Элементы.ОграничениеПоВладельцуНеРассчитано;
	
	Элементы.РассчитатьОграничениеВРолиДляВнешнихПользователей.Доступность = Ложь;
	Элементы.ОграничениеПоВладельцуДляВнешнихПользователей.ТекущаяСтраница =
		Элементы.ОграничениеПоВладельцуНеРассчитаноДляВнешнихПользователей;
	
	ХранимыеСвойства = СвойстваВидовПользователей[?(ДляВнешнихПользователей, 1, 0)];
	ХранимыеСвойства.ТекстОграниченияВРоли = НСтр("ru = '<Ограничение для роли не рассчитано - нажмите Проверить>'");
	
	ОбновитьДоступностьТекстаДляВставки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьТекстаДляВставки(ЕстьОшибки)
	
	ТекстДляВставкиДоступен = Не ЕстьОшибки
		И (    ЗначениеЗаполнено(СвойстваВидовПользователей[0].ТекстОграничения)
		   Или ЗначениеЗаполнено(СвойстваВидовПользователей[1].ТекстОграничения) );
	
	Элементы.ПоказатьТекстДляВставки.Доступность = ТекстДляВставкиДоступен;
	Элементы.ПоказатьТекстДляВставкиДляВнешнихПользователей.Доступность = ТекстДляВставкиДоступен;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваСписка(Список, ДополнительныеПараметры = Неопределено)
	
	Свойства = Новый Структура;
	Свойства.Вставить("СписокНайден", Ложь);
	Свойства.Вставить("СписокПояснение", "");
	Свойства.Вставить("СписокЕстьРезультат", Ложь);
	Свойства.Вставить("ТекстВМодулеМенеджера", Неопределено);
	Свойства.Вставить("СписокПолноеИмя", "");
	Свойства.Вставить("СписокПолноеИмяКоллекции", "");
	Свойства.Вставить("НастройкиВнедрения",      Новый Структура);
	Свойства.Вставить("ДляПользователей",        СвойстваДляВидаПользователей());
	Свойства.Вставить("ДляВнешнихПользователей", СвойстваДляВидаПользователей());
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Список);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Если ЗначениеЗаполнено(Список) Тогда
			Свойства.СписокПояснение = НСтр("ru = 'Список не найден'");
		Иначе
			Свойства.СписокПояснение = НСтр("ru = 'Список не выбран'");
		КонецЕсли;
		Возврат Свойства;
	КонецЕсли;
	
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Свойства.СписокПолноеИмя = ПолноеИмя;
	Свойства.СписокНайден = Истина;
	
	Свойства.СписокПолноеИмяКоллекции =
		ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) + "." + ОбъектМетаданных.Имя;
	
	Попытка
		Результат = УправлениеДоступомСлужебный.РезультатПроверкиОграниченияДоступа(ПолноеИмя, ДополнительныеПараметры);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Результат = Неопределено;
	КонецПопытки;
	
	Если Результат = Неопределено Тогда
		Свойства.СписокПояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Список найден. Не удалось определить наличие ограничения по причине:
			           |%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Возврат Свойства;
	КонецЕсли;
	
	Свойства.СписокЕстьРезультат = Истина;
	
	Свойства.ТекстВМодулеМенеджера = Результат.ТекстВМодулеМенеджера;
	
	Если Результат.ТекстВМодулеМенеджера = Неопределено Тогда
		Свойства.СписокПояснение =
			НСтр("ru = 'Список найден. Не указан в процедуре ПриЗаполненииСписковСОграничениемДоступа общего модуля УправлениеДоступомПереопределяемый.'");
	Иначе
		Если Результат.ТекстВМодулеМенеджера Тогда
			Свойства.СписокПояснение = НСтр("ru = 'Список найден. Ограничение в модуле менеджера.'");
		Иначе
			Свойства.СписокПояснение = НСтр("ru = 'Список найден. Ограничение в переопределяемом модуле.'");
		КонецЕсли;
	КонецЕсли;
	
	Свойства.НастройкиВнедрения = Результат.НастройкиВнедрения;
	
	ЗаполнитьСвойстваСпискаДляВидаПользователей(Свойства.ДляПользователей,
		Результат.ДляПользователей, ДополнительныеПараметры);
	
	ЗаполнитьСвойстваСпискаДляВидаПользователей(Свойства.ДляВнешнихПользователей,
		Результат.ДляВнешнихПользователей, ДополнительныеПараметры);
	
	Возврат Свойства;
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваДляВидаПользователей()
	
	Свойства = Новый Структура;
	
	Свойства.Вставить("ОграничениеПоВладельцуВозможно");
	Свойства.Вставить("ОграничениеПоВладельцуИспользуется");
	Свойства.Вставить("ПоВладельцуБезЗаписиКлючейДоступа");
	Свойства.Вставить("ТекстОшибокОграничения");
	Свойства.Вставить("ТекстОграниченияВРоли");
	
	Возврат Свойства;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСвойстваСпискаДляВидаПользователей(Свойства, Результат, ДополнительныеПараметры)
	
	Свойства.ОграничениеПоВладельцуВозможно     = Результат.ОграничениеПоВладельцуВозможно;
	Свойства.ОграничениеПоВладельцуИспользуется = Результат.ОграничениеПоВладельцуИспользуется;
	Свойства.ПоВладельцуБезЗаписиКлючейДоступа  = Результат.ПоВладельцуБезЗаписиКлючейДоступа;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Свойства.Вставить("ТекстОграничения", Результат.ПроверяемоеОграничение);
	КонецЕсли;
	
	ТекстОшибок = "";
	ОписаниеОшибок = Результат.ОписаниеОшибок; // см. УправлениеДоступомСлужебный.ОписаниеОшибок
	
	Если ЗначениеЗаполнено(ОписаниеОшибок) Тогда
		ТекстОшибок = ОписаниеОшибок.ТекстОшибок;
		ТекстОшибок = ТекстОшибок + Символы.ПС + Символы.ПС + ОписаниеОшибок.Ограничение;
		Если ЗначениеЗаполнено(ОписаниеОшибок.Дополнение) Тогда
			ТекстОшибок = ТекстОшибок + Символы.ПС + Символы.ПС + ОписаниеОшибок.Дополнение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ОшибкаФормированияПараметровОграничения) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + Символы.ПС
			+ Результат.ОшибкаФормированияПараметровОграничения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ОшибкаФормированияТекстовЗапросов) Тогда
		ТекстОшибок = ТекстОшибок + Символы.ПС + Символы.ПС
			+ Результат.ОшибкаФормированияТекстовЗапросов;
	КонецЕсли;
	
	Свойства.ТекстОшибокОграничения = СокрЛП(ТекстОшибок);
	
	Если ЗначениеЗаполнено(Свойства.ТекстОшибокОграничения)
	 Или Не ЗначениеЗаполнено(Результат.ПроверяемоеОграничение)
	 Или Результат.ОграничениеВРолях = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ОграничениеВРолях.ШаблонДляОбъекта Тогда
		ТекстОграниченияВРоли = "#ДляОбъекта(";
		КоличествоПараметров = 1;
	Иначе
		ТекстОграниченияВРоли = "#ДляРегистра(";
		КоличествоПараметров = 6;
	КонецЕсли;
	ТекстОграниченияВРоли = ?(Результат.ОграничениеВРолях.ШаблонДляОбъекта, "#ДляОбъекта(", "#ДляРегистра(");
	
	ПервыйПараметр = Истина;
	Для Каждого Параметр Из Результат.ОграничениеВРолях.Параметры Цикл
		ТекстОграниченияВРоли = ТекстОграниченияВРоли + ?(ПервыйПараметр, "", ", ") + """" + Параметр + """";
		ПервыйПараметр = Ложь;
	КонецЦикла;
	
	Для НомерПараметра = Результат.ОграничениеВРолях.Параметры.Количество() + 1 По КоличествоПараметров Цикл
		ТекстОграниченияВРоли = ТекстОграниченияВРоли + ?(ПервыйПараметр, "", ", ") + """""";
		ПервыйПараметр = Ложь;
	КонецЦикла;
	
	Свойства.ТекстОграниченияВРоли = ТекстОграниченияВРоли + ")";
	
КонецПроцедуры

&НаКлиенте
Функция ТекстДляВставки()
	
	НомерПункта = 1;
	Текст = "";
	
	Если ТекстВМодулеМенеджера = Неопределено Тогда
		Текст =
			НСтр("ru = '1. В процедуру ПриЗаполненииСписковСОграничениемДоступа
			           |   общего модуля УправлениеДоступомПереопределяемый добавить строку:'");
		Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
			           |
			           |	Списки.Вставить(Метаданные.%1, Истина);", СписокПолноеИмяКоллекции);
		Текст = Текст + Символы.ПС + Символы.ПС;
		НомерПункта = 2;
	КонецЕсли;
	
	Если ТекстВМодулеМенеджера <> Ложь Тогда
		Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1. В модуле менеджера объекта метаданных %2 вставить или обновить процедуру:'"),
			НомерПункта,
			СписокПолноеИмяКоллекции);
			
		Текст = Текст + Символы.ПС + Символы.ПС +
		"#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		|#Область ПрограммныйИнтерфейс
		|#Область ДляВызоваИзДругихПодсистем
		|// СтандартныеПодсистемы.УправлениеДоступом
		|
		|// Параметры:
		|//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
		|//
		|Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
		|	" + ?(ЗначениеЗаполнено(СвойстваВидовПользователей[0].ТекстОграничения), "
		|	Ограничение.Текст =
		|	""" + ТекстСОтступом(СвойстваВидовПользователей[0].ТекстОграничения, "	|") + """;
		|	", "") + ?(ЗначениеЗаполнено(СвойстваВидовПользователей[1].ТекстОграничения), "
		|	Ограничение.ТекстДляВнешнихПользователей =
		|	""" + ТекстСОтступом(СвойстваВидовПользователей[1].ТекстОграничения, "	|") + """;
		|	", "") + "
		|КонецПроцедуры
		|
		|// Конец СтандартныеПодсистемы.УправлениеДоступом
		|#КонецОбласти
		|#КонецОбласти
		|#КонецЕсли";
	Иначе
		Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1. В процедуре ПриЗаполненииОграниченияДоступа
			           |   общего модуля УправлениеДоступомПереопределяемый вставить или обновить строки:'"),
			НомерПункта,
			СписокПолноеИмяКоллекции);
			
		Текст = Текст + Символы.ПС + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"	Если Список = Метаданные.%1 Тогда
		|		
		|		Ограничение.Текст =
		|		""%2"";" + ?(ЗначениеЗаполнено(СвойстваВидовПользователей[1].ТекстОграничения), "
		|		
		|		Ограничение.ТекстДляВнешнихПользователей =
		|		""%3"";", "") + "
		|	
		|	КонецЕсли;",
		СписокПолноеИмяКоллекции,
		ТекстСОтступом(СвойстваВидовПользователей[0].ТекстОграничения, "		|"),
		ТекстСОтступом(СвойстваВидовПользователей[1].ТекстОграничения, "		|"));
	КонецЕсли;
	Текст = Текст + Символы.ПС + Символы.ПС;
	НомерПункта = НомерПункта + 1;
	
	Если ЗначениеЗаполнено(СвойстваВидовПользователей[0].ТекстОграничения)
	   И Не СтрНачинаетсяС(СвойстваВидовПользователей[0].ТекстОграничения, "<")
	 Или ЗначениеЗаполнено(СвойстваВидовПользователей[1].ТекстОграничения)
	   И Не СтрНачинаетсяС(СвойстваВидовПользователей[1].ТекстОграничения, "<") Тогда
	
		Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1. В процедуре ПриЧтенииНаСервере формы элемента данных (если есть)
			           |   следует сделать вставку кода (для библиотек проверка подсистемы обязательна):'"),
			НомерПункта);
		
		Текст = Текст + Символы.ПС + Символы.ПС +
		"	// СтандартныеПодсистемы.УправлениеДоступом
		|	Если ОбщегоНазначения.ПодсистемаСуществует(""СтандартныеПодсистемы.УправлениеДоступом"") Тогда
		|		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль(""УправлениеДоступом"");
		|		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		|	КонецЕсли;
		|	// Конец СтандартныеПодсистемы.УправлениеДоступом";
		
		НомерПункта = НомерПункта + 1;
		Текст = Текст + Символы.ПС + Символы.ПС;
	КонецЕсли;
	
	Текст = Текст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1. Запустить отчет ПроверкаВнедренияБСП.epf в режиме исправления с отбором по подсистеме
		           |   Управление доступом, чтобы проверить и обновить внедрение после изменения текста ограничения.'"),
		НомерПункта);
	Текст = Текст + Символы.ПС + Символы.ПС;
	Текст = Текст + "	" + НСтр("ru = 'Либо обновить внедрение вручную:'");
	
	ДобавитьОписаниеШаблонаРоли(Текст, СписокПолноеИмяКоллекции, СвойстваВидовПользователей[0],
		НСтр("ru = 'в роли с назначением для пользователей на права Чтение, Добавление, Изменение
		           |объекта метаданных %1 установить ограничение
		           |(и добавить соответствующий шаблон ограничения, если его еще нет в роли):'"));
	
	ДобавитьОписаниеШаблонаРоли(Текст, СписокПолноеИмяКоллекции, СвойстваВидовПользователей[1],
		НСтр("ru = 'в роли с назначением для внешних пользователей на права Чтение, Добавление, Изменение
		           |объекта метаданных %1 установить ограничение
		           |(и добавить соответствующий шаблон ограничения, если его еще нет в роли):'"));
	
	ДобавитьОписаниеТребуемыхТипов(Текст, НастройкиВнедрения, "ВладелецЗначенийКлючейДоступа");
	ДобавитьОписаниеТребуемыхТипов(Текст, НастройкиВнедрения, "ВладелецЗначенийКлючейДоступаОбъект");
	ДобавитьОписаниеТребуемыхТипов(Текст, НастройкиВнедрения, "ВладелецЗначенийКлючейДоступаДокумент");
	ДобавитьОписаниеТребуемыхТипов(Текст, НастройкиВнедрения, "ВладелецЗначенийКлючейДоступаНаборЗаписей");
	ДобавитьОписаниеТребуемыхТипов(Текст, НастройкиВнедрения, "ВладелецЗначенийКлючейДоступаНаборЗаписейРегистраРасчета");
	ДобавитьОписаниеТребуемыхТипов(Текст, НастройкиВнедрения, "ПолеРегистраКлючейДоступаКРегистрам");
	
	Если ЗначениеЗаполнено(НастройкиВнедрения.ТипыИзмеренийОтдельногоРегистраКлючей) Тогда
		ДобавитьОписаниеТребуемыхЭлементов(Текст,
			НастройкиВнедрения.ТипыИзмеренийОтдельногоРегистраКлючей.ИмяРегистраСведений,
			НастройкиВнедрения.ТипыИзмеренийОтдельногоРегистраКлючей.ТипыИзмерений,
			НСтр("ru = 'в регистр сведений %1 добавить типы:'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиВнедрения.ПредопределенныйИдентификатор) Тогда
		ДобавитьОписаниеТребуемыхЭлементов(Текст,
			НастройкиВнедрения.ПредопределенныйИдентификатор.ИмяСправочника,
			НастройкиВнедрения.ПредопределенныйИдентификатор.ИмяПредопределенного,
			НСтр("ru = 'в справочник %1 добавить предопределенный элемент:'"));
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьОписаниеШаблонаРоли(Текст, ПолноеИмя, ОписаниеШаблонаРоли, Описание)
	
	Если ЗначениеЗаполнено(ОписаниеШаблонаРоли.ТекстОграниченияВРоли) Тогда
		Если СтрНачинаетсяС(ОписаниеШаблонаРоли.ТекстОграниченияВРоли, "<") Тогда
			ШаблонРоли = ОписаниеШаблонаРоли.ТекстОграниченияВРоли;
		Иначе
			ШаблонРоли =
			"#Если &ОграничениеДоступаНаУровнеЗаписейУниверсально #Тогда
			|" + ОписаниеШаблонаРоли.ТекстОграниченияВРоли + "
			|#Иначе
			|<" + НСтр("ru = 'старое ограничение доступа'") + ">
			|#КонецЕсли"
		КонецЕсли;
	Иначе
		ШаблонРоли = "<" + НСтр("ru = 'Очистить ограничение, если указано и удалить шаблон, если не используется в роли'") + ">";
	КонецЕсли;
	
	ДобавляемоеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, ПолноеИмя);
	ДобавляемоеОписание = "- " + ТекстСОтступом(ДобавляемоеОписание, "  ") + Символы.ПС + Символы.ПС;
	ДобавляемоеОписание = ДобавляемоеОписание + "  " + ТекстСОтступом(ШаблонРоли, "  ");
	
	Текст = Текст + Символы.ПС + "	" + ТекстСОтступом(ДобавляемоеОписание, "	") + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеТребуемыхТипов(Текст, НастройкиВнедрения, ИмяОпределяемогоТипа)
	
	Если Не ЗначениеЗаполнено(НастройкиВнедрения[ИмяОпределяемогоТипа]) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьОписаниеТребуемыхЭлементов(Текст, ИмяОпределяемогоТипа, НастройкиВнедрения[ИмяОпределяемогоТипа],
		НСтр("ru = 'в определяемый тип %1 добавить типы:'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеТребуемыхЭлементов(Текст, ПараметрЗаголовка, ОписаниеЭлементов, ЗаголовокОписания)
	
	ДобавляемоеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОписания, ПараметрЗаголовка);
	ДобавляемоеОписание = "- " + ТекстСОтступом(ДобавляемоеОписание, "	") + Символы.ПС;
	ДобавляемоеОписание = ДобавляемоеОписание + "	" + ТекстСОтступом(ОписаниеЭлементов, "	");
	
	Текст = Текст + Символы.ПС + "	" + ТекстСОтступом(ДобавляемоеОписание, "	") + Символы.ПС;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСОтступом(Текст, Отступ)
	
	Возврат СтрЗаменить(Текст, Символы.ПС, Символы.ПС + Отступ);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементов(Контекст)
	
	Элементы = Контекст.Элементы;
	Элементы.ПапкаГотовойВыгрузкиКонфигурацииВФайлы.Доступность = Не Контекст.ВыполнятьВыгрузкуВоВременнуюПапку;
	
	Если Контекст.ИсточникОграничений = "ИзВыгрузкиКонфигурацииВФайлы" Тогда
		Элементы.ПолучениеОграничений.ТекущаяСтраница = Элементы.ОграниченияИзВыгрузки;
	Иначе
		Элементы.ПолучениеОграничений.ТекущаяСтраница = Элементы.ОграниченияИзСписка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаГотовойВыгрузкиКонфигурацииВФайлыНачалоВыбораПослеВыбора(ВыбранныеФайлы, Контекст) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		ПапкаГотовойВыгрузкиКонфигурацииВФайлы = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписание(ПолноеОписание = Истина)
	
	СуществующееОписание = "";
	ЗаполнитьВидыОграниченийПравОбъектовМетаданных(СуществующееОписание);
	
	Если ИсточникОграничений <> "ИзВыгрузкиКонфигурацииВФайлы"
	   И ВсеОграниченияДоступа.ВысотаТаблицы = 0 Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Требуется заполнение табличного
			           |документа ""Все ограничения доступа"".
			           |Инструкции см. выше.'"));
		Возврат;
	КонецЕсли;
	
	НовоеОписание = НовоеОписаниеВидовОграниченийПрав();
	Если НовоеОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолноеОписание Тогда
	#Если Не МобильныйКлиент Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(
		"	Описание =
		|	""");
		
		Текст.ДобавитьСтроку(НовоеОписание);
		Текст.ДобавитьСтроку(
		"	|"";");
		
		Текст.Показать(НСтр("ru = 'Описание видов ограничений прав объектов метаданных'"));
	#КонецЕсли
		Возврат;
	КонецЕсли;
	
	НедостающиеСтроки = "";
	ЧислоСтрок = СтрЧислоСтрок(НовоеОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = СтрПолучитьСтроку(НовоеОписание, НомерСтроки);
		Если СтрНайти(СуществующееОписание, Сред(Строка, 3)) = 0 Тогда
			НедостающиеСтроки = НедостающиеСтроки + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	ЛишниеСтроки = "";
	ЧислоСтрок = СтрЧислоСтрок(СуществующееОписание);
	Для НомерСтроки = 1 По ЧислоСтрок Цикл
		Строка = "	|" + СтрПолучитьСтроку(СуществующееОписание, НомерСтроки);
		Если СтрНайти(НовоеОписание, СокрП(Строка)) = 0 Тогда
			ЛишниеСтроки = ЛишниеСтроки + Строка + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
#Если Не МобильныйКлиент Тогда
	Текст = Новый ТекстовыйДокумент;
	
	Текст.ДобавитьСтроку(НСтр("ru = 'Недостающие виды ограничений прав объектов метаданных:'"));
	Текст.ДобавитьСтроку(СокрП(НедостающиеСтроки));
	Текст.ДобавитьСтроку("");
	
	Текст.ДобавитьСтроку(НСтр("ru = 'Лишние виды ограничений прав объектов метаданных:'"));
	Текст.ДобавитьСтроку(СокрП(ЛишниеСтроки));
	Текст.ДобавитьСтроку("");
	
	Текст.Показать(НСтр("ru = 'Недостающие и лишние виды ограничений прав объектов метаданных'"));
#КонецЕсли
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьВидыОграниченийПравОбъектовМетаданных(СуществующееОписание)
	
	Список = УправлениеДоступомСлужебныйПовтИсп.ПостоянныеВидыОграниченийПравОбъектовМетаданных(Истина);
	Если ТипЗнч(Список) = Тип("Строка") Тогда
		СуществующееОписание = Список;
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Список Цикл
		СуществующееОписание = СуществующееОписание
			+ Строка.ПолноеИмяТаблицы + "." + Строка.Право + "." + Строка.ИмяВидаДоступа
			+ ?(ЗначениеЗаполнено(Строка.ПолноеИмяТаблицыОбъекта), "." + Строка.ПолноеИмяТаблицыОбъекта, "")
			+ Символы.ПС;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовоеОписаниеВидовОграниченийПрав()
	
	ВидыОграниченийПрав.Очистить();
	
	ОшибкиВВыгрузке = "";
	ОпределитьВидыОграниченийПравНаСервере(ОшибкиВВыгрузке);
	Если ЗначениеЗаполнено(ОшибкиВВыгрузке) Тогда
	#Если Не МобильныйКлиент Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ОшибкиВВыгрузке);
		Если ИсточникОграничений = "ИзВыгрузкиКонфигурацииВФайлы" Тогда
			ЗаголовокДокумента = НСтр("ru = 'Ошибки при загрузке ограничений из файлов выгрузки конфигурации'");
		Иначе
			ЗаголовокДокумента = НСтр("ru = 'Ошибки при разборе ограничений, вставленных в табличный документ'");
		КонецЕсли;
		ТекстовыйДокумент.Показать(ЗаголовокДокумента);
	#КонецЕсли
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		Если ВРег(Лев(Строка.Таблица, СтрДлина("Справочник."))) = ВРег("Справочник.") Тогда
			Строка.ПорядокКоллекции = 1;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Документ."))) = ВРег("Документ.") Тогда
			Строка.ПорядокКоллекции = 2;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ЖурналДокументов."))) = ВРег("ЖурналДокументов.") Тогда
			Строка.ПорядокКоллекции = 3;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовХарактеристик."))) = ВРег("ПланВидовХарактеристик.") Тогда
			Строка.ПорядокКоллекции = 4;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланСчетов."))) = ВРег("ПланСчетов.") Тогда
			Строка.ПорядокКоллекции = 5;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("ПланВидовРасчета."))) = ВРег("ПланВидовРасчета.") Тогда
			Строка.ПорядокКоллекции = 6;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрСведений."))) = ВРег("РегистрСведений.") Тогда
			Строка.ПорядокКоллекции = 7;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрНакопления."))) = ВРег("РегистрНакопления.") Тогда
			Строка.ПорядокКоллекции = 8;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрБухгалтерии."))) = ВРег("РегистрБухгалтерии.") Тогда
			Строка.ПорядокКоллекции = 9;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("РегистрРасчета."))) = ВРег("РегистрРасчета.") Тогда
			Строка.ПорядокКоллекции = 10;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("БизнесПроцесс."))) = ВРег("БизнесПроцесс.") Тогда
			Строка.ПорядокКоллекции = 11;
			
		ИначеЕсли ВРег(Лев(Строка.Таблица, СтрДлина("Задача."))) = ВРег("Задача.") Тогда
			Строка.ПорядокКоллекции = 12;
			
		КонецЕсли;
		
		Если Строка.Право = "Чтение" Тогда
			Строка.ПорядокПрав = 1;
		Иначе
			Строка.ПорядокПрав = 2;
		КонецЕсли;
	КонецЦикла;
	
	ВидыОграниченийПрав.Сортировать("ПорядокКоллекции Возр, Таблица Возр, ПорядокПрав Возр, ВидДоступа Возр, ТаблицаОбъекта Возр");
	
	НовоеОписание = "";
	
	Для каждого Строка Из ВидыОграниченийПрав Цикл
		
		НовоеОписание = НовоеОписание
			+ "	|"
			+ Строка.Таблица
			+ "." + Строка.Право
			+ "." + Строка.ВидДоступа
			+ ?(ЗначениеЗаполнено(Строка.ТаблицаОбъекта), "." + Строка.ТаблицаОбъекта, "")
			+ Символы.ПС;
		
	КонецЦикла;
	
	Возврат СокрП(НовоеОписание);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеНачальногоЗаполненияПрофилейНаВстроенномЯзыке(КонкретныйПрофиль)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Ссылка
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|ГДЕ
	|	Профили.Ссылка <> ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)
	|	И НЕ Профили.ПометкаУдаления
	|	И &ОтборЭлементов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Профили.Наименование";
	
	Если Метаданные.Справочники.ПрофилиГруппДоступа.Иерархический
	   И Метаданные.Справочники.ПрофилиГруппДоступа.ВидИерархии
	     = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		УсловиеОтбораЭлементов = "(НЕ Профили.ЭтоГруппа)";
	Иначе
		УсловиеОтбораЭлементов = "Истина";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЭлементов", УсловиеОтбораЭлементов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Текст = "";
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(КонкретныйПрофиль) И Выборка.Ссылка <> КонкретныйПрофиль Тогда
			Продолжить;
		КонецЕсли;
		Текст = Текст + ОписаниеНачальногоЗаполненияПрофиляНаВстроенномЯзыке(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Текст + Символы.ПС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеНачальногоЗаполненияПрофиляНаВстроенномЯзыке(ПрофильСсылка)
	
	Профиль = ПрофильСсылка.ПолучитьОбъект(); // СправочникОбъект.ПрофилиГруппДоступа
	
	ИдентификаторПоставляемыхДанных = Строка(Профиль.ИдентификаторПоставляемыхДанных);
	
	ОписанияПрофилей = УправлениеДоступомСлужебныйПовтИсп.ОписаниеПоставляемыхПрофилей().ОписанияПрофилей;
	СвойстваПрофиля = ОписанияПрофилей.Получить(ИдентификаторПоставляемыхДанных); // см. Справочники.ПрофилиГруппДоступа.СвойстваПоставляемогоПрофиля
	
	ОписаниеПоставляемогоПрофиля = "";
	Если СвойстваПрофиля <> Неопределено Тогда
		ПояснениеПоставляемыхПрофилей = УправлениеДоступомСлужебныйПовтИсп.ПояснениеПоставляемыхПрофилей();
		ОписаниеПоставляемогоПрофиля = ПояснениеПоставляемыхПрофилей.Получить(СвойстваПрофиля.Идентификатор);
	КонецЕсли;
	
	Описание = "";
	Для НомерСтроки = 1 По СтрЧислоСтрок(ОписаниеПоставляемогоПрофиля) Цикл
		Если ЗначениеЗаполнено(Описание) Тогда
			Описание = Описание
			+ "
			  |		           |";
		КонецЕсли;
		Описание = Описание + СтрПолучитьСтроку(ОписаниеПоставляемогоПрофиля, НомерСтроки);
	КонецЦикла;
	
	Имя = Профиль.ИмяПредопределенныхДанных;
	
	Если Не ЗначениеЗаполнено(Имя)
	   И СвойстваПрофиля <> Неопределено
	   И ЗначениеЗаполнено(СвойстваПрофиля.Имя) Тогда
		
		Имя = СвойстваПрофиля.Имя;
	КонецЕсли;
	
	Если Профиль.ИдентификаторПоставляемыхДанных
		= ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор() Тогда
		
		Идентификатор = Строка(Профиль.Ссылка.УникальныйИдентификатор());
	Иначе
		Идентификатор = Строка(Профиль.ИдентификаторПоставляемыхДанных);
	КонецЕсли;
	
	Текст = "
	|	// Профиль """ + Профиль.Наименование + """.
	|	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();" + ?(НЕ ЗначениеЗаполнено(Имя), "", "
	|	ОписаниеПрофиля.Имя           = """ + Имя + """") + ";
	|	ОписаниеПрофиля.Идентификатор = """ + Идентификатор + """;
	|	ОписаниеПрофиля.Наименование  =
	|		НСтр(""ru = '" + Профиль.Наименование + "'"",
	|			ОбщегоНазначения.КодОсновногоЯзыка());";
	
	Назначение = Новый Массив;
	Для Каждого Строка Из Профиль.Назначение Цикл
		Тип = ТипЗнч(Строка.ТипПользователей);
		Если Не ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			Продолжить;
		КонецЕсли;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Строка.ТипПользователей);
		ПустаяСсылкаОбъекта = МенеджерОбъекта.ПустаяСсылка();
		Если Назначение.Найти(ПустаяСсылкаОбъекта) = Неопределено Тогда
			Назначение.Добавить(ПустаяСсылкаОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Если Назначение.Количество() > 1
	 Или Назначение.Найти(Справочники.Пользователи.ПустаяСсылка()) = Неопределено Тогда
		
		Текст = Текст + "
		|	// Переопределение назначения.";
		Для Каждого ТекущееНазначение Из Назначение Цикл
			ИмяТипаСсылки = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(ТекущееНазначение));
			Текст = Текст + "
			|	ОписаниеПрофиля.Назначение.Добавить(Тип(""" + ИмяТипаСсылки + """));";
		КонецЦикла;
	КонецЕсли;
	
	Текст = Текст + "
	|	ОписаниеПрофиля.Описание =
	|		НСтр(""ru = '" + Описание + "'"");";

	
	ОписаниеРолей = Новый СписокЗначений;
	Для каждого ОписаниеРоли Из Профиль.Роли Цикл
		ОписаниеРолей.Добавить(ОписаниеРоли.Роль.Имя);
	КонецЦикла;
	ОписаниеРолей.СортироватьПоЗначению();
	
	Для каждого ОписаниеРоли Из ОписаниеРолей Цикл
		Текст = Текст + "
		|	ОписаниеПрофиля.Роли.Добавить(""" + ОписаниеРоли.Значение + """);"
	КонецЦикла;
	
	Для каждого ОписаниеВидаДоступа Из Профиль.ВидыДоступа Цикл
		
		ИмяВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ОписаниеВидаДоступа.ВидДоступа).Имя;
		
		Текст = Текст + "
		|	ОписаниеПрофиля.ВидыДоступа.Добавить(""" + ИмяВидаДоступа + """"
			+ ?(ОписаниеВидаДоступа.Предустановленный,
			    ", ""Предустановленный""",
			    ?(ОписаниеВидаДоступа.ВсеРазрешены,
			      ", ""ВначалеВсеРазрешены""", ""))
			+ ");";
		
		ОписаниеЗначенийДоступа = Профиль.ЗначенияДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа));
		Для Каждого ОписаниеЗначенияДоступа Из ОписаниеЗначенийДоступа Цикл
			Если НЕ ЗначениеЗаполнено(ОписаниеЗначенияДоступа.ЗначениеДоступа) Тогда
				Продолжить;
			КонецЕсли;
			МетаданныеЗначения = ОписаниеЗначенияДоступа.ЗначениеДоступа.Метаданные();
			Если Метаданные.Перечисления.Найти(МетаданныеЗначения.Имя) = МетаданныеЗначения Тогда
				ИмяЗначенияДоступа = ОбщегоНазначения.ИмяЗначенияПеречисления(ОписаниеЗначенияДоступа.ЗначениеДоступа);
			Иначе
				ИмяЗначенияДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ОписаниеЗначенияДоступа.ЗначениеДоступа, "ИмяПредопределенныхДанных");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ИмяЗначенияДоступа) Тогда
				Продолжить;
			КонецЕсли;
			ИмяТаблицыЗначения = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОписаниеЗначенияДоступа.ЗначениеДоступа);
			ПолноеИмяЗначенияДоступа = ИмяТаблицыЗначения + "." + ИмяЗначенияДоступа;
			Текст = Текст + "
			|	ОписаниеПрофиля.ЗначенияДоступа.Добавить(""" + ИмяВидаДоступа + """,
			|		""" + ПолноеИмяЗначенияДоступа + """);"
		КонецЦикла;
	КонецЦикла;
	
	Текст = Текст + "
	|	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	|";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ОпределитьВидыОграниченийПравНаСервере(ОшибкиВВыгрузке)
	
	ОграниченияДоступа = ОграниченияДоступа(ОшибкиВВыгрузке);
	Если ЗначениеЗаполнено(ОшибкиВВыгрузке) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОграниченияДоступа",  ОграниченияДоступа);
	ПараметрыПроцедуры.Вставить("ВидыОграниченийПрав", ВидыОграниченийПрав);
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ОпределитьВидыОграниченийПрав(ПараметрыПроцедуры);
	
КонецПроцедуры

// Возвращает таблицу с полями Таблица, Роль, Право, Поля, Ограничение,
// как вывод списка конфигуратора "Все ограничения доступа" в табличный документ.
//
// Параметры:
//  ПапкаВыгрузки - Строка - каталог, содержащий выгрузку конфигурации в файлы.
//                    Если не пустая строка, тогда выгрузка будет выполнена во временный каталог.
//
&НаСервере
Функция ОграниченияДоступа(ОшибкиВВыгрузке)
	
	Если ИсточникОграничений = "ИзВыгрузкиКонфигурацииВФайлы" Тогда
		ПапкаВыгрузки = ?(ВыполнятьВыгрузкуВоВременнуюПапку, "", ПапкаГотовойВыгрузкиКонфигурацииВФайлы);
		Возврат РеквизитФормыВЗначение("Объект").ОграниченияДоступаИзВыгрузкиКонфигурацииВФайлы(ПапкаВыгрузки, ОшибкиВВыгрузке);
	Иначе
		Возврат ОграниченияДоступаИзТабличногоДокумента(ОшибкиВВыгрузке);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОграниченияДоступаИзТабличногоДокумента(ОшибкиВВыгрузке)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Таблица",     Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Роль",        Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Право",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Поля",        Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Ограничение", Новый ОписаниеТипов("Строка"));
	
	Права = Новый Соответствие;
	Права.Вставить(ВРег("Чтение"),     Истина);
	Права.Вставить(ВРег("Изменение"),  Истина);
	Права.Вставить(ВРег("Добавление"), Истина);
	Права.Вставить(ВРег("Удаление"),   Истина);
	
	Для НомерСтроки = 2 По ВсеОграниченияДоступа.ВысотаТаблицы Цикл
		
		Свойства = Новый Структура("Таблица, Роль, Право, Поля, Ограничение");
		Свойства.Таблица     = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C1").Текст;
		Свойства.Роль        = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C2").Текст;
		Свойства.Право       = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C3").Текст;
		Свойства.Поля        = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C4").Текст;
		Свойства.Ограничение = ВсеОграниченияДоступа.Область("R" + Формат(НомерСтроки,"ЧГ=") + "C5").Текст;
		
		Если Не ЗначениеЗаполнено(Свойства.Таблица)
		   И Не ЗначениеЗаполнено(Свойства.Роль)
		   И Не ЗначениеЗаполнено(Свойства.Право)
		   И Не ЗначениеЗаполнено(Свойства.Поля)
		   И Не ЗначениеЗаполнено(Свойства.Ограничение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЕстьОшибка = Ложь;
		
		МетаданныеТаблицы = Метаданные.НайтиПоПолномуИмени(Свойства.Таблица);
		МетаданныеРоли    = Метаданные.Роли.Найти(Свойства.Роль);
		
		Если МетаданныеТаблицы = Неопределено Тогда
			ДобавитьОшибку(ОшибкиВВыгрузке, НомерСтроки, ЕстьОшибка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти объект метаданных ""%1"".'"), Свойства.Таблица));
		КонецЕсли;
		
		Если МетаданныеРоли = Неопределено Тогда
			ДобавитьОшибку(ОшибкиВВыгрузке, НомерСтроки, ЕстьОшибка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось найти роль ""%1"".'"), Свойства.Роль));
		КонецЕсли;
		
		Если Права.Получить(ВРег(Свойства.Право)) = Неопределено Тогда
			ДобавитьОшибку(ОшибкиВВыгрузке, НомерСтроки, ЕстьОшибка, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Некорректное имя права ""%1"".'"), Свойства.Право));
		КонецЕсли;
		
		Если ЕстьОшибка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПравоДоступа(Свойства.Право, МетаданныеТаблицы, МетаданныеРоли) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Свойства);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ДобавитьОшибку(ОшибкиВВыгрузке, НомерСтроки, ЕстьОшибка, ОписаниеОшибки)
	
	ЕстьОшибка = Истина;
	
	ОшибкиВВыгрузке = ОшибкиВВыгрузке  + Символы.ПС + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В строке %1 табличного документа обнаружена ошибка:
		           |%2'"), Формат(НомерСтроки, "ЧГ="), ОписаниеОшибки) + Символы.ПС;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	Элементы.ПутьКФайлуПредыдущейВерсииКонфигурации.Видимость = ИсточникСравнения = "Файл";
	Элементы.ПапкаПредыдущейВыгрузкиТекстовRLS.Видимость = ИсточникСравнения = "Папка";
КонецПроцедуры

&НаКлиенте
Функция ОбернутьВКавычки(Строка)
	Возврат """" + СтрЗаменить(Строка, """", """""") + """";
КонецФункции

#Если Не ВебКлиент Тогда

&НаКлиенте
Процедура ПрочитатьПараметрыЗапуска()
	
	Если СтрНайти(ПараметрЗапуска, "ПапкаЭталонногоОписания") = 0
		И СтрНайти(ПараметрЗапуска, "ПапкаНовогоОписания") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПараметров = СтрРазделить(ПараметрЗапуска, ";", Ложь);
	КоллекцияПараметров = Новый Структура;
	
	Для Каждого Описание Из ОписаниеПараметров Цикл
		ЧастиСтроки = СтрРазделить(Описание, "=", Истина);
		ИмяПараметра = ЧастиСтроки[0];
		ЗначениеПараметра = Истина;
		Если ЧастиСтроки.Количество() > 1 Тогда
			ЗначениеПараметра = ЧастиСтроки[1];
		КонецЕсли;
		КоллекцияПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, КоллекцияПараметров);
	ЗаполнитьЗначенияСвойств(Объект, КоллекцияПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПапки(ВыбранныеФайлы, ИмяРеквизита) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ИмяРеквизита] = ВыбранныеФайлы[0] + ПолучитьРазделительПути();
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореФайлаКонфигурации(ВыбранныеФайлы, ИмяРеквизита) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлуПредыдущейВерсииКонфигурации = ВыбранныеФайлы[0];
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыгрузкуТекстовОграничений()
	УдалитьПапкуВыгрузки = Ложь;
	Если Не ЗначениеЗаполнено(Объект.ПапкаВыгрузкиКонфигурации) Тогда
		УдалитьПапкуВыгрузки = Истина;
		Объект.ПапкаВыгрузкиКонфигурации = ПолучитьИмяВременногоФайла("cf") + ПолучитьРазделительПути();
		СоздатьКаталог(Объект.ПапкаВыгрузкиКонфигурации);
		
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		Если ОткрытКонфигуратор() Тогда
			Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
				КаталогИнформационнойБазы = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения).file;
				КопироватьФайл(КаталогИнформационнойБазы + "\1Cv8.1CD", Объект.ПапкаВыгрузкиКонфигурации + "\1Cv8.1CD");
				СтрокаСоединения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("File=""%1"";", Объект.ПапкаВыгрузкиКонфигурации);
			Иначе
				ВызватьИсключение НСтр("ru = 'Для сравнения текстов RLS необходимо закрыть конфигуратор.'");
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьПодключение("ЭтаКонфигурация", СтрокаСоединения, ИмяПользователя());
		ВыгрузитьКонфигурациюВФайлы("ЭтаКонфигурация", Объект.ПапкаВыгрузкиКонфигурации, , ВсеРоли());
	КонецЕсли;
	
	ВыгрузитьТекстыОграничений();
	
	Если УдалитьПапкуВыгрузки Тогда
		УдалитьФайлы(Объект.ПапкаВыгрузкиКонфигурации);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьТекстыОграничений()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыгрузитьТекстыОграничений();
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайл(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПрочитатьОтличия()
	НайденныеРазличия.Очистить();
	Было = "";
	Стало = "";
	
	Если Не ЗначениеЗаполнено(Объект.ПапкаНовогоОписания) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = Объект.ПапкаНовогоОписания + "Отличия.txt";
	СодержимоеФайла = ПрочитатьФайл(ИмяФайла);
	СписокТаблиц = СтрРазделить(СодержимоеФайла, Символы.ПС);
	Для Каждого Таблица Из СписокТаблиц Цикл
		НайденныеРазличия.Добавить(Таблица);
	КонецЦикла;
	
	Если НайденныеРазличия.Количество() > 0 Тогда
		Элементы.НайденныеРазличия.ТекущаяСтрока = НайденныеРазличия[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьТекстыОграниченийИзФайлаКонфигурации()
	
	ПапкаИБ = ПолучитьИмяВременногоФайла("db");
	
	ДобавитьПодключение("ПредыдущаяКонфигурация", "File=""" + ПапкаИБ + """");
	СоздатьНовуюИБ("ПредыдущаяКонфигурация", ПутьКФайлуПредыдущейВерсииКонфигурации);
	
	КлючиЗапуска = Новый Структура;
	КлючиЗапуска.Вставить("ОтключитьЛогикуНачалаРаботыСистемы");
	КлючиЗапуска.Вставить("ПапкаВыгрузкиКонфигурации", "");
	КлючиЗапуска.Вставить("ПапкаЭталонногоОписания", "");
	КлючиЗапуска.Вставить("ПапкаНовогоОписания", Объект.ПапкаЭталонногоОписания);
	
	КлючЗапуска = ПараметрыЗапускаСтрокой(КлючиЗапуска);
	
	ПараметрыЗапускаКлиента = ПараметрыЗапускаКлиента("ПредыдущаяКонфигурация", КлючЗапуска, ИмяФайлаОбработки, Истина, Ложь);
	ЗапуститьПредприятие(ПараметрыЗапускаКлиента, Истина);
	
	УдалитьФайлы(ПапкаИБ);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗапускаСтрокой(ПараметрыЗапуска)
	Строки = Новый Массив;
	Для Каждого Параметр Из ПараметрыЗапуска Цикл
		Строки.Добавить(Параметр.Ключ + ?(Параметр.Значение = Неопределено, "", "=" + Параметр.Значение));
	КонецЦикла;
	Возврат СтрСоединить(Строки, ";");
КонецФункции

&НаСервереБезКонтекста
Функция ВсеРоли()
	Результат = Новый Массив;
	Для Каждого Роль Из Метаданные.Роли Цикл
		Если Роль.РасширениеКонфигурации() = Неопределено Тогда
			Результат.Добавить(Роль.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытКонфигуратор()
	Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если ВРег(Сеанс.ИмяПриложения) = ВРег("Designer") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

#Область ПакетныйРежим

#Область КоманднаяСтрока1СПредприятия

&НаКлиенте
Процедура СоздатьНовуюИБ(ИмяПодключения, ИмяФайлаШаблона = "")
	
	Подключение = НастройкиПодключения(ИмяПодключения);
	
	Отказ = Истина;
	Если СтрНачинаетсяС(НРег(Подключение.СтрокаСоединения), НРег("File=")) Тогда
		Позиция = СтрНайти(Подключение.СтрокаСоединения, """");
		Если Позиция > 0 Тогда
			ПутьКФайловойБазе = Сред(Подключение.СтрокаСоединения, Позиция + 1);
			Позиция = СтрНайти(ПутьКФайловойБазе, """");
			Если Позиция > 0 Тогда
				ПутьКФайловойБазе = Лев(ПутьКФайловойБазе, Позиция - 1);
				СоздатьКаталогБазы(ПутьКФайловойБазе);
				Отказ = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Строка соединения ИБ ""%1"" указана неверно:'"), ИмяПодключения) + Символы.ПС
			+ Подключение.СтрокаСоединения;
	КонецЕсли;
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить(ОбернутьВКавычки(КаталогПрограммы() + "1cv8.exe"));
	ПараметрыЗапуска.Добавить("CREATEINFOBASE");
	ПараметрыЗапуска.Добавить(ОбернутьВКавычки(Подключение.СтрокаСоединения));
	
	Если ЗначениеЗаполнено(ИмяФайлаШаблона) Тогда
		ПараметрыЗапуска.Добавить("/UseTemplate " + ОбернутьВКавычки(ИмяФайлаШаблона));
	КонецЕсли;
	
	ЗапуститьПредприятие(ПараметрыЗапуска, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗапускаКлиента(ИмяПодключения, КлючЗапуска, ИмяОбработки = "", ЗапретитьЗапускРегламентныхЗаданий = Ложь,
	ИспользоватьАвторизацию = Истина)
	
	Подключение = НастройкиПодключения(ИмяПодключения);
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКИсполняемомуФайлуПлатформы("ТонкийКлиент")));
	ПараметрыЗапуска.Добавить("ENTERPRISE");
	ПараметрыЗапуска.Добавить("/IBConnectionString " + ОбернутьВКавычки(Подключение.СтрокаСоединения));
	
	Если ЗначениеЗаполнено(Подключение.НомерОбласти) Тогда 
		ПараметрыЗапуска.Добавить("/Z-,+" + Подключение.НомерОбласти);
	КонецЕсли;
	
	Если ИспользоватьАвторизацию И ЗначениеЗаполнено(Подключение.Логин) Тогда 
		ПараметрыЗапуска.Добавить("/N "+ ОбернутьВКавычки(Подключение.Логин));
		Если ЗначениеЗаполнено(Подключение.Пароль) Тогда 
			ПараметрыЗапуска.Добавить("/P "+ ОбернутьВКавычки(Подключение.Пароль));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КлючЗапуска) Тогда
		ПараметрыЗапуска.Добавить("/C "+ ОбернутьВКавычки(КлючЗапуска));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОбработки) Тогда
		ПараметрыЗапуска.Добавить("/Execute "+ ОбернутьВКавычки(ИмяОбработки));
	КонецЕсли;
	
	Если ЗапретитьЗапускРегламентныхЗаданий Тогда
		ПараметрыЗапуска.Добавить("/AllowExecuteScheduledJobs -Off"); // "-Off" чувствительно к регистру.
	КонецЕсли;
	
	ПараметрыЗапуска.Добавить("/DisableStartupMessages");
	ПараметрыЗапуска.Добавить("/DisableStartupDialogs");
	
	Возврат ПараметрыЗапуска;
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗапускаКонфигуратора(ИмяПодключения, ИнтерактивныйЗапуск = Ложь)
	
	Подключение = НастройкиПодключения(ИмяПодключения);
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить(ОбернутьВКавычки(ПутьКИсполняемомуФайлуПлатформы()));
	ПараметрыЗапуска.Добавить("DESIGNER");
	ПараметрыЗапуска.Добавить("/IBConnectionString " + ОбернутьВКавычки(Подключение.СтрокаСоединения));
	
	Если ЗначениеЗаполнено(Подключение.Логин) Тогда 
		ПараметрыЗапуска.Добавить("/N "+ ОбернутьВКавычки(Подключение.Логин));
		Если ЗначениеЗаполнено(Подключение.Пароль) Тогда 
			ПараметрыЗапуска.Добавить("/P "+ ОбернутьВКавычки(Подключение.Пароль));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИнтерактивныйЗапуск Тогда
		ПараметрыЗапуска.Добавить("/DisableStartupMessages");
		ПараметрыЗапуска.Добавить("/DisableStartupDialogs");
	КонецЕсли;
	
	Возврат ПараметрыЗапуска;
КонецФункции

&НаКлиенте
Процедура ВыгрузитьКонфигурациюВФайлы(ИмяПодключения, ПапкаВыгрузки, ВыгружатьПлоскимСписком = Ложь, СписокОбъектов = Неопределено)
	
	СтрокаПараметра = "/DumpConfigToFiles " + ОбернутьВКавычки(ПапкаВыгрузки);
	
	ИмяФайлаСписка = "";
	Если ЗначениеЗаполнено(СписокОбъектов) Тогда
		ИмяФайлаСписка = ПолучитьИмяВременногоФайла();
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСписка);
		ЗаписьТекста.ЗаписатьСтроку(СтрСоединить(СписокОбъектов, Символы.ПС));
		ЗаписьТекста.Закрыть();
		СтрокаПараметра = СтрокаПараметра + " -listFile " + ОбернутьВКавычки(ИмяФайлаСписка);
	КонецЕсли;
	
	ПараметрыЗапуска = ПараметрыЗапускаКонфигуратора(ИмяПодключения);
	ПараметрыЗапуска.Добавить(СтрокаПараметра);
	Если ВыгружатьПлоскимСписком Тогда
		ПараметрыЗапуска.Добавить("-Format ""Plain""");
	КонецЕсли;
	ЗапуститьПредприятие(ПараметрыЗапуска, Истина);
	
	Если ЗначениеЗаполнено(ИмяФайлаСписка) Тогда
		УдалитьФайлы(ИмяФайлаСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПредприятие(ПараметрыЗапуска, ОжидатьЗавершения = Ложь)
	
#Если МобильныйКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'Инструмент ""Управление доступом"" не доступен в веб-клиенте и мобильном клиенте, необходимо использовать тонкий клиент.'"));
	Возврат;
#Иначе
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	ПараметрыЗапуска.Добавить("/Out " + ОбернутьВКавычки(ИмяФайлаЛога));
	
	СтрокаЗапуска = СтрСоединить(ПараметрыЗапуска, " ");
	
	СистемныйПроцесс = Новый COMОбъект("WScript.Shell");
	ТекстОшибки = НСтр("ru = 'Ошибка выполнения командной строки:
		|%1
		|Строка запуска: %2'");
	
	Попытка
		Процесс = СистемныйПроцесс.Exec(СтрокаЗапуска);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтрокаЗапуска);
	КонецПопытки;
	
	Если ОжидатьЗавершения Тогда
		Пока Процесс.Status = 0 Цикл
			Пауза(1);
		КонецЦикла;
	КонецЕсли;
	
	КодВозврата = Процесс.ExitCode;
	
	Если КодВозврата <> 0 Тогда
		ЛогЗапуска = ПрочитатьФайл(ИмяФайлаЛога);
		ВызватьИсключение НСтр("ru = 'Операция не выполнена.'") + Символы.ПС 
			+ НСтр("ru = 'Строка запуска:'") + Символы.ПС 
			+ СтрокаЗапуска + Символы.ПС 
			+ НСтр("ru = 'Код возврата:'")+ " " + КодВозврата + Символы.ПС
			+ НСтр("ru = 'Содержимое лога'") + " " + ИмяФайлаЛога + ":" + Символы.ПС
			+ ЛогЗапуска;
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаЛога);
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СоздатьКаталогБазы(Путь)
	Файл = Новый Файл(Путь);
	Если Файл.Существует() Тогда
		УдалитьФайлы(Путь);
	КонецЕсли;
	ПапкаЖурнала = Путь + "\1Cv8Log";
	СоздатьКаталог(ПапкаЖурнала);
	ИмяФайлаЖурнала = ПапкаЖурнала + "\1Cv8.lgf";
	Файл = Новый Файл(ИмяФайлаЖурнала);
	Если Не Файл.Существует() Тогда
		ЗаписьТекста = Новый ЗаписьТекста(Путь + "\1Cv8Log\1Cv8.lgf", "windows-1251");
		ЗаписьТекста.Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КоманднаяСтрокаОС

&НаКлиенте
Процедура Пауза(ИнтервалОжидания)
	
	ЗапуститьСОжиданиемЗавершенияРаботыПриложения("timeout /t " + Формат(ИнтервалОжидания, "ЧГ=0"), "Пауза", 0);
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьСОжиданиемЗавершенияРаботыПриложения(СтрокаЗапуска, Контекст, ВидОкнаЗапускаемогоПриложения = 1)
	
#Если МобильныйКлиент Тогда
	ПоказатьПредупреждение(, НСтр("ru = 'Инструмент ""Управление доступом"" не доступен в веб-клиенте и мобильном клиенте, необходимо использовать тонкий клиент.'"));
	Возврат Неопределено;
#Иначе
	КодВозврата = -1;
	СистемныйПроцесс = Новый COMОбъект("WScript.Shell");
	
	Попытка
		КодВозврата = СистемныйПроцесс.Run(СтрокаЗапуска, ВидОкнаЗапускаемогоПриложения, Истина);
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка запуска в %1: %2
			|Строка запуска: %3'");
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, Контекст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтрокаЗапуска);
		
	КонецПопытки;
	
	Возврат КодВозврата;
#КонецЕсли

КонецФункции

&НаКлиенте
Функция ПутьКИсполняемомуФайлуПлатформы(Приложение = "")
	
	ИмяФайла = "1cv8.exe";
	Если Приложение = "ТонкийКлиент" Тогда
		ИмяФайла = "1cv8c.exe";
	КонецЕсли;
	
	ПутьКИсполняемомуФайлу = КаталогПрограммы() + ИмяФайла;
	
	Возврат ПутьКИсполняемомуФайлу;

КонецФункции

#КонецОбласти

#Область СписокПодключений

&НаКлиенте
Функция НастройкиПодключений()
	
	ИмяПараметра = "Тестирование.НастройкиПодключений";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ПараметрыПриложения.Вставить(ИмяПараметра, Новый Соответствие);
	КонецЕсли;
	
	Возврат ПараметрыПриложения[ИмяПараметра];
	
КонецФункции

&НаКлиенте
Функция НастройкиПодключения(ИмяПодключения)
	
	НастройкиПодключения = НастройкиПодключений()[ИмяПодключения];
	Если НастройкиПодключения = Неопределено Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Настройки подключения %1 не найдены.'"), ИмяПодключения);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат НастройкиПодключения;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПодключение(ИмяПодключения, СтрокаСоединения, Логин = "", Пароль = "")
	
	НастройкиПодключения = НастройкиПодключений()[ИмяПодключения];
	Если НастройкиПодключения = Неопределено Тогда
		НастройкиПодключения = Новый Структура;
	КонецЕсли;
	НастройкиПодключения.Вставить("СтрокаСоединения", СтрокаСоединения);
	НастройкиПодключения.Вставить("Логин", Логин);
	НастройкиПодключения.Вставить("Пароль", Пароль);
	НастройкиПодключения.Вставить("НомерОбласти");
	НастройкиПодключения.Вставить("Платформа");
	
	НастройкиПодключений().Вставить(ИмяПодключения, НастройкиПодключения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#КонецОбласти
